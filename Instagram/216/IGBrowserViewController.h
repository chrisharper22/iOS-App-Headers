//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Mar 27 2019 15:10:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <FBSharedFramework/IGViewController.h>

#import "IGAnalyticsModuleUriProvider-Protocol.h"
#import "IGBrowserChromeViewControllerDelegate-Protocol.h"
#import "IGBrowserHistoryLinkHandlerDelegate-Protocol.h"
#import "IGGestureHandler-Protocol.h"
#import "IGNavigationControllerDelegate-Protocol.h"
#import "IGWebViewControllerDelegate-Protocol.h"

@class IABLoggingContext, IABLoggingCoordinator, IGBrowserChromeViewController, IGBrowserFullscreenTransitioningDelegate, IGBrowserOverflowMenuController, IGBrowserSession, IGUserSession, IGWebViewController, NSArray, NSDate, NSString, NSURL, UIView;
@protocol FBWebView, IGAnalyticsEventLoggingProtocol, IGBrowserSharing, IGBrowserViewControllerDelegate;

@interface IGBrowserViewController : IGViewController <IGAnalyticsModuleUriProvider, IGBrowserChromeViewControllerDelegate, IGBrowserHistoryLinkHandlerDelegate, IGWebViewControllerDelegate, IGNavigationControllerDelegate, IGGestureHandler>
{
    IGBrowserChromeViewController *_browserChromeViewController;
    IGWebViewController *_webViewController;
    UIView<FBWebView> *_webView;
    _Bool _hasDisplayedWebView;
    IGUserSession *_userSession;
    IGBrowserOverflowMenuController *_overflowMenuController;
    id <IGBrowserSharing> _directSharer;
    IGBrowserFullscreenTransitioningDelegate *_fullscreenTransitioningDelegate;
    id <IGAnalyticsEventLoggingProtocol> _analyticsLogger;
    IABLoggingCoordinator *_loggingCoordinator;
    NSDate *_browserStartInitializationTime;
    unsigned long long _dismissMethod;
    long long _numberOfCloses;
    long long _numberOfActualLaunches;
    NSString *_currentDisplayedWebPageTitle;
    NSURL *_currentDisplayedURL;
    NSDate *_browserOpenedTime;
    _Bool _browserPreservationEnabled;
    _Bool _applicationDidReceiveMemoryWarning;
    _Bool _preserveOnForceQuit;
    IABLoggingContext *_loggingContext;
    _Bool _fullscreenExperienceEnabled;
    _Bool _shouldShowTopRoundCorners;
    _Bool _showBarButtons;
    _Bool _shouldHideToolbarWhenViewAppear;
    _Bool _prefersNavigationBarHidden;
    _Bool _userWebInteractionEnabled;
    _Bool _navigationControllerPanGestureEnabled;
    IGBrowserSession *_browserSession;
    id <IGBrowserViewControllerDelegate> _delegate;
    NSURL *_initialURL;
    unsigned long long _browserHeaderStyle;
    long long _prefersStatusBarStyle;
    unsigned long long _launchMethod;
    unsigned long long _interactivePresentationState;
}

- (void).cxx_destruct;
@property(nonatomic) unsigned long long interactivePresentationState; // @synthesize interactivePresentationState=_interactivePresentationState;
@property(nonatomic) _Bool navigationControllerPanGestureEnabled; // @synthesize navigationControllerPanGestureEnabled=_navigationControllerPanGestureEnabled;
@property(nonatomic) unsigned long long launchMethod; // @synthesize launchMethod=_launchMethod;
@property(nonatomic) long long prefersStatusBarStyle; // @synthesize prefersStatusBarStyle=_prefersStatusBarStyle;
@property(nonatomic) _Bool userWebInteractionEnabled; // @synthesize userWebInteractionEnabled=_userWebInteractionEnabled;
@property(nonatomic) _Bool prefersNavigationBarHidden; // @synthesize prefersNavigationBarHidden=_prefersNavigationBarHidden;
@property(nonatomic) _Bool shouldHideToolbarWhenViewAppear; // @synthesize shouldHideToolbarWhenViewAppear=_shouldHideToolbarWhenViewAppear;
@property(nonatomic) unsigned long long browserHeaderStyle; // @synthesize browserHeaderStyle=_browserHeaderStyle;
@property(nonatomic) _Bool showBarButtons; // @synthesize showBarButtons=_showBarButtons;
@property(nonatomic, getter=hasShownTopRoundCorners) _Bool shouldShowTopRoundCorners; // @synthesize shouldShowTopRoundCorners=_shouldShowTopRoundCorners;
@property(nonatomic, getter=isFullscreenExperienceEnabled) _Bool fullscreenExperienceEnabled; // @synthesize fullscreenExperienceEnabled=_fullscreenExperienceEnabled;
@property(retain, nonatomic) NSURL *initialURL; // @synthesize initialURL=_initialURL;
@property(nonatomic) __weak id <IGBrowserViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) IGBrowserSession *browserSession; // @synthesize browserSession=_browserSession;
- (void)navigationController:(id)arg1 didNavigateToViewController:(id)arg2 animated:(_Bool)arg3;
- (void)navigationController:(id)arg1 willNavigateToViewController:(id)arg2 animated:(_Bool)arg3;
- (void)navigationController:(id)arg1 didPopViewController:(id)arg2 animated:(_Bool)arg3;
- (void)browserHistoryViewController:(id)arg1 didSelectLinkInfo:(id)arg2 url:(id)arg3;
- (void)_handleApplicationWillTerminateNotification:(id)arg1;
- (void)_handleApplicationDidReceiveMemoryWarningNotification:(id)arg1;
- (void)_setupUserActivity;
- (void)updateUserActivityState:(id)arg1;
- (void)_logRatingsAndReviewsBannerEventType:(unsigned long long)arg1 ratingsAndReviewsInfo:(id)arg2;
- (void)_setUpLoggingContextIfNeeded;
- (id)_trackingCodesFromPCMController;
- (void)_loggingCoordinatorReceivedEvent:(id)arg1;
- (void)_presentRatingsAndReviewsBottomSheetWithRatingsAndReviewsInfo:(id)arg1;
- (void)_markBrowserViewableIfNecessary;
- (void)_markBrowserNonViewableWithVersion:(unsigned long long)arg1;
- (void)_initializeHeaderContent;
- (void)_willCloseBrowser:(unsigned long long)arg1 animated:(_Bool)arg2 dismissCompletion:(CDUnknownBlockType)arg3;
- (void)_preverseBrowserInstanceIfEligible;
- (void)_pauseAllAudioPlayingInThePageIfAny;
- (void)_loadBrowser;
- (void)_closeBrowser;
- (void)_hasOpenedBrowser;
- (void)_maybeDisplayURLWarning:(id)arg1;
- (_Bool)canRespondToGesture:(id)arg1;
- (void)_showLinkHistory;
- (void)_showSendInDirectSheet;
- (void)showShareSheet;
- (void)_goBack;
- (void)_goForward;
- (void)browserChromeViewController:(id)arg1 didTapRatingsAndReviewsBannerWithInfo:(id)arg2;
- (void)browserChromeViewController:(id)arg1 didShowRatingsAndReviewsBannerWithInfo:(id)arg2;
- (void)browserChromeViewController:(id)arg1 didHideRatingsAndReviewsBannerWithInfo:(id)arg2;
- (void)browserChromeViewController:(id)arg1 didTapWebViewToolbarButtonWithType:(unsigned long long)arg2;
- (void)browserChromeViewController:(id)arg1 didTapTitleBarButtonWithType:(unsigned long long)arg2;
- (id)browserStartInitializationTime;
- (void)webViewControllerWillDismiss:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)webViewController:(id)arg1 didRetryLoadRequest:(id)arg2;
- (void)webViewController:(id)arg1 didFailNavigationRequest:(id)arg2 withError:(id)arg3;
- (void)webViewController:(id)arg1 didCommitNavigationRequestWithWebview:(id)arg2 forInitialNavigation:(_Bool)arg3;
- (void)webViewController:(id)arg1 didFinishNavigationRequestWithWebview:(id)arg2;
- (void)_configureTitleBarContentWithWebView:(id)arg1;
- (void)webViewController:(id)arg1 URLChanged:(id)arg2;
- (void)webViewController:(id)arg1 titleChanged:(id)arg2;
- (void)webViewController:(id)arg1 progressChanged:(double)arg2;
- (void)webViewController:(id)arg1 didStartNavigationRequest:(id)arg2;
- (id)analyticsModuleUri;
@property(nonatomic) _Bool headerBottomSeparatorHidden;
- (void)hideToolBar;
- (void)presentToolBar;
@property(readonly, nonatomic) NSArray *organicRedirectChain;
- (void)presentBrowserSettings;
- (void)reloadWebViewWithRefreshType:(unsigned long long)arg1;
- (void)showStatusBarPaddingView:(_Bool)arg1;
- (void)recordBrowserDismissMethod:(unsigned long long)arg1;
- (void)recordBrowserStartInitializationTime:(id)arg1;
- (id)titleView;
- (void)viewDidLayoutSubviews;
- (long long)preferredTabBarBehavior;
- (long long)statusBarStyle;
- (_Bool)prefersStatusBarHidden;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (id)initWithBrowserSession:(id)arg1 launchMethod:(unsigned long long)arg2;
- (id)initWithBrowserSession:(id)arg1;
- (id)initWithURLRequest:(id)arg1 userSession:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

