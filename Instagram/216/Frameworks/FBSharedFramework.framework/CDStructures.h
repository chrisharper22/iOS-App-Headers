//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Mar 27 2019 15:10:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class AVAssetReader, AVAssetTrack, BKContext, CKScopedResponder, FBMPVideoData, IGHTTPCacheUsagePolicy, IGNetworkContainerCacheMetadata, IGRequestPrioritizationStrategy, IGUserSession, MISSING_TYPE, NSArray, NSAttributedString, NSDictionary, NSError, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSObject, NSSet, NSString, NSURL, UIColor, UIImage;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AQBufferParameters {
    unsigned int bufferSize;
    unsigned int packetCount;
};

struct AQBufferState {
    struct AudioQueueBuffer *bufferRef;
    struct AudioTimeStamp timestamp;
    _Bool enqueued;
    double displayFramePts;
};

struct ARClassContext;

struct ARDWriteThroughShaderAssetProvider;

struct AREngineLogger;

struct ARNetworkDomainWhitelist;

struct ARPointTrackable {
    CDUnknownFunctionPointerType *_field1;
    struct Matrix<float, 4, 4, 0, 4, 4> _field2;
    struct uuid _field3;
    struct shared_timed_mutex _field4;
    _Bool _field5;
};

struct AlphaMatteDescriptor;

struct Analytics;

struct AudioBuffer {
    unsigned int mNumberChannels;
    unsigned int mDataByteSize;
    void *mData;
};

struct AudioConverterInputData {
    unsigned long long offset;
    struct vector<std::vector<char>, std::allocator<std::vector<char>>> bytes;
};

struct AudioPlatformComponentHostImpl;

struct AudioPostProcessor;

struct AudioQueueBuffer;

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct AudioStreamPacketDescription;

struct AudioTimeStamp {
    double mSampleTime;
    unsigned long long mHostTime;
    double mRateScalar;
    unsigned long long mWordClockTime;
    struct SMPTETime mSMPTETime;
    unsigned int mFlags;
    unsigned int mReserved;
};

struct AutoreleaseLoopCallback;

struct BKGraphQLBloksContextInput {
    NSString *bloksVersion;
    NSString *styledId;
    NSString *ttrcJoinId;
};

struct BKLispyEnvironment {
    struct shared_ptr<const std::vector<NSString *>> keyPath;
    NSDictionary *variablesOverride;
    NSDictionary *manifestEntriesOverride;
    NSDictionary *embeddedPayloads;
    NSMutableDictionary *variableLog;
    BKContext *bkContext_DO_NOT_ADD_NEW_CALLSITE_OR_YOUR_SIGNATURE_WILL_BREAK_SOON;
    NSString *loggingId;
};

struct BKProcessManifestResult {
    id _field1;
    id _field2;
};

struct BKQueuedTreeModification;

struct BKTreeManagerTargetKey {
    int _field1;
    CDUnknownFunctionPointerType _field2;
};

struct BKTreeManagerTargetModel {
    int _field1;
    id _field2;
};

struct BackButtonTappedEventNoBuilder {
    Optional_381dc36e _field1;
    id _field2;
    id _field3;
    struct Required<NSString *> _field4;
    struct Optional<double> _field5;
    struct Optional<double> _field6;
    id _field7;
    id _field8;
    struct Optional<bool> _field9;
    id _field10;
    struct Optional<double> _field11;
    struct Required<NSString *> _field12;
    struct Required<NSString *> _field13;
};

struct BandwidthEstimate {
    long long ttfbMs;
    long long ttfbWeight;
    long long ttfbStdDev;
    long long inboundBitrateBitsPerSec;
    long long inboundBitrateWeight;
    long long inboundBitrateStdDev;
    _Bool isServerBwe;
    _Bool isServerTtfb;
};

struct BandwidthEstimator;

struct BasePluginConfiguration;

struct BlendFunc {
    _Bool blendEnabled;
    unsigned char rgbBlendOp;
    unsigned char alphaBlendOp;
    unsigned char srcRGBBlendFactor;
    unsigned char srcAlphaBlendFactor;
    unsigned char dstRGBBlendFactor;
    unsigned char dstAlphaBlendFactor;
};

struct BlendMode {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
};

struct BlockHead;

struct BridgeOutput {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    _Bool _field6;
    CDUnknownBlockType _field7;
    CDUnknownBlockType _field8;
    CDUnknownBlockType _field9;
    _Bool _field10;
};

struct BufferDesc {
    void *data;
    unsigned long long length;
    int storage;
    unsigned char type;
};

struct BufferPool;

struct CATransform3D {
    double m11;
    double m12;
    double m13;
    double m14;
    double m21;
    double m22;
    double m23;
    double m24;
    double m31;
    double m32;
    double m33;
    double m34;
    double m41;
    double m42;
    double m43;
    double m44;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct CKAction<> {
    id _target;
    struct ScopedResponderAndKey _scopedResponderAndKey;
    CDUnknownBlockType _block;
    int _variant;
    void *_selectorOrIdentifier;
};

struct CKComponentAnimation;

struct CKComponentBoundsAnimation {
    double _field1;
    double _field2;
    long long _field3;
    unsigned long long _field4;
    id _field5;
    double _field6;
    double _field7;
    CDUnknownBlockType _field8;
};

struct CKComponentContextStackItem;

struct CKComponentFinalUnmountAnimation;

struct CKComponentViewContext {
    id _field1;
    struct CGRect _field2;
};

struct CKDescendantTreeNodeKeyPosition {
    unsigned long long _field1;
};

struct CKDescendantTreeNodeKeyToNode;

struct CKMountInfo {
    id _field1;
    id _field2;
    struct CKComponentViewContext _field3;
};

struct CKSizeRange {
    struct CGSize min;
    struct CGSize max;
};

struct CKTreeNodeKey {
    char *componentTypeName;
    id identifier;
    struct vector<id<NSObject>, std::allocator<id<NSObject>>> keys;
};

struct CKViewConfiguration {
    struct shared_ptr<const CKViewConfiguration::Repr> rep;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct CMSampleBufferSmartPtr {
    struct opaqueCMSampleBuffer *_ptr;
};

struct Callback<void, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass> {
    CDUnknownFunctionPointerType *_vptr$Callback;
    void *callbackFunction;
};

struct Callback<void, __CVBuffer *, std::shared_ptr<Ocean::AnyCameraT<float>>, double, double, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass> {
    CDUnknownFunctionPointerType *_vptr$Callback;
    void *callbackFunction;
};

struct CallbackInfo {
    void *_field1;
    struct _opaque_pthread_t *_field2;
    void *_field3;
    void *_field4;
    void *_field5;
    void *_field6;
    void *_field7;
    _Bool _field8;
    _Bool _field9;
    int _field10;
};

struct CapabilityMinVersionModel;

struct CaptureCompletionContext;

struct CaptureEventInput;

struct CaptureEventService;

struct CertificatePinner;

struct CobTimeouts;

struct CompletionPayload {
    id _field1;
    id _field2;
    id _field3;
};

struct Context;

struct ConvertInfo {
    int _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    struct vector<int, std::__1::allocator<int>> _field6;
    struct vector<int, std::__1::allocator<int>> _field7;
};

struct CornerRadii {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct DFDataObservableWithFetchPurpose {
    id _field1;
    long long _field2;
};

struct DenseStorage<float, 16, 4, 4, 0> {
    struct plain_array<float, 16, 0, 16> _field1;
};

struct DepthMapData {
    struct shared_ptr<std::vector<float>> data;
    struct shared_ptr<std::vector<unsigned char>> confidence;
    unsigned long long width;
    unsigned long long height;
};

struct DestructionGuardAdapter;

struct Device;

struct Dictionary<CK::Component::ViewKey, CK::Component::ViewReusePool> {
    struct vector<std::pair<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::allocator<std::pair<CK::Component::ViewKey, CK::Component::ViewReusePool>>> _elements;
};

struct Document;

struct DocumentEventsSubscribable;

struct Drawable;

struct DynamicVertexData;

struct EffectAnalyticsInfo {
    struct EffectSessionAnalyticsInfo _field1;
    basic_string_0ec669f3 _field2;
    unsigned char _field3;
};

struct EffectAssetLoader;

struct EffectAssetModel {
    basic_string_0ec669f3 _field1;
    basic_string_0ec669f3 _field2;
    basic_string_0ec669f3 _field3;
    basic_string_0ec669f3 _field4;
    basic_string_0ec669f3 _field5;
    unsigned long long _field6;
    int _field7;
    int _field8;
    _Bool _field9;
    struct vector<arfx::delivery::EffectAsyncAsset, std::allocator<arfx::delivery::EffectAsyncAsset>> _field10;
    struct EffectShaderPack _field11;
};

struct EffectAsyncAsset;

struct EffectAttribution;

struct EffectController;

struct EffectDataSnapshot;

struct EffectModel {
    basic_string_0ec669f3 _field1;
    basic_string_0ec669f3 _field2;
    struct EffectAssetModel _field3;
    struct vector<arfx::delivery::CapabilityMinVersionModel, std::allocator<arfx::delivery::CapabilityMinVersionModel>> _field4;
    basic_string_0ec669f3 _field5;
};

struct EffectSafeAreaInsets {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct EffectSessionAnalyticsInfo {
    basic_string_0ec669f3 _field1;
    basic_string_0ec669f3 _field2;
    basic_string_0ec669f3 _field3;
    basic_string_0ec669f3 _field4;
    basic_string_0ec669f3 _field5;
};

struct EffectShaderPack {
    basic_string_0ec669f3 _field1;
    struct Optional<arfx::delivery::EffectShaderPackMetadata> _field2;
};

struct EffectShaderPackMetadata {
    basic_string_0ec669f3 _field1;
    basic_string_0ec669f3 _field2;
    basic_string_0ec669f3 _field3;
    int _field4;
};

struct Either<NSError *, id<FBMPData>> {
    id _field1;
    id _field2;
    _Bool _field3;
};

struct EncodedObjectRecord;

struct EngineDebugConfiguration {
    _Bool displayHandLandmarks;
    int panelSetup;
    _Bool displayFaceLandmarks;
    _Bool displayIrisLandmarks;
    _Bool displayFaceWireframes;
    _Bool enableGpuTimer;
    _Bool enableProfiler;
    _Bool forceNoMsaa;
    unsigned int verbosityFlags;
    _Bool canEnableDebugManipulators;
};

struct EstimationStrategy;

struct EvaluationResult {
    id _field1;
    double _field2;
    long long _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    long long _field7;
    basic_string_0ec669f3 _field8;
    basic_string_0ec669f3 _field9;
    basic_string_0ec669f3 _field10;
    struct set<stitchConstraintManager::ConstraintReason, std::less<stitchConstraintManager::ConstraintReason>, std::allocator<stitchConstraintManager::ConstraintReason>> _field11;
    double _field12;
    basic_string_0ec669f3 _field13;
};

struct EventBase {
    CDUnknownFunctionPointerType *_vptr$TimeoutManager;
    struct unique_ptr<folly::TimeoutManager::CobTimeouts, std::default_delete<folly::TimeoutManager::CobTimeouts>> cobTimeouts_;
    CDUnknownFunctionPointerType *_vptr$DrivableExecutor;
    CDUnknownFunctionPointerType *_vptr$IOExecutor;
    CDUnknownFunctionPointerType *_vptr$SequencedExecutor;
    CDUnknownFunctionPointerType *_vptr$ScheduledExecutor;
    duration_15f873c1 intervalDuration_;
    struct unique_ptr<folly::HHWheelTimerBase<std::chrono::milliseconds>, folly::DelayedDestruction::Destructor> wheelTimer_;
    struct list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> loopCallbacks_;
    struct list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> runBeforeLoopCallbacks_;
    struct Synchronized<boost::intrusive::list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>>, folly::SharedMutexImpl<false>> onDestructionCallbacks_;
    void *runOnceCallbacks_;
    struct atomic<bool> stop_;
    struct atomic<std::__thread_id> loopThread_;
    struct unique_ptr<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>, std::default_delete<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>>> queue_;
    long long loopKeepAliveCount_;
    struct atomic<long> loopKeepAliveCountAtomic_;
    _Bool loopKeepAliveActive_;
    struct duration<long long, std::ratio<1, 1000000>> maxLatency_;
    struct SmoothLoopTime avgLoopTime_;
    struct SmoothLoopTime maxLatencyLoopTime_;
    _Bool dampenMaxLatency_;
    struct Function<void ()> maxLatencyCob_;
    _Bool enableTimeMeasurement_;
    unsigned long long nextLoopCnt_;
    unsigned long long latestLoopCnt_;
    struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> startWork_;
    _Bool invokingLoop_;
    struct shared_ptr<folly::EventBaseObserver> observer_;
    unsigned int observerSampleCount_;
    struct ExecutionObserver *executionObserver_;
    basic_string_0ec669f3 name_;
    struct unordered_map<unsigned long, std::unique_ptr<void, void (*)(void *)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::unique_ptr<void, void (*)(void *)>>>> localStorage_;
    struct Synchronized<std::unordered_set<folly::detail::EventBaseLocalBase *>, folly::SharedMutexImpl<false>> localStorageToDtor_;
    struct basic_once_flag<folly::SharedMutexImpl<false>, std::atomic> virtualEventBaseInitFlag_;
    struct unique_ptr<folly::VirtualEventBase, std::default_delete<folly::VirtualEventBase>> virtualEventBase_;
    struct unique_ptr<folly::EventBaseBackendBase, std::default_delete<folly::EventBaseBackendBase>> evb_;
};

struct EventBaseBackendBase;

struct EventBaseObserver;

struct ExecutionObserver;

struct F14ValueMap<folly::Range<const char *>, std::string, folly::HeterogeneousAccessHash<folly::Range<const char *>>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, std::allocator<std::pair<const folly::Range<const char *>, std::string>>> {
    struct __hash_table<std::__hash_value_type<folly::Range<const char *>, std::string>, std::__unordered_map_hasher<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, true>, std::__unordered_map_equal<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, true>, std::allocator<std::__hash_value_type<folly::Range<const char *>, std::string>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct FBARCaptureEventServiceCameraInfo {
    unsigned char _field1;
    unsigned char _field2;
    float _field3;
    float _field4;
    struct PixelSize _field5;
    struct EffectSafeAreaInsets _field6;
};

struct FBAREngineRenderOptions {
    float fieldOfViewRadians;
};

struct FBAnalyticsEnvironmentFunctions {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    struct FBAnalyticsSamplingProviderFunctions _field6;
    struct FBAnalyticsSamplingProviderFunctions _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
};

struct FBAnalyticsExperimentValues {
    NSSet *topLevelEventBlockList;
    _Bool bufferEventsDuringStartup;
    _Bool disableLogging;
    _Bool enableSampling;
    _Bool enableMultiUserSamplingStore;
    _Bool flipDefaultSamplingRateToZero;
    _Bool checkForEventThrottling;
    _Bool throttleEvent;
    long long throttleEventRate;
    NSSet *doNotThrottleEventsList;
    _Bool shouldLogThrottledError;
    _Bool shouldSendBeacon;
    long long beaconSendInterval;
    _Bool isExternalBuild;
    _Bool useMultiBatch;
    long long maxNumberOfEventsInBatch;
    long long maxNumberOfEventsInMultiBatch;
    long long maxByteSizeOfMultiBatch;
    double defaultRegularEventRequestedLatency;
    double defaultRealtimeEventRequestedLatency;
    NSDictionary *realtimeEventLatencyOverrides;
    NSDictionary *nonRealtimeEventLatencyOverrides;
    NSSet *regularDefaultLatencyExemptList;
    NSSet *realtimeDefaultLatencyExemptList;
    unsigned long long storeOptions;
    _Bool enableUnifiedEventStoreBasedBatching;
    long long eventExpiryIntervalInDays;
    long long maxNumberOfEventsBeforePurge;
    long long minNumberOfEventsAfterPurge;
    long long maxNumberOfUploadsBeforePurge;
    long long minNumberOfUploadsAfterPurge;
    _Bool dispatchNetworkRequestsOnMainQueue;
    _Bool attributeIdentitiesToEventsDuringStartup;
    _Bool beginSessionOnAppForeground;
    _Bool beginSessionOnlyOnUserSwitch;
    _Bool performFlushOnAppBackground;
    long long safeCopyFunction;
    _Bool pauseAnalyticsOnBackground;
    _Bool delayAnalyticsQueueOnHighVolume;
    _Bool disableAppLifecycleCallbacksAtUserSessionScope;
    _Bool enableLegacyMigration;
    _Bool enableProdHealthCounters;
    _Bool uploadOldestEventsFirst;
    _Bool useSyncPlugin;
    _Bool captureEventsInBackground;
    _Bool handleAppStateChangeInBackground;
    _Bool enableHighPriorityAnalyticsQueue;
    _Bool immediatelyResumeFBanalyticsAfterStartup;
    _Bool enableIdentityScopedAnalytics;
    _Bool enableOptimizedUploadBackOffTimer;
    _Bool enableBlockCopyInPersistentStore;
    NSSet *lsLegacyEvents;
    _Bool enableRoutingLSLegacyEvents;
    _Bool enableDeepCopyDuringStartup;
    _Bool enableIdToNameMappingInFBAnalytics;
};

struct FBAnalyticsGetSamplingConfigFunctions {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
};

struct FBAnalyticsLoggingPolicies {
    id analyticsLoggingPolicy;
};

struct FBAnalyticsPrivacyContext {
    void *localExperimentalPrivacyContext;
    NSString *localExperimentalPrivacyContextType;
    NSDictionary *experimentalPrivacyContext;
    NSNumber *ipfProduct;
};

struct FBAnalyticsRequestContext {
    unsigned long long _field1;
    struct FBStructuredLogUploadMetadata _field2;
    id _field3;
    id _field4;
};

struct FBAnalyticsRequestHandlers {
    CDUnknownBlockType _field1;
    CDUnknownBlockType _field2;
    CDUnknownBlockType _field3;
    CDUnknownBlockType _field4;
};

struct FBAnalyticsSamplingProviderFunctions {
    CDUnknownFunctionPointerType _field1;
    struct FBAnalyticsGetSamplingConfigFunctions _field2;
    CDUnknownFunctionPointerType _field3;
};

struct FBAnalyticsSamplingResult {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct FBAnalyticsSerializedIdentities {
    NSString *appIdentity;
    NSString *deviceIdentity;
    NSString *userIdentity;
};

struct FBAnimationPerformanceTrackerConfiguration {
    long long maximumNumberOfFrameDrops;
    long long numberOfFrameDropsPerSmallDropEvent;
    long long numberOfFrameDropsPerLargeDropEvent;
    double durationOfSmallFrameEvent;
    double durationOfLargeFrameEvent;
    double maximumNumberOfFrameEvents;
    double maximumNumberOfSmallFrameEvents;
    double maximumNumberOfLargeFrameEvents;
    double maximumDuration;
};

struct FBAnimationPerformanceTrackingResult {
    _Bool _field1;
    long long _field2;
    double _field3;
    unsigned long long _field4;
    double _field5;
    unsigned long long _field6;
    double _field7;
    double _field8;
    long long _field9;
};

struct FBBGRAtoYUVConverterFilterUniformData {
    CDStruct_14d5dc5e contentTransform;
    CDStruct_14d5dc5e texCoordTransform;
};

struct FBBracketedCaptureConfiguration {
    NSArray *exposureValues;
    CDUnknownFunctionPointerType resolverFunction;
    _Bool enabled;
    _Bool autoEnhanceEnabled;
    unsigned long long downsampleWidth;
};

struct FBCCUpdateBundle {
    id _field1;
    id _field2;
};

struct FBCacheGraphQLSummary {
    double _field1;
    double _field2;
    double _field3;
    _Bool _field4;
};

struct FBCameraConfiguration {
    _Bool shouldFrontCameraVideoMirrored;
    long long startingDevicePosition;
    long long initialFlashMode;
    NSString *initialSessionPreset;
    _Bool isSingleConfigurationAVCaptureSessionStart;
    unsigned char initialTargetFPS;
    _Bool audioCaptureIgnoreRTCClientNotification;
    _Bool automaticallyConfiguresApplicationAudioSession;
    _Bool canPreConfigureAudioSession;
    _Bool shouldRemoveInputsAndOutputsWhenStopped;
    _Bool enableEchoCancellation;
    _Bool videoBufferTransformEnabled;
    long long videoStabilizationMode;
    _Bool setVideoStabilizationModeAfterStart;
    _Bool subjectAreaChangeMonitoring;
    float lowLightDetectionThreshold;
    float lowLightExposureBias;
    struct FBBracketedCaptureConfiguration bracketedCaptureConfiguration;
    double maxZoomFactor;
    _Bool keepAudioSessionActiveDuringCameraSession;
    _Bool markAVWriterInputsAsFinishedWhenRecordingStops;
    CDUnknownBlockType disableARKitCacheBlock;
    struct CGSize preferredWorldTrackingResolution;
    _Bool planeDetectionEnabled;
    _Bool produceWorldTrackingFrames;
    _Bool worldTrackingAlignmentGravity;
    _Bool lowLightDetectorEnabled;
    _Bool flashSceneDetectorEnabled;
    _Bool audioCaptureEnabled;
    NSArray *preferredCaptureDeviceTypes;
    NSArray *captureDevices;
    unsigned int photoPixelFormat;
    struct FBCaptureAutoExposureConfiguration autoExposureConfiguration;
    struct FBCapturePOIDetectorConfiguration detectorConfiguration;
    _Bool fbAudioEnabled;
    NSArray *photoCapturePlugins;
    _Bool useFBMultiCaptureManager;
    _Bool enableMultiCapture;
    struct CGSize customizedCapturedPhotoResolution;
    struct FBPhotoCaptureConfiguration photoCaptureConfiguration;
    _Bool enableSceneDepth;
    _Bool livePhotoEnabled;
    _Bool includeTrackingDataInVideoData;
    struct FBCameraSimulationConfiguration cameraSimulationConfiguration;
    _Bool stereoEnabled;
};

struct FBCameraSimulationConfiguration {
    CDUnknownBlockType videoFilePathProvider;
    CDUnknownBlockType imageFilePathProvider;
};

struct FBCaptureAutoExposureConfiguration {
    _Bool enableAutoExposureOnTrackedObjects;
    _Bool trackVisibleFaces;
    _Bool trackVisibleBodies;
    _Bool trackVisibleCats;
    _Bool trackVisibleDogs;
    _Bool trackQRCodes;
};

struct FBCaptureCoordinatorConfiguration {
    struct FBCameraConfiguration cameraConfiguration;
    struct FBRendererConfiguration rendererConfiguration;
    struct FBPreviewConfiguration previewConfiguration;
    struct FBGestureConfiguration gestureConfiguration;
    unsigned long long requiredCameraCapabilities;
    unsigned long long imageResolutionSetting;
    double videoBitratePerPixel;
    _Bool optimizePreviewForScreen;
    _Bool warmupARKit;
    _Bool enableHDRVideoRecordingIfPossible;
    _Bool disableCameraPreviewViewAspectRatioMatching;
};

struct FBCapturePOIDetectorConfiguration {
    long long detectorType;
    double executionTimeInterval;
    double minimumBoundsChange;
    _Bool drawDebugBounds;
};

struct FBCaptureSessionConfig {
    _Bool _field1;
    id _field2;
};

struct FBConsistencySyncGraphQLSummary {
    double _field1;
    double _field2;
};

struct FBFramePerformanceResult {
    double _field1;
    double _field2;
    double _field3;
    long long _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
};

struct FBFramePerformanceTrackerConfig {
    long long singleFrameDropEventFrameNumber;
    long long twoConsecFrameDropEventFrameNumber;
    long long fourConsecFrameDropEventFrameNumber;
    long long eightConsecFrameDropEventFrameNumber;
    long long maxFrameDropAccount;
    long long initialTrackedFrame;
};

struct FBGestureConfiguration {
    _Bool failGatingForConsumedTapGestureData;
};

struct FBGraphQLAdaptiveSummary {
    _Bool _field1;
    id _field2;
};

struct FBGraphQLRequestSummary {
    id _field1;
    int _field2;
    int _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    int _field10;
    long long _field11;
};

struct FBIGLActivations {
    _Bool metalEnabled;
    _Bool surfaceEnabled;
    _Bool imageFilterEnabled;
    _Bool imageOverlayFilterEnabled;
    _Bool dynamicImageOverlayFilterEnabled;
    _Bool bgraToYUVConverterFilterEnabled;
    _Bool doodleDrawingFilterEnabled;
};

struct FBImageCreateWithDataExperimentsConfig {
    _Bool enabled;
    _Bool skipsAllMetadata;
    _Bool skipsXMPMetadata;
    _Bool usesLibJPEG;
};

struct FBImageFilterUniformData {
    CDStruct_14d5dc5e contentTransform;
    CDStruct_14d5dc5e texCoordTransform;
    float isInputYUV;
    CDStruct_14d5dc5e colorConversionMatrix;
};

struct FBLoomConfigurationManager;

struct FBLoomOrchestrator;

struct FBLoomTraceControlling;

struct FBMPCDecodingObjectContext;

struct FBMPCEncodingObjectContext {
    struct vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord>> _encodedObjects;
};

struct FBMPCameraInfoInputConfiguration {
    _Bool replayOnPortConnect;
};

struct FBMPDataCapturerCompletionContext {
    NSObject *callbackQueue;
    CDUnknownBlockType block;
};

struct FBMPDataMetadata {
    unsigned long long index;
    unsigned long long uniqueId;
    _Bool forCapture;
    _Bool forPeer;
    _Bool forPreview;
    _Bool forOverlay;
    _Bool forCaptureOnly;
};

struct FBMPRawTouchSnapshot {
    struct CGPoint _field1;
    long long _field2;
};

struct FBMPSessionConfig {
    _Bool trackPerformance;
    _Bool batchPostOperationPortBlocks;
    struct FBIGLActivations iglActivations;
};

struct FBMPVideoClipRecorderVideoSize {
    unsigned int _field1;
    unsigned int _field2;
};

struct FBMPVideoRecorderConfiguration {
    double bitratePerPixel;
    double aspectRatioOfVideoNaturalSize;
    long long rotationDegrees;
    _Bool shouldMirrorVideo;
    _Bool optimizeVideoSizeForCompression;
    _Bool markAVWriterInputsAsFinishedWhenRecordingStops;
    _Bool isVideoHDREnabled;
};

struct FBMQTTChannelConnectEventObserver;

struct FBMQTTChannelConnectionStateObserver;

struct FBMQTTChannelEventLogger;

struct FBMQTTChannelPublishEventObserver;

struct FBMQTTChannelSubscribeEventObserver;

struct FBMediaItemUploadFlowSessionOptions {
    _Bool resumeUploadFromCacheEnabled;
    _Bool fastStartRequestEnabled;
    _Bool cacheCleanupEnabled;
};

struct FBMediaTranscodingKitVideoAssetExportParams {
    AVAssetReader *assetReader;
    AVAssetTrack *audioTrack;
    AVAssetTrack *videoTrack;
    id audioOutput;
    id videoOutput;
    id assetWriter;
    id audioInput;
    id videoInput;
    NSURL *outputURL;
    NSDictionary *sourcePixelBufferAttributes;
};

struct FBMobileConfigContextV2;

struct FBMobileConfigManager;

struct FBMobileConfigManagerChangeListenerWrapper;

struct FBMobileConfigOverridesTable;

struct FBMobileConfigValueStore;

struct FBNSStringCache {
    struct FBNSStringCacheItem *items;
    unsigned int prng_lfsr;
    unsigned char age[1024];
};

struct FBNSStringCacheItem;

struct FBNewCaptureCoordinatorConfiguration {
    struct FBCaptureCoordinatorConfiguration preCaptureConfiguration;
    struct FBPostCaptureCoordinatorConfiguration postCaptureConfiguration;
};

struct FBPayAccessibilityDataModel {
    NSString *label;
    unsigned long long trait;
    NSString *hintText;
};

struct FBPayFormCellConfiguration {
    long long rightAccessoryType;
    long long keyboardType;
    _Bool shouldHighlightBorder;
    _Bool shouldFilterNumeric;
    _Bool shouldTrimLeadingZeros;
    _Bool shouldTrimSurroundingSpaces;
    struct FBPayFormFieldAccessibilityDataModels accessibilityDataModels;
};

struct FBPayFormFieldAccessibilityDataModels {
    struct FBPayAccessibilityDataModel neutralModel;
    struct FBPayAccessibilityDataModel emptyErrorModel;
    struct FBPayAccessibilityDataModel invalidErrorModel;
};

struct FBPhotoCaptureConfiguration {
    _Bool stillImageCaptureEnabled;
    _Bool isFlipFrontCameraOutputEnabled;
    _Bool stopLivePreviewOnPhotoCapture;
    _Bool delayImageCaptureWhileAdjustingCamera;
    _Bool setFlashModeWithCapturePhotoOutputApiEnabled;
    _Bool setFlashModeOnPhotoSettingsForSceneMonitoring;
};

struct FBPostCaptureCoordinatorConfiguration {
    struct FBRendererConfiguration rendererConfiguration;
    _Bool needsPreview;
    NSString *previewContentsGravity;
};

struct FBPreviewConfiguration {
    _Bool isInitialPreviewModeAVCaptureVideoPreviewLayer;
    NSString *contentsGravity;
    struct CGRect previewCropRect;
    _Bool disableDefaultPreview;
};

struct FBQPLLoggingPolicyConfig;

struct FBQualityEstimate {
    double _field1;
    _Bool _field2;
    float _field3;
    unsigned long long _field4;
};

struct FBRendererConfiguration {
    _Bool skipRenderingUntilAllFiltersPrepared;
    _Bool flushTextureCacheOnEveryFrame;
    _Bool multipleOutputsEnabled;
    _Bool overlayOutputEnabled;
    _Bool batchPostConnectionOperations;
    _Bool iglSurfaceEnabled;
    _Bool iglImageFilterEnabled;
    _Bool iglImageOverlayFilterEnabled;
    _Bool iglDoodleDrawingFilterEnabled;
    int renderingType;
    _Bool cropAspectFitUsingPreviewAspectRatio;
    _Bool output16Bit;
    _Bool copiesServiceHostOnExport;
};

struct FBSSLKeyMaterialListenerAbstractLogger;

struct FBStructuredLogBatchMetadata {
    double batchedTimestamp;
    unsigned long long numberOfEventsInBatch;
    unsigned long long batchByteSize;
    double minimumLatencyInBatch;
    NSMutableArray *eventsStoreRowIds;
    struct FBAnalyticsSerializedIdentities serializedIdentities;
    NSMutableArray *eventsInBatch;
};

struct FBStructuredLogEventConfig {
    id _field1;
    id _field2;
    unsigned long long _field3;
    double _field4;
    double _field5;
    _Bool _field6;
    struct FBAnalyticsSerializedIdentities _field7;
    struct PrivacyContext _field8;
};

struct FBStructuredLogEventMetadata {
    NSString *subEventName;
    NSString *module;
    double timestamp;
    double requestedLatency;
    unsigned long long eventTag;
    unsigned long long appliedSampleRate;
    unsigned long long eventByteSize;
    long long eventStoreRowId;
    _Bool loggedDuringStartup;
    struct FBAnalyticsSerializedIdentities serializedIdentities;
    struct FBAnalyticsPrivacyContext privacyContext;
};

struct FBStructuredLogUploadMetadata {
    double batchedTimestamp;
    _Bool isMultiBatch;
    unsigned long long numberOfEventsInUpload;
    unsigned long long numberOfBatchesInUpload;
    unsigned long long uploadByteSize;
    unsigned long long retryCount;
    double minimumLatencyInUpload;
    unsigned long long uploadStatus;
    long long uploadStoreRowId;
    NSMutableArray *eventsInUpload;
};

struct FBTree {
    struct shared_ptr<facebook::mobile::graphstore::detail::FBTreeImpl> _impl;
};

struct FBTreeImpl;

struct FBVideoCaptionParserOptions {
    _Bool _field1;
};

struct FBVideoItemUploadFlowProcessOptions {
    double ssimComputeDurationPerSegment;
    _Bool logTranscodeTraceInfo;
    _Bool resumeTranscoderOnForeground;
    _Bool streamingUpload;
    _Bool trackVideoTrimMismatch;
    _Bool trackVideoMuteMismatch;
    _Bool supportCloudMediaFetching;
    _Bool isH264BaselineProfile;
    _Bool fixAvCompositionFileSize;
    _Bool canUploadHDR;
    _Bool enableAudioTrimAlarmFix;
};

struct FBVideoSegmentedResult {
    _Bool copiedAllSampleBuffers;
    _Bool failed;
    _Bool canceled;
    CDStruct_1b6d18a9 startPresentationTime;
    CDStruct_1b6d18a9 finishPresentationTime;
    NSMutableArray *timeStamps;
};

struct FBViewpointManagerConfig {
    _Bool _field1;
    long long _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    unsigned long long _field9;
};

struct FBWhistleConnectionStatsLogger;

struct FBXcassetsEnvironment {
    long long idiom;
    _Bool isDarkMode;
    _Bool supportsP3Color;
};

struct FNFAVSyncStatus {
    double offsetAverageSec;
    long long offsetSampleCount;
};

struct FNFAudioEngineRequestResult {
    CDStruct_1b6d18a9 _field1;
    unsigned long long _field2;
    unsigned int _field3;
    id _field4;
    struct AudioStreamPacketDescription *_field5;
};

struct FNFDashConfig {
    long long qualitySelectorPipeline[5];
    _Bool abrQualitySelectorLowerBitrateCachedChoicesEnabled;
    double abrBandwidthFraction;
    double audioIbrBandwidthFraction;
    double abrBandwidthPenaltyPerRequest;
    _Bool abrIncludeAudioBitrate;
    double abrPlayerSizeMultiplierForCell;
    double abrPlayerSizeMultiplierForWifi;
    _Bool enableAOCFix;
    _Bool enableAOCWifi;
    _Bool enableStrictAbrPlayerSize;
    int ignoreQualitySize;
    int ignoreQualitySizeForStories;
    _Bool enableAbrPlayerSizeFallback;
    _Bool enableIntentBasedWatermarks;
    int intentMinLowWatermark;
    int intentMaxLowWatermark;
    int intentWatermarkDiff;
    double intentTimeMultiplier;
    _Bool enableStitchABR;
    _Bool enableStitchABRForLive;
    _Bool enableStitchAOCMosAware;
    _Bool stitchEnableCacheOverride;
    int stitchLowBufferSeconds;
    int stitchLowQualityBitrate;
    int stitchMinFetchDuration;
    int stitchMaxFetchDuration;
    int stitchMosStickiness;
    double stitchRepBwMultiplier;
    double stitchRepBwMultiplierLowBuffer;
    double stitchRepBwMultiplierMinPlayable;
    int stitchRepMinPlayableMos;
    int stitchRepLowMosResolution;
    _Bool disableAudioSizePruning;
    _Bool disableRepetitiveAudioLogging;
    double maxRiskFactorMultiplier;
    double stitchRiskFactor;
    double stitchLowMosRiskFactor;
    double stitchVirtualBufferPercent;
    int stitchMaxLookaheadDurationMs;
    double stitchRiskAdjFactor;
    _Bool stitchEnablePrefetchAgg;
    _Bool stitchEnableStoriesAgg;
    double stitchRepBwMultiplierAgg;
    double stitchRepBwMultiplierLowBufferAgg;
    double stitchRepBwMultiplierMinPlayableAgg;
    long long stitchAudioLowQualityBitrate;
    _Bool enableAudioQualitySelectionLogging;
    _Bool enableStitchSelectorForAudio;
    long long stitchAudioOtherBitrate;
    double stitchAudioBitrateBoostFactor;
    double stitchAudioRiskFactor;
    double stitchAudioLowMosRiskFactor;
    _Bool useVideoContextInformation;
    _Bool sigmoidFractionPerBandwidthQualityEnabled;
    double sigmoidMinBandwidthEstimateForQualityUnknown;
    double sigmoidMinBandwidthEstimateForQualityPoor;
    double sigmoidMinBandwidthEstimateForQualityModerate;
    double sigmoidMinBandwidthEstimateForQualityGood;
    double sigmoidMinBandwidthEstimateForQualityExcellent;
    double sigmoidMaxBandwidthEstimateForQualityUnknown;
    double sigmoidMaxBandwidthEstimateForQualityPoor;
    double sigmoidMaxBandwidthEstimateForQualityModerate;
    double sigmoidMaxBandwidthEstimateForQualityGood;
    double sigmoidMaxBandwidthEstimateForQualityExcellent;
    double sigmoidFractionBiasForQualityUnknown;
    double sigmoidFractionGainForQualityUnknown;
    double sigmoidFractionOffsetForQualityUnknown;
    double sigmoidFractionWidthForQualityUnknown;
    double sigmoidFractionBiasForQualityPoor;
    double sigmoidFractionGainForQualityPoor;
    double sigmoidFractionOffsetForQualityPoor;
    double sigmoidFractionWidthForQualityPoor;
    double sigmoidFractionBiasForQualityModerate;
    double sigmoidFractionGainForQualityModerate;
    double sigmoidFractionOffsetForQualityModerate;
    double sigmoidFractionWidthForQualityModerate;
    double sigmoidFractionBiasForQualityGood;
    double sigmoidFractionGainForQualityGood;
    double sigmoidFractionOffsetForQualityGood;
    double sigmoidFractionWidthForQualityGood;
    double sigmoidFractionBiasForQualityExcellent;
    double sigmoidFractionGainForQualityExcellent;
    double sigmoidFractionOffsetForQualityExcellent;
    double sigmoidFractionWidthForQualityExcellent;
    _Bool abrSwitchSmoothingEnabled;
    double lowSmoothingSizeThreshold;
    long long minSamplesBeforeUpSwitchLow;
    long long minSamplesBeforeUpSwitchHigh;
    double minBufferSizeInSecondsForBufferThresholdAbr;
    _Bool enablePlayerSizePruningForBufferThresholdAbr;
    _Bool buffThreshAbrFallbackIfInvalidEnabled;
    _Bool buffThreshAbrFallbackPlaybackTimeTooHighEnabled;
    int fetchSizeInChunkCountForInitial;
    int fetchSizeLowInSecondForCell;
    int fetchSizeHighInSecondForCell;
    int fetchSizeLowInSecondForWifi;
    int fetchSizeHighInSecondForWifi;
    int fetchSizeHighThresholdInChunkCount;
    int fetchSizeHighThresholdInChunkCountForCell;
    int fetchSizePerRequestInChunkCount;
    int fetchSizeLowInSecondHighMarkForCell;
    int fetchSizeHighInSecondHighMarkForCell;
    int fetchSizeLowInSecondHighMarkForWifi;
    int fetchSizeHighInSecondHighMarkForWifi;
    int fetchSizeLowGraduallyIncreaseValue;
    double stallThresholdInSeconds;
    double initialUnstallThresholdInSecondsForExcellent;
    double initialUnstallThresholdInSecondsForGood;
    double initialUnstallThresholdInSecondsForModerate;
    double initialUnstallThresholdInSecondsForPoor;
    double initialUnstallThresholdInSecondsForUnknown;
    double unstallThresholdInSecondsForExcellent;
    double unstallThresholdInSecondsForGood;
    double unstallThresholdInSecondsForModerate;
    double unstallThresholdInSecondsForPoor;
    double unstallThresholdInSecondsForUnknown;
    _Bool disableUpdateTimeLoadedWhenInStall;
    _Bool mp4StrictAtomCheck;
    int liveStaleMpdCountThreshold;
    int liveMaxTimelineCount;
    double liveMaxTimelineDurationForQualityUnknown;
    double liveMaxTimelineDurationForQualityPoor;
    double liveMaxTimelineDurationForQualityModerate;
    double liveMaxTimelineDurationForQualityGood;
    double liveMaxTimelineDurationForQualityExcellent;
    int mpdAvailabilityEndTimePaddingInMinute;
    _Bool dashVideoTypeCheckEnabled;
    _Bool liveAbsoluteTimeCheckEnabled;
    _Bool skipExpirationCheckWithStaticMpd;
    _Bool liveSetFullyDownloadedWhenStatic;
    _Bool liveEndStreamOn410Error;
    _Bool useVariableMinMos;
    double liveManifestTimeoutSeconds;
    double livePredictiveManifestTimeoutSeconds;
    int livePrefetchStartPositionSecondsForQualityUnknown;
    int livePrefetchStartPositionSecondsForQualityPoor;
    int livePrefetchStartPositionSecondsForQualityModerate;
    int livePrefetchStartPositionSecondsForQualityGood;
    int livePrefetchStartPositionSecondsForQualityExcellent;
    _Bool enableVp9;
    _Bool enableOpus;
    int checkForPrefetchSegmentCount;
    double lowBufferBandwidthFraction;
    _Bool lazyLoadAudioTrack;
    double lazyLoadAudioWarmupDuration;
    _Bool enableNetworkErrorRecovery;
    _Bool enableBufferVisualization;
    int maxConsecutiveNetworkWarnings;
    int liveImmediateManifestFetchCooldown;
    _Bool enableDrm;
    _Bool shouldRefactorPsshProcess;
    _Bool enableSynchronousLicenseFetch;
    _Bool enablePredictiveDash;
    _Bool useAllPredictive;
    int numPredictiveSegments;
    int numPredictiveRewindSegments;
    _Bool useStreamingCache;
    _Bool streamingCacheNonPredictEnabled;
    _Bool enableRoundingInDashFetcher;
    long long liveMaxSegmentDurationMsForPredictive;
    _Bool enableHigherPrefetchQualitySelection;
    _Bool enableBypassingLowQualityPrefetch;
    _Bool transitionLiveGone;
    _Bool switch410ResponsesToWarnings;
    _Bool retrySegmentErrorResponses;
    int retrySegmentErrorAttempts;
    _Bool retryManiestErrorResponses;
    int retryManifestErrorAttempts;
    _Bool shouldApplyRotationTransform;
    _Bool useSegmentedRepForLiveEnabled;
    _Bool enableNegativeBufferFix;
    _Bool enableManifestLogging;
    _Bool segmentedRepForPredictiveEnabled;
    int unstallThresholderMode;
    int unstallThresholderSeekHandling;
    double unstallThresholderLinearIncreaseValue;
    double unstallThresholderMaximum;
    double unstallThresholderRecurrentMultiplier;
    _Bool monitorMemoryWarningForPlayerSizeSelection;
    _Bool allowPlayerSizePruningForPrefetchQuality;
    _Bool enableLiveJumpLogging;
    double liveJumpTimeGapInSeconds;
    _Bool enablePlaybackDiscontinuityLogging;
    _Bool logAdditionalVideoContentTypes;
    double playbackDiscontinuityTimeGapInSeconds;
    long long videoPtsSyncOffsetMs;
    _Bool expiredManifestRefreshEnabled;
    long long expiredManifestMinTimerMs;
    double liveManifestRefreshPeriodMultiplier;
    double liveOverrideManifestRefreshPeriodSec;
    int liveLatencyCatchUpStrategy;
    double liveLatencyPIDIntegralBound;
    double liveLatencyTimeBetweenPIDSamples;
    double liveLatencyProportionalPIDParameter;
    double liveLatencyIntegralPIDParameter;
    double liveLatencyDerivativePIDParameter;
    double liveLatencyMaxSpeedSpread;
    double liveLatencyHighInSeconds;
    double liveLatencyLowInSeconds;
    double liveLatencyHighInSecondsForQualityExcellent;
    double liveLatencyHighInSecondsForQualityGood;
    double liveLatencyHighInSecondsForQualityModerate;
    double liveLatencyHighInSecondsForQualityPoor;
    double liveLatencyHighInSecondsForQualityUnknown;
    double liveLatencyLowInSecondsForQualityExcellent;
    double liveLatencyLowInSecondsForQualityGood;
    double liveLatencyLowInSecondsForQualityModerate;
    double liveLatencyLowInSecondsForQualityPoor;
    double liveLatencyLowInSecondsForQualityUnknown;
    _Bool liveLatencyByQualityEnabled;
    double liveFullScreenTuningLowInSeconds;
    double liveFullScreenTuningHighInSeconds;
    _Bool limitLowWatermarkBySegmentDuration;
    _Bool enableSkipPrefetchByBandwidth;
    _Bool huddleEnableSkipPrefetchAlways;
    double skipPrefetchBandwidthMultiplier;
    double skipPrefetchBandwidthInMbpsForQualityGood;
    double skipPrefetchBandwidthInMbpsForQualityModerate;
    double skipPrefetchBandwidthInMbpsForQualityPoor;
    double skipPrefetchBandwidthInMbpsForQualityUnknown;
    _Bool enableChunkMD5;
    _Bool enablePartialChunkMD5;
    _Bool enableEditListSupport;
    _Bool enableUnavailableQualityFallback;
    _Bool enableUserQualitySelectionWithRepresentationId;
    _Bool enableStreamingWebmChunk;
    _Bool shouldCheckFrameCountForParseState;
    long long stopDiskCachingThresholdInSeconds;
    _Bool parsePredictiveRewindEnabled;
    _Bool parseWebVTTCaptionTrackEnabled;
    _Bool enableReplayRecording;
    long long maxManifestRefreshFailCount;
    _Bool enableOneSemanticsForLive;
    int oneSemanticsOsParamValue;
    int defaultBWConfidencePercentile;
    int highBWConfidencePercentile;
    _Bool updateBufferAndDuratinInPlayerMetadata;
    _Bool enableAudioStallOnly;
    _Bool useDelayedPrefetchLogging;
    _Bool liveTrimSegmentsOnStartupEnabled;
    _Bool enableCheckForFBABRPolicyTagAvoidOnABR;
    _Bool jumpToLiveHeadAfterPrefetchEnabled;
    _Bool refactorRewindJumpLatencyEnabled;
    double bandwidthEstimateHighWatermarkFraction;
    double bandwidthEstimateLowWatermarkFraction;
    _Bool ignoreBandwidthEstimateLowWatermark;
    double clientLatencyThresholdForLatencyCatchUp;
    _Bool dontCatchUpLatencyIfStalled;
    _Bool shouldRateLimitOnStallSkipCatchup;
    double timeIntervalToAllowNextStallSkipCatchUp;
    _Bool slowDownPlaybackRateWhenUnableToCatchUp;
    double playbackSpeedSlowDownHighWatermark;
    double playbackSpeedSlowDownLowWatermark;
    _Bool sendPlaybackSessionKeyAsRequestHeader;
    _Bool setSeekFetchChunkSizeToOne;
    _Bool stopManifestRefreshUntilStartup;
    _Bool enableVideoStallForAudioStallOnly;
    _Bool dinfoHeadersEnabled;
    long long dinfoHeadersTimeoutMs;
    _Bool dinfoPollerEnabled;
    long long dinfoPollerRefresh;
    long long dinfoPollerKeepalive;
    _Bool dinfoForceManifestRefreshOnEnd;
    long long videoExperimentId;
    _Bool sendClientBweToServer;
    _Bool loadAllPrefetchedInQueueEnabled;
    _Bool enableHevc;
    _Bool enableStallUnstallLogging;
    _Bool removePredictiveByMpdSource;
    _Bool enableEmsgParsingV2;
    _Bool dropDuplicateChunkInFrameSequencer;
    _Bool enableManifestRefreshTimerIncrease;
    int increasedTimerRefreshMs;
    int increaseManifestTriggerThreshold;
    _Bool disableEsdsObjectType5;
    double serverBweAlphaDecay;
    long long serverBweMinSamples;
    long long serverBweMaxSamples;
    _Bool enablePrefetchCacheUpgrade;
    _Bool enableQualityMetadataWithSummaryInfo;
    _Bool rewindCatchupLogicEnabled;
    _Bool predictiveForWasliveEnabled;
    _Bool latestFrameEstimateEnabled;
    _Bool alwaysJumpOnErrorEnabled;
    _Bool allowJumpToEndEnabled;
    _Bool predictiveParsingOnErrorDisabled;
    _Bool supportMultiParamSets;
    _Bool refactorReparsingEnabled;
    _Bool latestSegmentIdEnabled;
};

struct FNFDashWebmCluster {
    CDUnknownFunctionPointerType *_vptr$Callback;
    struct ThinReader _reader;
    struct Parser _parser;
    struct queue<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>, std::deque<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>>> _frames;
    unsigned int _block_timecode;
    _Bool _is_key_frame;
    unsigned long long _current_frame_index;
    unsigned long long _current_frame_count;
};

struct FNFDashWebmSegment {
    CDUnknownFunctionPointerType *_vptr$Callback;
    struct ThinReader _reader;
    struct Parser _parser;
    unsigned long long _offset;
    unsigned long long _size;
    struct vector<std::tuple<unsigned long long, unsigned long long>, std::allocator<std::tuple<unsigned long long, unsigned long long>>> _cue_points;
    _Bool _ebml_valid;
    struct Info *_info;
    struct Track *_track;
};

struct FNFDecompressionConfig {
    _Bool debuggingErrorEnabled;
    _Bool badFrameFix;
    _Bool enablePlayThroughDecodingErrors;
    unsigned int recoverDecodeFrameFailureTimes;
    unsigned int maxGopStoredFrameCount;
    unsigned int outputPoolRequestedMinimumBufferCount;
    unsigned int pixelBufferPoolAllocationThreshold;
    unsigned int pixelBufferPoolMinimumBufferCount;
    double pixelBufferPoolMaximumBufferAge;
    _Bool shouldRetainPixelBufferPool;
    _Bool disableColorSettingForCVBuffer;
};

struct FNFDisplayedFrameInfo {
    double presentTimestamp;
    double displayedPlayerTimestamp;
    double displayedUnixTimestamp;
};

struct FNFFrameBufferData {
    struct __CVBuffer *_field1;
    CDStruct_1b6d18a9 _field2;
};

struct FNFFrameBufferDataInternal {
    struct __CVBuffer *_field1;
    CDStruct_1b6d18a9 _field2;
    long long _field3;
};

struct FNFFrameBufferIndexInternal {
    unsigned long long _field1;
    unsigned long long _field2;
    _Bool _field3;
};

struct FNFFrameDisplayState {
    double pts;
    double audioDisplayTime;
    double videoDisplayTime;
};

struct FNFFrameMetadata {
    unsigned int _field1;
    CDStruct_1b6d18a9 _field2;
    CDStruct_1b6d18a9 _field3;
    long long _field4;
    CDStruct_1b6d18a9 _field5;
    unsigned int _field6;
    int _field7;
};

struct FNFFramesFlatMap<FNFFrameBufferDataInternal> {
    struct vector<std::pair<double, FNFFrameBufferDataInternal *>, std::allocator<std::pair<double, FNFFrameBufferDataInternal *>>> _circularBuckets;
    unsigned long long _startIndex;
    unsigned long long _size;
    struct FNFFramesFlatMapMemoryPool<FNFFrameBufferDataInternal, 16> _memoryPool;
};

struct FNFFramesFlatMapMemoryPool<FNFFrameBufferDataInternal, 16> {
    struct _PoolNode *_firstNode;
    union _Block *_firstFreeBlock;
};

struct FNFInceptionFrameMetadata {
    unsigned int _field1;
    CDStruct_1b6d18a9 _field2;
    CDStruct_1b6d18a9 _field3;
    unsigned int _field4;
    _Bool _field5;
};

struct FNFMP4EmsgAtom {
    basic_string_0ec669f3 message;
    unsigned char emsgType;
    double emsgStartTime;
    double emsgEndTime;
};

struct FNFMP4MehdAtom {
    int duration;
};

struct FNFMP4MoofAtom;

struct FNFMP4MoovAtom {
    struct FNFMP4MvhdAtom mvhdAtom;
    struct vector<FNFMP4TrakAtom, std::allocator<FNFMP4TrakAtom>> trakAtoms;
    struct FNFMP4MvexAtom mvexAtom;
};

struct FNFMP4MoovAtomCompressed {
    struct vector<FNFMP4TrakAtomForSeek, std::allocator<FNFMP4TrakAtomForSeek>> trakAtoms;
    struct FNFMP4MvhdAtom mvhdAtom;
};

struct FNFMP4MoovAtomProvider {
    struct FNFMP4MoovAtom _moovAtom;
    unsigned long long _moovAtomSize;
    struct FNFMP4SidxAtom _sidxAtom;
    struct vector<FNFMP4MoofAtom, std::allocator<FNFMP4MoofAtom>> _moofAtoms;
    struct FNFMP4EmsgAtom _emsgAtom;
    struct vector<FNFMP4EmsgAtom, std::allocator<FNFMP4EmsgAtom>> _emsgAtoms;
    _Bool _parseRotationAtoms;
    _Bool _parseHevcAtoms;
    _Bool _disableEsdsObjectType5;
    int _emsgAtomCount;
};

struct FNFMP4MvexAtom {
    struct FNFMP4MehdAtom mehdAtom;
    struct vector<FNFMP4TrexAtom, std::allocator<FNFMP4TrexAtom>> trexAtoms;
};

struct FNFMP4MvhdAtom {
    unsigned int timescale;
    unsigned int duration;
    float rotationAngle;
};

struct FNFMP4SidxAtom {
    unsigned int timescale;
    struct vector<FNFMP4SidxSegment, std::allocator<FNFMP4SidxSegment>> segments;
};

struct FNFMP4SidxSegment;

struct FNFMP4TrakAtom;

struct FNFMP4TrakAtomForSeek;

struct FNFMP4TrexAtom;

struct FNFMpdConfig {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    long long _field6;
    long long _field7;
    int _field8;
};

struct FNFPlayerInternalState {
    _Bool playingRequested;
    _Bool isPlaying;
    _Bool endTimeReached;
    _Bool firstAudioFrameEnqueued;
    _Bool stoppedEnqueuingVideo;
    _Bool stoppedEnqueuingAudio;
    _Bool isFirstVideoFrame;
    _Bool recreatedLayerOnError;
    _Bool audioEngineInitialized;
    _Bool isReadyForDisplay;
    _Bool previousSeekCompletionBlockExecuted;
    _Bool muted;
    _Bool showCaptions;
    _Bool videoStalled;
    _Bool displayEngineDeactivated;
    _Bool audioStalled;
    CDStruct_1b6d18a9 lastStartingTime;
    CDStruct_1b6d18a9 lastRequestedStartTime;
    CDStruct_1b6d18a9 lastRequestedMuteTime;
    CDStruct_1b6d18a9 latestEnqueuedVideoPts;
    CDStruct_1b6d18a9 latestEnqueuedAudioPts;
    CDStruct_1b6d18a9 latestEnqueuedAudioDts;
    float lastPlayRate;
    CDStruct_1b6d18a9 lastSeekToTime;
    float playRate;
    id playbackTimeObserverForAsset;
    id durationTimerForAsset;
    id stallTimerObserver;
    id seekFrameUpdateObserver;
    id sampleBufferFlushTimerObserver;
    id levelMeterTimerObserver;
    CDStruct_1b6d18a9 backgroundPauseTime;
    unsigned int sampleAudioFrameSize;
    NSString *previousRepresentationId;
    NSString *representationId;
    unsigned long long lastFrameSeekAttempt;
    long long status;
    struct FNFPlayerStallState stallState;
    struct FNFPlayerSeekState seekState;
    int pauseReason;
    int muteReason;
    struct CGRect bounds;
    CDUnknownBlockType frameSeekCompletionBlock;
    id loggingContext;
    id playContext;
    id pauseContext;
    id muteContext;
    NSError *playerItemWarning;
    NSError *playerItemError;
    NSArray *playerItemLoadedTimeRanges;
    CDStruct_1b6d18a9 playerItemDuration;
    struct FNFFrameDisplayState frameDisplayState;
    struct FNFAVSyncStatus avSync;
    struct FNFDisplayedFrameInfo displayedFrameInfo;
    struct FNFRenderedFrameInfo renderedFrameInfo;
    NSString *playlistDRMKeyId;
    NSString *playlistDRMPssh;
    CDStruct_1b6d18a9 lastRenderedFrameTimeStamp;
    unsigned long long videoStallStartTimeMs;
    unsigned long long videoStallDurationMs;
    unsigned long long audioStallStartTimeMs;
    unsigned long long audioStallDurationMs;
    NSMutableDictionary *playbackEndLoggingInfo;
};

struct FNFPlayerSeekState {
    _Bool seekFinished;
    int seekReason;
};

struct FNFPlayerStallState {
    _Bool isStalled;
    _Bool isStartStall;
    _Bool audioStallOnlyEnabled;
    _Bool videoStalled;
    _Bool audioStalled;
    unsigned long long stallStartPositionTimeInMilliseconds;
    _Bool audioStallOnlyThresholdExceeded;
};

struct FNFPlayerState {
    long long _field1;
    struct FNFPlayerStallState _field2;
    struct FNFPlayerSeekState _field3;
    int _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    id _field11;
    _Bool _field12;
    CDStruct_1b6d18a9 _field13;
    CDStruct_1b6d18a9 _field14;
    CDStruct_1b6d18a9 _field15;
    CDStruct_1b6d18a9 _field16;
    id _field17;
    id _field18;
    float _field19;
    id _field20;
    id _field21;
    struct CGRect _field22;
    id _field23;
    id _field24;
    id _field25;
    CDStruct_1b6d18a9 _field26;
    struct FNFFrameDisplayState _field27;
    struct FNFAVSyncStatus _field28;
    struct FNFDisplayedFrameInfo _field29;
    struct FNFRenderedFrameInfo _field30;
    unsigned long long _field31;
    unsigned long long _field32;
    id _field33;
    id _field34;
};

struct FNFRenderedFrameInfo {
    double presentTimestamp;
    double renderedPlayerTimestamp;
    _Bool isFrameStalled;
};

struct FNFSeekStatus {
    _Bool _field1;
    CDStruct_1b6d18a9 _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    unsigned long long _field6;
    unsigned long long _field7;
};

struct FNFStallDecision {
    _Bool _field1;
    struct FNFStallResult _field2;
};

struct FNFStallResult {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
};

struct FNFStitchConfig {
    int maxNumSmallSamplesIgnored;
    _Bool useVideoContextInformation;
    int initialCachedBWWeight;
    int sizeThreshBytes;
    _Bool enableUpdatedSmallSampleChecking;
};

struct FNFStitchVideoBandwidthEstimator {
    struct mutex m_estimatorLock;
    struct WeightedMeanBandwidthEstimator m_estimator;
    _Bool m_useServerBandwidthEstimate;
    _Bool m_useServerEstimateTtfb;
    long long m_ssBweMeanBitsPerSec;
    long long m_ssBweStdDevBitsPerSec;
    long long m_ssTtfbMinMs;
    struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> m_ssAbrBweRecordedTimePoint;
    double m_ssAbrMaxValidTimeMs;
    double m_ssAbrValidTimeMs;
};

struct FOAPercentageLayoutInfo {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct FetchedPayloadResult {
    CDUnknownBlockType parametersReader;
    CDUnknownBlockType serverNameReader;
    _Bool wantsColdStart;
    NSDictionary *rawPayload;
};

struct Field;

struct FilterChain;

struct FilterUniformUpdate {
    void *data;
    unsigned long long size;
    unsigned long long offset;
};

struct ForwardRenderPass;

struct Frame;

struct FrameDrops {
    double singleFrameDrop;
    double twoConsecFrameDrops;
    double fourConsecFrameDrops;
    double eightConsecFrameDrops;
};

struct FrameInfo {
    unsigned long long startTime;
    struct shared_ptr<msqrd::services::EffectDataSnapshot> dataSnapshot;
};

struct FrameServiceFeedback {
    unsigned char facesTrackedCount;
};

struct Framebuffer;

struct Function<void ()> {
    union Data data_;
    CDUnknownFunctionPointerType call_;
    CDUnknownFunctionPointerType exec_;
};

struct FunctionCode;

struct GestureEvent;

struct GestureEventServiceCreator;

struct GraphQLAssetFactory;

struct GraphQLMetadataAssetLoader;

struct GraphQLQuery;

struct GraphQLService;

struct GraphStoreGraphQLFactory;

struct GraphicsEngine;

struct IAssetLoader;

struct IAssetsManager;

struct IAsyncAssetFetcher;

struct IAsyncAssetLoader;

struct IAsyncAssetMetadataDownloading;

struct IAudioFileSink;

struct IAudioGraphClient;

struct IAudioPipeline;

struct IAudioPlatformComponentHost;

struct IAudioServiceConfigurationAnnouncer;

struct IAudioServiceController;

struct IBuffer;

struct IBugReportLogger;

struct ICancelableToken;

struct ICaptureEventInput;

struct ICommandBuffer;

struct ICommandQueue;

struct IComponentSyncListener;

struct IConnectionInfoProvider;

struct IContext;

struct IDepthStencilState;

struct IDevice;

struct IEffectDataSnapshotterCreator;

struct IEffectSessionListener;

struct IEffectsManager;

struct IEngineAnalyticsLogger;

struct IExperimentConfig;

struct IFBMobileConfigManager;

struct IFilter;

struct IFilterDescriptor;

struct IFilterFactory;

struct IFramebuffer;

struct IGAccountAccessCommmonFields {
    id _field1;
    double _field2;
    double _field3;
    id _field4;
};

struct IGAssetNetworkerRetryParams {
    long long maxRetries;
    long long minTimeBetweenRetries;
    long long maxTimeBetweenRetries;
};

struct IGAssetNetworkerRetryState {
    long long numAttemptsCompleted;
    double timeToRetry;
};

struct IGAttitudeSample;

struct IGAudioEffectAudioPostProcessorOutputCallback;

struct IGBloksDataFetchResponseStats {
    long long responseParseStartTimeMs;
    long long responseParseEndTimeMs;
};

struct IGCameraLoggerDoodleData {
    _Bool _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
};

struct IGCameraLoggerExtraMediaData {
    double _field1;
    long long _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct IGCameraPreviewInfo {
    long long cameraPosition;
    struct CGSize previewSize;
    struct UIEdgeInsets safeArea;
    _Bool isPostCapture;
};

struct IGCompositionFilterTransform {
    struct CGPoint scale;
    struct CGPoint translation;
    double rotation;
};

struct IGFeatureMap<NSDictionary<NSString *, IGLauncherParameter *>*> {
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _lock;
    struct FetchedPayloadResult _fetchedPayloadResult;
    struct unordered_map<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*, FB::ObjcHash, FB::ObjcEqual, std::allocator<std::pair<NSString *const, NSDictionary<NSString *, IGLauncherParameter *>*>>> _readParameters;
};

struct IGFrameSample;

struct IGGridLayoutConfiguration {
    double interitemSpacing;
    struct UIEdgeInsets insets;
    double mediasPerRow;
    double aspectRatio;
};

struct IGGyroSample;

struct IGImageRegionRGB {
    long long _field1;
    long long _field2;
    long long _field3;
    long long _field4;
    long long _field5;
    long long _field6;
};

struct IGLigerHTTPPriorityConfig {
    _Bool isHeaderEnabled;
    IGRequestPrioritizationStrategy *strategy;
};

struct IGListCollectionScrollingTraits {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
};

struct IGListSectionEntry;

struct IGLoomUploadNetworkSource;

struct IGMediaTransform {
    struct CGPoint anchorPoint;
    struct CGPoint offsetFromCenter;
    double scale;
    double rotation;
};

struct IGNetworkSourceContainerCachingConfig {
    double preferredCacheTTL;
    IGNetworkContainerCacheMetadata *cacheMetadata;
    IGHTTPCacheUsagePolicy *cacheUsagePolicy;
    _Bool alwaysServeCacheWhenNoConnection;
};

struct IGOrientationSample;

struct IGOverlayViewLocationInfo {
    struct CGPoint position;
    struct CGSize size;
    struct CGPoint translation;
    double scale;
    double rotation;
    _Bool isMirroredHorizontally;
};

struct IGOverlayViewTapInfo {
    struct CGPoint center;
    struct CGSize size;
    double rotation;
    long long zIndex;
};

struct IGPercentageLayoutInfo {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct IGPerspectiveAdjustments {
    union _GLKMatrix4 _field1;
    double _field2;
    struct IGPerspectiveRotation _field3;
    struct IGPerspectiveCrop _field4;
    struct CGSize _field5;
};

struct IGPerspectiveCrop {
    struct CGPoint _field1;
    struct CGSize _field2;
    double _field3;
    double _field4;
};

struct IGPerspectiveRotation {
    double _field1;
    double _field2;
    double _field3;
};

struct IGRegion {
    struct CGPoint center;
    struct CGSize size;
    double rotation;
};

struct IGScrollPerfLoggerConfig {
    _Bool isEnabled;
    _Bool isSessionSampling;
    _Bool isUserSampling;
    long long sessionSamplingRate;
    long long userSamplingRate;
};

struct IGStoryRegion {
    struct CGPoint _field1;
    struct CGSize _field2;
    double _field3;
};

struct IGTaskExperimentConfig {
    _Bool sharedQueueDisabled;
    _Bool bumpRequestPriority;
    _Bool mosaicDecodingEnabled;
    _Bool ios15DecodingEnabled;
    _Bool centralizeAIQ;
};

struct IGTextViewItemViewModelConfig {
    id _field1;
    struct UIEdgeInsets _field2;
    id _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    unsigned long long _field8;
    long long _field9;
    _Bool _field10;
    id _field11;
};

struct IGTimeInfo {
    long long _field1;
    long long _field2;
};

struct IGTimeRange {
    double start;
    double duration;
};

struct IGWaterfallLayoutCacheState {
    double _field1;
    double _field2;
    double _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    struct vector<IGWaterfallLayoutColumn, std::allocator<IGWaterfallLayoutColumn>> _field7;
};

struct IGWaterfallLayoutCachedItem {
    struct IGWaterfallLayoutCacheState _field1;
    struct {
        unsigned long long _field1;
        unsigned long long _field2;
    } _field2;
    struct CGRect _field3;
};

struct IGWaterfallLayoutColumn;

struct ILocationUpdateListener;

struct IMicrophoneSink;

struct IModelManager;

struct INetworkClientSource;

struct INetworkConsentManager;

struct INetworkRequestRedirectHandler;

struct INetworkResult;

struct IPersistenceServiceDelegate;

struct IPlatformAlgorithmDataSource;

struct IQPLUserFlow;

struct IRawEventLogger;

struct IRenderCommandEncoder;

struct IRenderPipelineState;

struct IRenderTarget;

struct IResourceLoader;

struct ISamplerState;

struct IScriptingLogger;

struct IServiceAnalyticsLogger;

struct IServiceConfiguration;

struct IServiceMessage;

struct IShaderLogger;

struct IShaderModule;

struct IStructuredLogger;

struct ISubEffectDocumentFactory;

struct ISubscription;

struct ITexture;

struct IVertexInputState;

struct IVideoDataProvider;

struct IViewport;

struct IgTigonLigerService;

struct Info;

struct InlineSerialExecutor;

struct KF2IDMap<facebook::keyframes::Document> {
    struct map<const facebook::keyframes::Document *, unsigned short, std::less<const facebook::keyframes::Document *>, std::allocator<std::pair<const facebook::keyframes::Document *const, unsigned short>>> _idMap;
    unsigned short _nextAvailableID;
};

struct KF2IDMap<facebook::keyframes::Layer> {
    struct map<const facebook::keyframes::Layer *, unsigned short, std::less<const facebook::keyframes::Layer *>, std::allocator<std::pair<const facebook::keyframes::Layer *const, unsigned short>>> _idMap;
    unsigned short _nextAvailableID;
};

struct KFPathCommand;

struct KFValue<CGPoint> {
    struct variant<bool, CGPoint, KFAnimation<CGPoint>*> _value;
};

struct KFValue<UIColor *> {
    struct variant<bool, UIColor *, KFAnimation<UIColor *>*> _value;
};

struct KFValue<double> {
    struct variant<bool, double, KFAnimation<double>*> _value;
};

struct KFValue<std::vector<KFPathCommand>> {
    struct variant<bool, std::vector<KFPathCommand>, KFAnimation<std::vector<KFPathCommand>>*> _value;
};

struct KFValue<std::vector<UIColor *>> {
    struct variant<bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>>*> _value;
};

struct KFValue<std::vector<double>> {
    struct variant<bool, std::vector<double>, KFAnimation<std::vector<double>>*> _value;
};

struct KFVariable;

struct LanguagePackReader;

struct LocationData {
    CDUnknownFunctionPointerType *_vptr$IDataProviderResult;
    _Bool hasValidLocation;
    double latitude;
    double longitude;
    double horizontalAccuracy;
    double altitude;
    double verticalAccuracy;
    double bearing;
    double bearingAccuracy;
    double magNorthHeading;
    double trueNorthHeading;
    double headingAccuracy;
    double declination;
    struct duration<double, std::ratio<1, 1>> timestamp;
};

struct LocationDataProvider;

struct MBUIMediaSpec {
    struct MediaSize _field1;
    int _field2;
    double _field3;
    struct CornerRadii _field4;
    int _field5;
};

struct MCDMediaUploadJobProgressInformation {
    long long _field1;
    double _field2;
    unsigned char _field3;
};

struct MOSCachedImageFactoryConfiguration {
    struct Required<FBImageCreateWithDataExperimentsConfig> _field1;
    struct Required<bool> _field2;
};

struct MOSImageDownloaderCacheConfig {
    _Bool fastPathCacheKeyedOnURL;
    _Bool isInstagramIntegrationEnabled;
};

struct MOSPJPEGEncodingInfo {
    short _version;
    int _fileSize;
    NSArray *_scanOffsets;
};

struct MOSProgressiveLoadingConfig {
    unsigned long long progressiveMinimumScanVersion;
    _Bool shouldNotifyAllIntermediateScans;
    double progressiveImageRefreshThreshold;
};

struct MOSQPLLoggerExperimentConfig {
    _Bool shouldLogGlobalEstimatedBandwidth;
    _Bool shouldLogImagesEstimatedBandwidth;
};

struct MOSTaskExperimentConfig {
    struct FBImageCreateWithDataExperimentsConfig createImageExperimentsConfig;
    struct MOSProgressiveLoadingConfig progressiveLoadingConfig;
    _Bool fastPathCacheKeyedOnURL;
    _Bool usesSharedTaskQueue;
    _Bool usesSerialSharedTask;
    _Bool usesConcurrentSharedTask;
    _Bool usesConcurrentHighPriorityQueueForSharedTask;
    _Bool bumpRequestPriorityWithoutSharedTaskQueue;
    _Bool isInstagramIntegrationEnabled;
    _Bool dontUsePJPEGForFullData;
};

struct MQTTChannelAnalytics;

struct MQTTChannelCoordinatorProxy;

struct MTData<cameracore::audiopipeline::IAudioPipeline *> {
    struct IAudioPipeline *data_;
    struct atomic<long long> readers_;
};

struct ManagedUniformBuffer;

struct Manifest;

struct Material;

struct Matrix<float, 4, 4, 0, 4, 4> {
    struct DenseStorage<float, 16, 4, 4, 0> _field1;
};

struct MediaSize {
    double _field1;
    double _field2;
};

struct MeshNode;

struct MessagePackParseState {
    struct FBNSStringCache cache;
};

struct MmappedFile;

struct ModelPaths;

struct MotionDataProvider;

struct MountAnalyticsContext;

struct MountContext {
    struct shared_ptr<CK::Component::ViewManager> _field1;
    struct CGPoint _field2;
    struct UIEdgeInsets _field3;
    _Bool _field4;
    struct MountAnalyticsContext *_field5;
};

struct MountResult {
    _Bool _field1;
    struct MountContext _field2;
};

struct NSDirectionalEdgeInsets {
    double top;
    double leading;
    double bottom;
    double trailing;
};

struct NameHandle {
    unsigned int crc32_;
    basic_string_0ec669f3 name_;
};

struct NetworkStatusMonitor;

struct NextButtonTappedEventNoBuilder {
    id _field1;
    id _field2;
    struct Required<NSString *> _field3;
    id _field4;
    struct Required<double> _field5;
    id _field6;
    id _field7;
    Optional_381dc36e _field8;
    Optional_381dc36e _field9;
    id _field10;
    id _field11;
    struct Optional<bool> _field12;
    id _field13;
    id _field14;
    struct Optional<bool> _field15;
    id _field16;
    struct Optional<bool> _field17;
    Optional_381dc36e _field18;
    id _field19;
    struct Optional<double> _field20;
    id _field21;
    struct Required<NSString *> _field22;
};

struct Node;

struct NodeFactory;

struct NodeStore {
    struct unordered_map<pando::NodeKey, std::shared_ptr<const pando::Node>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>, std::allocator<std::pair<const pando::NodeKey, std::shared_ptr<const pando::Node>>>> _map;
};

struct OffsetRange {
    double _field1;
    double _field2;
};

struct OneCameraXLogger;

struct OptimisticViewMutationInfo;

struct Optional<CGSize> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            struct CGSize value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<CKViewConfiguration> {
    struct Storage<CKViewConfiguration, false, false, true> _storage;
};

struct Optional<MOSPJPEGEncodingInfo> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            struct MOSPJPEGEncodingInfo value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<StructuredLogger::DevicebatterystatusEnum> {
    StorageTriviallyDestructible_d373e774 storage_;
};

struct Optional<StructuredLogger::IguserinteropusertypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::InstagramfollowstatustypeEnum> {
    StorageTriviallyDestructible_d373e774 storage_;
};

struct Optional<StructuredLogger::InstagramstickertypesEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::MediaplaybackdeviceorientationEnum> {
    StorageTriviallyDestructible_099f9f94 storage_;
};

struct Optional<StructuredLogger::MediaplaybackplayreasonEnum> {
    StorageTriviallyDestructible_099f9f94 storage_;
};

struct Optional<StructuredLogger::MediaplaybackstorypreviewtypeEnum> {
    StorageTriviallyDestructible_099f9f94 storage_;
};

struct Optional<StructuredLogger::TmediaplaybackdynamicproductextrasType> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            struct TmediaplaybackdynamicproductextrasType value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<StructuredLogger::TmediaplaybackinitialproductextrasType> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            struct TmediaplaybackinitialproductextrasType value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<arfx::delivery::EffectShaderPackMetadata> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct EffectShaderPackMetadata _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<arfx::shared_ref<msqrd::servicehost::IEffectSessionListener>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct shared_ref<msqrd::servicehost::IEffectSessionListener> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<arfx::shared_ref<msqrd::services::IServiceAnalyticsLogger>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct shared_ref<msqrd::services::IServiceAnalyticsLogger> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<arfx::unique_ref<const msqrd::services::IEffectDataSnapshotterCreator>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct unique_ref<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<bool> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            _Bool value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<double> {
    struct StorageTriviallyDestructible {
        union {
            char _field1;
            double _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<int> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<long long> {
    StorageTriviallyDestructible_099f9f94 storage_;
};

struct Optional<msqrd::logging::FrameInfo> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            struct FrameInfo value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<msqrd::logging::RenderTimeLogger> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            struct RenderTimeLogger value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<msqrd::renderer::Transform> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            struct Transform value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<std::pair<FBMPVideoData *, FBMPDataMetadata>> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            struct pair<FBMPVideoData *, FBMPDataMetadata> value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<std::promise<std::string>> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            struct promise<std::string> value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<std::string> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            basic_string_0ec669f3 value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<unsigned long long> {
    struct StorageTriviallyDestructible {
        union {
            char _field1;
            unsigned long long _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct POPAnimatorItem;

struct Parser {
    struct Frame *_stack;
    struct BlockHead *_block_head;
};

struct PixelSize {
    unsigned int _field1;
    unsigned int _field2;
};

struct PlatformAlgorithmDataSource;

struct PlatformEventsInput;

struct PlatformTexture;

struct PrefetchRequest {
    id _field1;
    id _field2;
    long long _field3;
};

struct PrivacyContext {
    id _field1;
    struct optional<facebook::logginginfra::privacy::Product> _field2;
};

struct ProductFeatureConfig {
    struct default_initialized_primitive<bool, true> useSkinSmoothing;
    struct default_initialized_primitive<bool, false> useSceneViewCulling;
    struct default_initialized_primitive<unsigned int, 0> preferredAntialiasingLevel;
    struct default_initialized_primitive<bool, false> forceNoCameraPreview;
    struct default_initialized_primitive<bool, false> forceSyncAssetLoad;
    struct default_initialized_primitive<bool, false> resetRenderStatePoolOnBlockDestruction;
};

struct QPLBase;

struct QPLUserFlow;

struct RCComponentSize {
    struct RCRelativeDimension width;
    struct RCRelativeDimension height;
    struct RCRelativeDimension minWidth;
    struct RCRelativeDimension minHeight;
    struct RCRelativeDimension maxWidth;
    struct RCRelativeDimension maxHeight;
};

struct RCLayout {
    id component;
    struct CGSize size;
    struct shared_ptr<const std::vector<RCLayoutChild>> children;
    NSDictionary *extra;
};

struct RCLayoutCache;

struct RCLayoutResult {
    struct RCLayout layout;
    struct shared_ptr<RCLayoutCache> cache;
};

struct RCRelativeDimension {
    long long _type;
    double _value;
};

struct RadioStatusObserver;

struct Range<const char *> {
    char *_field1;
    char *_field2;
};

struct Range<const msqrd::platform::IScriptingLogger::WatchEntry *> {
    struct WatchEntry *_field1;
    struct WatchEntry *_field2;
};

struct RecognitionCoordinator;

struct Record;

struct RegisterAccountCreatedEvent {
    id _field1;
    Optional_381dc36e _field2;
    id _field3;
    id _field4;
    double _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
    Optional_381dc36e _field10;
    id _field11;
    id _field12;
    id _field13;
    id _field14;
    struct Optional<double> _field15;
    id _field16;
    id _field17;
};

struct RenderSession;

struct RenderTimeLogger {
    shared_ref_5e37a987 rawEventLogger_;
    shared_ptr_422868cf structuredLogger_;
    struct Optional<std::string> productName_;
    shared_ptr_eaf197ea perfLogger_;
    _Bool warmServiceHost_;
    struct Optional<msqrd::logging::FrameInfo> currentFrameInfo_;
    struct unique_ptr<msqrd::logging::SessionInfo, std::default_delete<msqrd::logging::SessionInfo>> currentSessionInfo_;
    struct unique_ptr<msqrd::events::ISubscription, std::default_delete<msqrd::events::ISubscription>> dataSnapshotSubscription_;
    int sessionStartQPLInstance_;
    int firstFrameRenderQPLInstance_;
};

struct Repr;

struct RequestMeasurer;

struct RequestResponseInfo;

struct Required<FBImageCreateWithDataExperimentsConfig> {
    struct FBImageCreateWithDataExperimentsConfig _field1;
};

struct Required<NSString *> {
    id _field1;
};

struct Required<bool> {
    _Bool _field1;
};

struct Required<double> {
    double _field1;
};

struct Resolver;

struct ResourceLoader;

struct ResourcePool;

struct RtApiRemoteIO {
    CDUnknownFunctionPointerType *_field1;
    struct basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    _Bool _field4;
    struct RtApiStream _field5;
    _Bool _field6;
};

struct RtApiStream {
    unsigned int _field1[2];
    void *_field2;
    int _field3;
    int _field4;
    char *_field5[2];
    char *_field6;
    _Bool _field7[2];
    _Bool _field8;
    _Bool _field9[2];
    _Bool _field10[2];
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14[2];
    unsigned int _field15[2];
    unsigned int _field16[2];
    unsigned long long _field17[2];
    unsigned long long _field18;
    unsigned long long _field19[2];
    struct _opaque_pthread_mutex_t _field20;
    struct CallbackInfo _field21;
    struct ConvertInfo _field22[2];
    double _field23;
};

struct SMPTETime {
    short mSubframes;
    short mSubframeDivisor;
    unsigned int mCounter;
    unsigned int mType;
    unsigned int mFlags;
    short mHours;
    short mMinutes;
    short mSeconds;
    short mFrames;
};

struct SNPlaybackStateTransitionContext {
    CDStruct_eb671702 _field1;
    struct {
        _Bool _field1;
    } _field2;
    struct {
        id _field1;
    } _field3;
};

struct SRDelegateAvailableMethods {
    unsigned int didReceiveMessage:1;
    unsigned int didReceiveMessageWithString:1;
    unsigned int didReceiveMessageWithData:1;
    unsigned int didOpen:1;
    unsigned int didFailWithError:1;
    unsigned int didCloseWithCode:1;
    unsigned int didReceivePong:1;
    unsigned int shouldConvertTextFrameToString:1;
};

struct Sample;

struct ScopedResponderAndKey {
    CKScopedResponder *responder;
    int key;
};

struct ScriptLogger;

struct SerialAsyncExecutorFactory;

struct SerialDispatchQueueExecutor;

struct Service;

struct ServiceCreatorRegistry {
    struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IIdentityService>> identityServiceCreator;
    struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IInterEffectLinkingService>> interEffectLinkingServiceCreator;
    struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IScriptAnalyticsService>> scriptAnalyticsServiceCreator;
    struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IDeepLinkAssetProvider>> deepLinkAssetProviderCreator;
    struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::ILiveStreamingService>> liveStreamingServiceCreator;
    struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IHapticService>> hapticServiceCreator;
    struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::IOpticalFlowDataProvider>> opticalFlowDataProviderCreator;
    struct shared_ptr<msqrd::servicehost::DataProviderCreator<msqrd::dataprovider::IMotionDataProvider>> motionDataProviderCreator;
    struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::IFaceTrackingDataProvider>> faceTrackingDataProviderCreator;
    struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::IFrameBrightnessDataProvider>> frameBrightnessDataProviderCreator;
    struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::ITargetTrackingDataProvider>> targetTrackingDataProviderCreator;
    struct shared_ptr<msqrd::servicehost::DataProviderCreator<msqrd::dataprovider::ITouchGesturesDataProvider>> touchGesturesDataProviderCreator;
    struct shared_ptr<msqrd::servicehost::UpdatableDataProviderCreator<msqrd::services::IVideoDataService>> videoDataServiceCreator;
    struct unordered_map<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>, std::hash<msqrd::services::ServiceType>, std::equal_to<msqrd::services::ServiceType>, std::allocator<std::pair<const msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>>> serviceCreators_;
};

struct ServiceFeedbackGenerator;

struct ServiceHost;

struct ServiceNotifier<msqrd::dataprovider::ILocationUpdateListener> {
    struct mutex listenerMutex_;
    struct shared_ptr<std::vector<std::weak_ptr<msqrd::dataprovider::ILocationUpdateListener>>> listeners_;
};

struct ServiceToken;

struct ServiceType {
    int _field1;
};

struct SessionInfo;

struct SessionWaterfallLogger;

struct Settings {
    struct duration<long long, std::ratio<1, 1>> windowSizeSeconds;
    unsigned int windowMinSamples;
    unsigned int sizeThreshBytes;
    double alphaBitrate;
    double alphaLatency;
    int maxNumSmallSamplesIgnored;
    _Bool enableUpdatedSmallSampleChecking;
};

struct ShaderCompileDesc {
    char *_field1;
    char *_field2;
    struct ShaderCompilerOptions _field3;
    unsigned char _field4;
};

struct ShaderCompilerOptions {
    _Bool _field1;
};

struct ShaderLogger;

struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> {
    struct atomic<unsigned int> state_;
};

struct SkipButtonTappedEvent {
    id _field1;
    struct Optional<int> _field2;
    double _field3;
    id _field4;
    id _field5;
    id _field6;
    struct Optional<int> _field7;
    id _field8;
    struct Optional<bool> _field9;
    struct Optional<int> _field10;
    id _field11;
    struct Optional<double> _field12;
    id _field13;
    id _field14;
};

struct SmoothLoopTime {
    double expCoeff_;
    double value_;
    struct duration<long long, std::ratio<1, 1000000>> buffer_time_;
    struct duration<long long, std::ratio<1, 1000000>> busy_buffer_;
    unsigned long long buffer_cnt_;
};

struct SocketData {
    unsigned short _field1;
    Range_3cfb20fc _field2;
    unsigned long long _field3;
    unsigned int _field4;
    struct Optional<unsigned long long> _field5;
};

struct SoundtrackAudioConfiguration {
    int deviceType;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> devicePath;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> deviceName;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> identifier;
    unsigned int sampleRate;
    unsigned int bufferSize;
};

struct SoundtrackComposition {
    struct shared_ptr<SoundtrackComposition::Context> ctx;
};

struct SoundtrackDescription {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> id;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> title;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> artist;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> author;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> path;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> categories;
    double tempo;
    unsigned char signature[2];
    int version;
    int type;
    double duration[2];
    struct SoundtrackDescriptionHints hints;
};

struct SoundtrackDescriptionHints {
    double timestretchLimits[2];
    int numIntensitySteps;
    double reserved[8];
};

struct SoundtrackFileManager {
    struct shared_ptr<SoundtrackFileManager::Context> ctx;
};

struct SoundtrackPlayer {
    struct shared_ptr<SoundtrackPlayer::Context> _field1;
};

struct Stabilizer;

struct StabilizerResult;

struct StabilizerSettings;

struct Stash;

struct StashFile;

struct StashManager;

struct StashSQLite;

struct StepViewLoadedEventNoBuilder {
    id _field1;
    id _field2;
    struct Required<NSString *> _field3;
    id _field4;
    struct Required<double> _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
    struct Required<double> _field10;
    struct Required<NSString *> _field11;
    id _field12;
    struct Required<NSString *> _field13;
};

struct StitchConfig {
    double _field1;
    double _field2;
    double _field3;
};

struct StitchRepInfo {
    id _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    unsigned int _field6;
    double _field7;
    unsigned int _field8;
};

struct StitchSRConfig;

struct Storage<CKViewConfiguration, false, false, true> {
    unsigned long long hasValue;
    union {
        char emptyState;
        struct CKViewConfiguration value;
    } ;
};

struct Summary {
    struct unordered_map<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>, facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::IdentityHash, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>>> layerInfo_;
    struct mutex mutex_;
};

struct Synchronized<boost::intrusive::list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>>, folly::SharedMutexImpl<false>> {
    struct list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>, void, void, void> datum_;
    struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> mutex_;
};

struct Synchronized<std::unordered_set<folly::detail::EventBaseLocalBase *>, folly::SharedMutexImpl<false>> {
    struct unordered_set<folly::detail::EventBaseLocalBase *, std::hash<folly::detail::EventBaseLocalBase *>, std::equal_to<folly::detail::EventBaseLocalBase *>, std::allocator<folly::detail::EventBaseLocalBase *>> datum_;
    struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> mutex_;
};

struct TextureTarget;

struct ThinReader {
    CDUnknownFunctionPointerType *_vptr$Reader;
    unsigned long long _stream_offset;
    unsigned long long _num_bytes_remaining;
    char *_buffer;
};

struct TigonRequestToken;

struct TigonService;

struct TigonTailingFileBodyProviderReaderHandle;

struct TmediaplaybackdynamicproductextrasType {
    NSString *attributionIdV2Root;
    struct Optional<bool> captionsAvailable;
    struct Optional<bool> captionsDisplayed;
    Optional_381dc36e currentViewability;
    struct Optional<StructuredLogger::MediaplaybackdeviceorientationEnum> deviceOrientation;
    NSString *feedCarouselCoverMediaId;
    Optional_381dc36e feedCarouselIndex;
    NSString *feedCarouselMediaId;
    Optional_381dc36e feedCarouselMediaType;
    Optional_381dc36e feedCarouselSize;
    NSString *feedEffectId;
    NSString *mezqlToken;
    struct Optional<bool> playerSoundOn;
    NSString *rankingInfoToken;
    Optional_381dc36e storyBatteryLevelPercent;
    struct Optional<StructuredLogger::DevicebatterystatusEnum> storyBatteryStatus;
    struct Optional<bool> storyIsLiveDonation;
    struct Optional<bool> storyIsLiveStreaming;
    struct Optional<bool> storyIsMqttConnected;
    Optional_381dc36e storyNumberOfQualities;
    NSString *storyPreviewMediaId;
    NSString *storyPreviewMediaOwnerId;
    struct Optional<StructuredLogger::MediaplaybackstorypreviewtypeEnum> storyPreviewType;
    Optional_381dc36e storyReelPosition;
    Optional_381dc36e storyReelSize;
    Optional_381dc36e storySessionReelCounter;
    Optional_381dc36e storyStaleMpdCount;
    Optional_381dc36e storyTrayPosition;
    NSString *storyTraySessionId;
    NSString *subtype;
    NSString *trigger;
    Optional_381dc36e videoHeight;
    Optional_381dc36e videoWidth;
};

struct TmediaplaybackinitialproductextrasType {
    struct Optional<StructuredLogger::InstagramfollowstatustypeEnum> instagramFollowStatus;
    struct Optional<StructuredLogger::MediaplaybackplayreasonEnum> videoPlayReason;
};

struct TmediaplaybackrequiredmetadatapayloadType {
    id _field1;
    id _field2;
    long long _field3;
    id _field4;
    id _field5;
    id _field6;
    id _field7;
    int _field8;
    id _field9;
};

struct TouchGesturesDataProvider;

struct TraceEvent {
    unsigned char _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> _field5;
    struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> _field6;
    struct map<proxygen::TraceFieldType, proxygen::TraceEvent::MetaData, std::less<proxygen::TraceFieldType>, std::allocator<std::pair<const proxygen::TraceFieldType, proxygen::TraceEvent::MetaData>>> _field7;
};

struct Track;

struct TrackerKCF;

struct Transform {
    struct vec<2, float, glm::packed_highp> offset;
    struct mat<2, 2, float, glm::packed_highp> matrix;
};

struct Tree;

struct TreeBuilderWrapper;

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct UIOffset {
    double horizontal;
    double vertical;
};

struct Update;

struct Version;

struct VertexAttribute {
    unsigned long long bufferIndex;
    int format;
    unsigned long long offset;
    basic_string_0ec669f3 name;
    int location;
};

struct VertexInputBinding {
    unsigned long long stride;
    int sampleFunction;
    unsigned long long sampleRate;
};

struct VertexInputStateDesc {
    unsigned long long numAttributes;
    struct VertexAttribute attributes[31];
    unsigned long long numInputBindings;
    struct VertexInputBinding inputBindings[128];
};

struct VertexShaderDesc {
    struct ShaderCompileDesc _field1;
    struct VertexInputStateDesc _field2;
};

struct VideoBufferInputProvider;

struct VideoDataProvider;

struct ViewManager;

struct ViewReusePoolMap {
    struct Dictionary<CK::Component::ViewKey, CK::Component::ViewReusePool> dictionary;
    struct vector<UIView *, std::allocator<UIView *>> vendedViews;
};

struct VirtualEventBase;

struct WatchEntry;

struct WeightedMeanBandwidthEstimator {
    CDUnknownFunctionPointerType *_vptr$WeightedMeanBandwidthEstimator;
    struct deque<facebook::abr::WeightedMeanBandwidthEstimator::Sample, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample>> m_window;
    struct function<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>()> m_fnGetTimePoint;
    struct BandwidthEstimate m_bandwidthEstimate;
    _Bool m_isEstimateStale;
    double m_lowPassAlphaMultiplier;
    _Bool m_useLowPassFilter;
    int m_recentSmallSamples;
    struct Settings m_settings;
};

struct WhistleConnectionFactory;

struct YGValue {
    float _field1;
    int _field2;
};

struct _AppendBytesResult {
    long long _field1;
    unsigned long long _field2;
};

struct _GLKMatrix4 {
    float m[16];
};

struct _GLKVector2 {
    float v[2];
};

struct _GLKVector3 {
    float v[3];
};

struct _GLKVector4 {
    float v[4];
};

struct _IGRange {
    double _field1;
    double _field2;
};

struct _IGWeakUnorderedMap<id<FBViewpointTrackable>, NSMutableSet<FBViewpointAction *>*, void, void, void> {
    struct __hash_table<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, std::__unordered_map_hasher<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Hash, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Equal, true>, std::__unordered_map_equal<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Equal, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Hash, true>, std::allocator<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Hash, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Equal, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Equal, IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>::Hash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct _MOSCachedImageFactoryConfiguration {
    struct FBImageCreateWithDataExperimentsConfig createImageExperimentsConfig;
    _Bool useInstagramDecodingMethod;
};

struct _MOSProgressiveJPEGConfig {
    _Bool shouldNotifyAllIntermediateScans;
    struct FBImageCreateWithDataExperimentsConfig createImageExperimentsConfig;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _PoolNode;

struct _TmediaplaybackdynamicproductextrasTypeBuilder<0> {
    struct TmediaplaybackdynamicproductextrasType _object;
};

struct __CVBuffer;

struct __MCFRuntimeBaseData {
    unsigned char _cfinfo[4];
    unsigned int _rc;
};

struct __alt<0, bool> {
    _Bool __value;
};

struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> {
    _Atomic _Bool __a_value;
};

struct __rep {
    union {
        struct __long {
            char *__data_;
            unsigned long long __size_;
            unsigned long long __cap_;
        } __l;
        struct __short {
            char __data_[23];
            struct {
                unsigned char __size_;
            } ;
        } __s;
        struct __raw {
            unsigned long long __words[3];
        } __r;
    } ;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct _fnf_avc1_frame_check_t {
    _Bool success;
    _Bool isKeyframe;
    int naluCount;
};

struct _fnf_avc1_frame_sanity_t {
    struct _fnf_avc1_frame_check_t _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct a8;

struct aligned_storage<16, 8> {
    union data_t data_;
};

struct array<double, 5> {
    double __elems_[5];
};

struct atomic<CLAuthorizationStatus> {
    struct __cxx_atomic_impl<CLAuthorizationStatus, std::__cxx_atomic_base_impl<CLAuthorizationStatus>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic<CMTime> {
    struct __cxx_atomic_impl<CMTime, std::__cxx_atomic_base_impl<CMTime>> {
        _Atomic CDStruct_183601bc __a_value;
    } __a_;
};

struct atomic<FBMQTTChannelCoordinatorState> {
    struct __cxx_atomic_impl<FBMQTTChannelCoordinatorState, std::__cxx_atomic_base_impl<FBMQTTChannelCoordinatorState>> {
        _Atomic long long __a_value;
    } __a_;
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> __a_;
};

struct atomic<double> {
    struct __cxx_atomic_impl<double, std::__cxx_atomic_base_impl<double>> {
        _Atomic double __a_value;
    } __a_;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic<long long> {
    struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> {
        _Atomic long long __a_value;
    } __a_;
};

struct atomic<long> {
    struct __cxx_atomic_impl<long, std::__cxx_atomic_base_impl<long>> {
        _Atomic long long __a_value;
    } __a_;
};

struct atomic<std::__thread_id> {
    struct __cxx_atomic_impl<std::__thread_id, std::__cxx_atomic_base_impl<std::__thread_id>> {
        _Atomic struct __thread_id __a_value;
    } __a_;
};

struct atomic<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>> {
    struct __cxx_atomic_impl<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>, std::__cxx_atomic_base_impl<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>>> {
        _Atomic struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> __a_value;
    } __a_;
};

struct atomic<unsigned int> {
    struct __cxx_atomic_impl<unsigned int, std::__cxx_atomic_base_impl<unsigned int>> {
        _Atomic unsigned int __a_value;
    } __a_;
};

struct atomic<unsigned long long> {
    struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct atomic<unsigned long> {
    struct __cxx_atomic_impl<unsigned long, std::__cxx_atomic_base_impl<unsigned long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct atomic_flag {
    struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> __a_;
};

struct basic_once_flag<folly::SharedMutexImpl<false>, std::atomic> {
    struct atomic<bool> called_;
    struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> mutex_;
};

struct basic_ostream<char, std::__1::char_traits<char>>;

struct basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    CDUnknownFunctionPointerType *_field1;
    struct basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    CDUnknownFunctionPointerType *_field3;
    unsigned int _field4;
    long long _field5;
    long long _field6;
    unsigned int _field7;
    unsigned int _field8;
    void *_field9;
    void *_field10;
    CDUnknownFunctionPointerType *_field11;
    int *_field12;
    unsigned long long _field13;
    unsigned long long _field14;
    long long *_field15;
    unsigned long long _field16;
    unsigned long long _field17;
    void **_field18;
    unsigned long long _field19;
    unsigned long long _field20;
    struct basic_ostream<char, std::__1::char_traits<char>> *_field21;
    int _field22;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep __value_;
    } __r_;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep __value_;
    } __r_;
};

struct basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    CDUnknownFunctionPointerType *_field1;
    struct locale _field2;
    char *_field3;
    char *_field4;
    char *_field5;
    char *_field6;
    char *_field7;
    char *_field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
    char *_field10;
    unsigned int _field11;
};

struct bloks_bool {
    int _field1;
};

struct bloks_element_id {
    int _field1;
};

struct bloks_float {
    int _field1;
};

struct bloks_int {
    int _field1;
};

struct bloks_long {
    int _field1;
};

struct bloks_opaque_native_object {
    int _field1;
};

struct bloks_primitive_plural {
    int _field1;
};

struct bloks_string {
    int _field1;
};

struct bloks_template {
    int _field1;
};

struct bloks_template_plural {
    int _field1;
};

struct bloks_template_plural_blocklisted {
    int _field1;
};

struct circular_buffer<IGGyroSample, std::allocator<IGGyroSample>> {
    struct IGGyroSample *m_buff;
    struct IGGyroSample *m_end;
    struct IGGyroSample *m_first;
    struct IGGyroSample *m_last;
    unsigned long long m_size;
};

struct condition_variable {
    struct _opaque_pthread_cond_t {
        long long _field1;
        char _field2[40];
    } _field1;
};

struct default_header_holder<boost::intrusive::list_node_traits<void *>> {
    void *next_;
    void *prev_;
};

struct default_initialized_primitive<bool, false> {
    _Bool value_;
};

struct default_initialized_primitive<bool, true> {
    _Bool value_;
};

struct default_initialized_primitive<unsigned int, 0> {
    unsigned int value_;
};

struct deque<CKComponentContextStackItem, std::allocator<CKComponentContextStackItem>> {
    struct __split_buffer<CKComponentContextStackItem *, std::allocator<CKComponentContextStackItem *>> {
        struct CKComponentContextStackItem **__first_;
        struct CKComponentContextStackItem **__begin_;
        struct CKComponentContextStackItem **__end_;
        struct __compressed_pair<CKComponentContextStackItem **, std::allocator<CKComponentContextStackItem *>> {
            struct CKComponentContextStackItem **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<CKComponentContextStackItem>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<FNFFrameBufferDataInternal, std::allocator<FNFFrameBufferDataInternal>> {
    struct __split_buffer<FNFFrameBufferDataInternal *, std::allocator<FNFFrameBufferDataInternal *>> {
        struct FNFFrameBufferDataInternal **__first_;
        struct FNFFrameBufferDataInternal **__begin_;
        struct FNFFrameBufferDataInternal **__end_;
        struct __compressed_pair<FNFFrameBufferDataInternal **, std::allocator<FNFFrameBufferDataInternal *>> {
            struct FNFFrameBufferDataInternal **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<FNFFrameBufferDataInternal>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<facebook::abr::WeightedMeanBandwidthEstimator::Sample, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample>> {
    struct __split_buffer<facebook::abr::WeightedMeanBandwidthEstimator::Sample *, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample *>> {
        struct Sample **__first_;
        struct Sample **__begin_;
        struct Sample **__end_;
        struct __compressed_pair<facebook::abr::WeightedMeanBandwidthEstimator::Sample **, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample *>> {
            struct Sample **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<opaqueCMSampleBuffer *, std::allocator<opaqueCMSampleBuffer *>> {
    struct __split_buffer<opaqueCMSampleBuffer **, std::allocator<opaqueCMSampleBuffer **>> {
        struct opaqueCMSampleBuffer ***__first_;
        struct opaqueCMSampleBuffer ***__begin_;
        struct opaqueCMSampleBuffer ***__end_;
        struct __compressed_pair<opaqueCMSampleBuffer ***, std::allocator<opaqueCMSampleBuffer **>> {
            struct opaqueCMSampleBuffer ***__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<opaqueCMSampleBuffer *>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>>> {
    struct __split_buffer<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>*, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>**, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<void (^)(void (^)()), std::allocator<void (^)(void (^)())>> {
    struct __split_buffer<void (^__strong *)(void (^)()), std::allocator<void (^__strong *)(void (^)())>> {
        CDUnknownBlockType **__first_;
        CDUnknownBlockType **__begin_;
        CDUnknownBlockType **__end_;
        struct __compressed_pair<void (^__strong **)(void (^)()), std::allocator<void (^__strong *)(void (^)())>> {
            CDUnknownBlockType **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<void (^)(void (^)())>> {
        unsigned long long __value_;
    } __size_;
};

struct duration<double, std::ratio<1, 1>> {
    double __rep_;
};

struct duration<long long, std::ratio<1, 1000000000>> {
    long long __rep_;
};

struct duration<long long, std::ratio<1, 1000000>> {
    long long __rep_;
};

struct duration<long long, std::ratio<1, 1000>> {
    long long __rep_;
};

struct duration<long long, std::ratio<1, 1>> {
    long long __rep_;
};

struct error_category;

struct error_code {
    int _field1;
    struct error_category *_field2;
};

struct final {
    _Bool enableMicInPreview;
    _Bool startOutputOnStartInput;
    _Bool startOutputOnSubgraphInsert;
    _Bool enableSetAudioMixing;
    _Bool enableFBAAllowSpeakerDuringRecording;
    _Bool enableFBAShouldPauseBackgroundWhenApplyingEffect;
    _Bool enablePushGraph;
    _Bool isUsingCameraAudioManager;
    _Bool isAudioPipelineStateMachineEnabled;
    _Bool shouldConfigureStereoCapture;
};

struct float4x4 {
    MISSING_TYPE *columns[4];
};

struct function<StitchRepInfo (id<FNFDashRepresentable>)> {
    struct __value_func<StitchRepInfo (id<FNFDashRepresentable>)> {
        struct type _field1;
        void *_field2;
    } _field1;
};

struct function<long long (long long)> {
    struct __value_func<long long (long long)> {
        struct type _field1;
        void *_field2;
    } _field1;
};

struct function<long long (long long, int)> {
    struct __value_func<long long (long long, int)> {
        struct type _field1;
        void *_field2;
    } _field1;
};

struct function<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>()> {
    struct __value_func<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>()> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct future<std::vector<facebook::artech::anchorservice::datawrappers::HitTestResultData>> {
    void *_field1;
};

struct greater<long long>;

struct instrumentation {
    id _field1;
    id _field2;
    _Bool _field3;
    id _field4;
};

struct list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> {
    struct data_t {
        struct root_plus_size {
            struct default_header_holder<boost::intrusive::list_node_traits<void *>> m_header;
        } root_plus_size_;
    } data_;
};

struct list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>, void, void, void> {
    struct data_t {
        struct root_plus_size {
            unsigned long long size_;
            struct default_header_holder<boost::intrusive::list_node_traits<void *>> m_header;
        } root_plus_size_;
    } data_;
};

struct list<std::shared_ptr<POPAnimatorItem>, std::allocator<std::shared_ptr<POPAnimatorItem>>> {
    struct __list_node_base<std::shared_ptr<POPAnimatorItem>, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<std::shared_ptr<POPAnimatorItem>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct locale {
    struct __imp *_field1;
};

struct map<CALayer<KFCALayerProtocol>*__weak, CALayer<KFCALayerProtocol>*__weak, std::less<CALayer<KFCALayerProtocol>*__weak>, std::allocator<std::pair<CALayer<KFCALayerProtocol>*const __weak, CALayer<KFCALayerProtocol>*__weak>>> {
    struct __tree<std::__value_type<CALayer<KFCALayerProtocol>*__weak, CALayer<KFCALayerProtocol>*__weak>, std::__map_value_compare<CALayer<KFCALayerProtocol>*__weak, std::__value_type<CALayer<KFCALayerProtocol>*__weak, CALayer<KFCALayerProtocol>*__weak>, std::less<CALayer<KFCALayerProtocol>*__weak>, true>, std::allocator<std::__value_type<CALayer<KFCALayerProtocol>*__weak, CALayer<KFCALayerProtocol>*__weak>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<CALayer<KFCALayerProtocol>*__weak, CALayer<KFCALayerProtocol>*__weak>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<CALayer<KFCALayerProtocol>*__weak, std::__value_type<CALayer<KFCALayerProtocol>*__weak, CALayer<KFCALayerProtocol>*__weak>, std::less<CALayer<KFCALayerProtocol>*__weak>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<FBDataSegment, NSData *, cmpOfDataSegment, std::allocator<std::pair<const FBDataSegment, NSData *>>> {
    struct __tree<std::__value_type<FBDataSegment, NSData *>, std::__map_value_compare<FBDataSegment, std::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::allocator<std::__value_type<FBDataSegment, NSData *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<FBDataSegment, NSData *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<FBDataSegment, std::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<NSObject *, FBCacheOwnedObject, std::less<NSObject *>, std::allocator<std::pair<NSObject *const, FBCacheOwnedObject>>> {
    struct __tree<std::__value_type<NSObject *, FBCacheOwnedObject>, std::__map_value_compare<NSObject *, std::__value_type<NSObject *, FBCacheOwnedObject>, std::less<NSObject *>, true>, std::allocator<std::__value_type<NSObject *, FBCacheOwnedObject>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<NSObject *, FBCacheOwnedObject>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<NSObject *, std::__value_type<NSObject *, FBCacheOwnedObject>, std::less<NSObject *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<NSString *, UniformBufferValue, std::less<NSString *>, std::allocator<std::pair<NSString *const, UniformBufferValue>>> {
    struct __tree<std::__value_type<NSString *, UniformBufferValue>, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>, true>, std::allocator<std::__value_type<NSString *, UniformBufferValue>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<NSString *, UniformBufferValue>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<const facebook::keyframes::Document *, unsigned short, std::less<const facebook::keyframes::Document *>, std::allocator<std::pair<const facebook::keyframes::Document *const, unsigned short>>> {
    struct __tree<std::__value_type<const facebook::keyframes::Document *, unsigned short>, std::__map_value_compare<const facebook::keyframes::Document *, std::__value_type<const facebook::keyframes::Document *, unsigned short>, std::less<const facebook::keyframes::Document *>, true>, std::allocator<std::__value_type<const facebook::keyframes::Document *, unsigned short>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<const facebook::keyframes::Document *, unsigned short>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<const facebook::keyframes::Document *, std::__value_type<const facebook::keyframes::Document *, unsigned short>, std::less<const facebook::keyframes::Document *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<const facebook::keyframes::Layer *, unsigned short, std::less<const facebook::keyframes::Layer *>, std::allocator<std::pair<const facebook::keyframes::Layer *const, unsigned short>>> {
    struct __tree<std::__value_type<const facebook::keyframes::Layer *, unsigned short>, std::__map_value_compare<const facebook::keyframes::Layer *, std::__value_type<const facebook::keyframes::Layer *, unsigned short>, std::less<const facebook::keyframes::Layer *>, true>, std::allocator<std::__value_type<const facebook::keyframes::Layer *, unsigned short>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<const facebook::keyframes::Layer *, unsigned short>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<const facebook::keyframes::Layer *, std::__value_type<const facebook::keyframes::Layer *, unsigned short>, std::less<const facebook::keyframes::Layer *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<double, boost::qvm::quat<double>, std::less<double>, std::allocator<std::pair<const double, boost::qvm::quat<double>>>> {
    struct __tree<std::__value_type<double, boost::qvm::quat<double>>, std::__map_value_compare<double, std::__value_type<double, boost::qvm::quat<double>>, std::less<double>, true>, std::allocator<std::__value_type<double, boost::qvm::quat<double>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<double, boost::qvm::quat<double>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<double, std::__value_type<double, boost::qvm::quat<double>>, std::less<double>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, IGRegion, std::less<int>, std::allocator<std::pair<const int, IGRegion>>> {
    struct __tree<std::__value_type<int, IGRegion>, std::__map_value_compare<int, std::__value_type<int, IGRegion>, std::less<int>, true>, std::allocator<std::__value_type<int, IGRegion>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, IGRegion>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, IGRegion>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, const kf3::facebook::keyframes::Layer *, std::less<int>, std::allocator<std::pair<const int, const kf3::facebook::keyframes::Layer *>>> {
    struct __tree<std::__value_type<int, const kf3::facebook::keyframes::Layer *>, std::__map_value_compare<int, std::__value_type<int, const kf3::facebook::keyframes::Layer *>, std::less<int>, true>, std::allocator<std::__value_type<int, const kf3::facebook::keyframes::Layer *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, const kf3::facebook::keyframes::Layer *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, const kf3::facebook::keyframes::Layer *>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, facebook::keyframes::Layer *, std::less<int>, std::allocator<std::pair<const int, facebook::keyframes::Layer *>>> {
    struct __tree<std::__value_type<int, facebook::keyframes::Layer *>, std::__map_value_compare<int, std::__value_type<int, facebook::keyframes::Layer *>, std::less<int>, true>, std::allocator<std::__value_type<int, facebook::keyframes::Layer *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, facebook::keyframes::Layer *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, facebook::keyframes::Layer *>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<proxygen::TraceFieldType, proxygen::TraceEvent::MetaData, std::less<proxygen::TraceFieldType>, std::allocator<std::pair<const proxygen::TraceFieldType, proxygen::TraceEvent::MetaData>>> {
    struct __tree<std::__value_type<proxygen::TraceFieldType, proxygen::TraceEvent::MetaData>, std::__map_value_compare<proxygen::TraceFieldType, std::__value_type<proxygen::TraceFieldType, proxygen::TraceEvent::MetaData>, std::less<proxygen::TraceFieldType>, true>, std::allocator<std::__value_type<proxygen::TraceFieldType, proxygen::TraceEvent::MetaData>>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<proxygen::TraceFieldType, proxygen::TraceEvent::MetaData>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__map_value_compare<proxygen::TraceFieldType, std::__value_type<proxygen::TraceFieldType, proxygen::TraceEvent::MetaData>, std::less<proxygen::TraceFieldType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::string, FBAnalyticsRequestHandlers, std::less<std::string>, std::allocator<std::pair<const std::string, FBAnalyticsRequestHandlers>>> {
    struct __tree<std::__value_type<std::string, FBAnalyticsRequestHandlers>, std::__map_value_compare<std::string, std::__value_type<std::string, FBAnalyticsRequestHandlers>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, FBAnalyticsRequestHandlers>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, FBAnalyticsRequestHandlers>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, FBAnalyticsRequestHandlers>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::shared_ptr<igl::ITexture>, std::less<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<igl::ITexture>>>> {
    struct __tree<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __tree<std::__value_type<std::string, std::string>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string>>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, opaqueCMSampleBuffer *, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, opaqueCMSampleBuffer *>>> {
    struct __tree<std::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::less<unsigned long long>, true>, std::allocator<std::__value_type<unsigned long long, opaqueCMSampleBuffer *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long long, opaqueCMSampleBuffer *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::less<unsigned long long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned long, std::shared_ptr<igl::IRenderPipelineState>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::shared_ptr<igl::IRenderPipelineState>>>> {
    struct __tree<std::__value_type<unsigned long, std::shared_ptr<igl::IRenderPipelineState>>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<igl::IRenderPipelineState>>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, std::shared_ptr<igl::IRenderPipelineState>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, std::shared_ptr<igl::IRenderPipelineState>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<igl::IRenderPipelineState>>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>>> {
    struct __tree<std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mat<2, 2, float, glm::packed_highp> {
    struct vec<2, float, glm::packed_highp> value[2];
};

struct mat<4, 4, float, glm::packed_highp> {
    struct vec<4, float, glm::packed_highp> value[4];
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct opaqueCMSampleBuffer;

struct optional<facebook::logginginfra::privacy::Product> {
    CDUnion_7e831cd3 _field1;
    _Bool _field2;
};

struct pair<BKModel *, NSDictionary<NSString *, id>*> {
    id _field1;
    id _field2;
};

struct pair<FBMPVideoData *, FBMPDataMetadata> {
    FBMPVideoData *first;
    struct FBMPDataMetadata second;
};

struct pair<id<FBMPInput>, id<FBMPOutput>> {
    id _field1;
    id _field2;
};

struct pair<std::vector<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>>, bool> {
    struct vector<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>, std::allocator<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>>> _field1;
    _Bool _field2;
};

struct path {
    basic_string_0ec669f3 _field1;
};

struct plain_array<float, 16, 0, 16> {
    float _field1[16];
};

struct priority_queue<long long, std::vector<long long>, std::greater<long long>> {
    struct vector<long long, std::allocator<long long>> c;
    struct greater<long long> comp;
};

struct promise<std::string> {
    void *__state_;
};

struct quat<double> {
    double _field1[4];
};

struct queue<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>, std::deque<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>>> {
    struct deque<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, bool, std::vector<unsigned char>>>> c;
};

struct queue<void (^)(void (^)()), std::deque<void (^)(void (^)())>> {
    struct deque<void (^)(void (^)()), std::allocator<void (^)(void (^)())>> c;
};

struct recursive_mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct set<std::pair<double, std::string>, std::less<std::pair<double, std::string>>, std::allocator<std::pair<double, std::string>>> {
    struct __tree<std::pair<double, std::string>, std::less<std::pair<double, std::string>>, std::allocator<std::pair<double, std::string>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::pair<double, std::string>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<std::pair<double, std::string>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<std::pair<long, long>, std::less<std::pair<long, long>>, std::allocator<std::pair<long, long>>> {
    struct __tree<std::pair<long, long>, std::less<std::pair<long, long>>, std::allocator<std::pair<long, long>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::pair<long, long>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<std::pair<long, long>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<stitchConstraintManager::ConstraintReason, std::less<stitchConstraintManager::ConstraintReason>, std::allocator<stitchConstraintManager::ConstraintReason>> {
    struct __tree<stitchConstraintManager::ConstraintReason, std::less<stitchConstraintManager::ConstraintReason>, std::allocator<stitchConstraintManager::ConstraintReason>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<stitchConstraintManager::ConstraintReason, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::less<stitchConstraintManager::ConstraintReason>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_future<int> {
    void *_field1;
};

struct shared_future<std::shared_ptr<msqrd::services::music::IMusicItem>> {
    void *_field1;
};

struct shared_future<std::string> {
    void *_field1;
};

struct shared_ptr<CK::Component::ViewManager> {
    struct ViewManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<FBLoomConfigurationManager> {
    struct FBLoomConfigurationManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBLoomOrchestrator> {
    struct FBLoomOrchestrator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBLoomTraceControlling> {
    struct FBLoomTraceControlling *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<FBMQTTChannelConnectEventObserver> {
    struct FBMQTTChannelConnectEventObserver *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBMQTTChannelConnectionStateObserver> {
    struct FBMQTTChannelConnectionStateObserver *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBMQTTChannelEventLogger> {
    struct FBMQTTChannelEventLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBMQTTChannelPublishEventObserver> {
    struct FBMQTTChannelPublishEventObserver *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBMQTTChannelSubscribeEventObserver> {
    struct FBMQTTChannelSubscribeEventObserver *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBMobileConfigManagerChangeListenerWrapper> {
    struct FBMobileConfigManagerChangeListenerWrapper *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FBQPLLoggingPolicyConfig> {
    struct FBQPLLoggingPolicyConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<IGLoomUploadNetworkSource> {
    struct IGLoomUploadNetworkSource *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<POPAnimatorItem> {
    struct POPAnimatorItem *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<RCLayoutCache> {
    struct RCLayoutCache *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<SoundtrackComposition::Context> {
    struct Context *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<SoundtrackFileManager::Context> {
    struct Context *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<SoundtrackPlayer::Context> {
    struct Context *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<arfx::analytics::functional_correctness::IQPLUserFlow> {
    struct IQPLUserFlow *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<arfx::analytics::functional_correctness::QPLUserFlow> {
    struct QPLUserFlow *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::analytics::session_waterfall::SessionWaterfallLogger> {
    struct SessionWaterfallLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::delivery::ARDWriteThroughShaderAssetProvider> {
    struct ARDWriteThroughShaderAssetProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::delivery::IAssetsManager> {
    struct IAssetsManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::delivery::IAsyncAssetFetcher> {
    struct IAsyncAssetFetcher *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::delivery::IAsyncAssetMetadataDownloading> {
    struct IAsyncAssetMetadataDownloading *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::delivery::IEffectsManager> {
    struct IEffectsManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::delivery::IModelManager> {
    struct IModelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<arfx::delivery::ModelPaths> {
    struct ModelPaths *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<bool> {
    _Bool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const CKViewConfiguration::Repr> {
    struct Repr *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const facebook::graphql::parsing::GraphStoreGraphQLFactory> {
    struct GraphStoreGraphQLFactory *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const facebook::mobile::graphstore::Record> {
    struct Record *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const msqrd::attribution::EffectAttribution> {
    struct EffectAttribution *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const msqrd::manifest::Manifest> {
    struct Manifest *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const msqrd::versioning::Version> {
    struct Version *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const pando::Node> {
    struct Node *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::unordered_map<CKComponentViewAttribute, CKBoxedValue>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<NSString *>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<RCLayoutChild>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<__weak id>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arengine::utils::EffectAssetLoader> {
    struct EffectAssetLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arengineservices::ScriptLogger> {
    struct ScriptLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arengineservices::ShaderLogger> {
    struct ShaderLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arfx::recognizer::RecognitionCoordinator> {
    struct RecognitionCoordinator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arfx::recognizer::VideoBufferInputProvider> {
    struct VideoBufferInputProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arservices::apple::AudioPlatformComponentHostImpl> {
    struct AudioPlatformComponentHostImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arservices::apple::CaptureEventInput> {
    struct CaptureEventInput *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arservices::apple::GestureEventServiceCreator> {
    struct GestureEventServiceCreator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arservices::apple::PlatformAlgorithmDataSource> {
    struct PlatformAlgorithmDataSource *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::audio::IAudioGraphClient> {
    struct IAudioGraphClient *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::audiofiltercore::FBAudioFileReader<short>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::bufferpool::BufferPool> {
    struct BufferPool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cameracore::arclass::ARClassContext> {
    struct ARClassContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::shortstab::Stabilizer> {
    struct Stabilizer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::shortstab::StabilizerResult> {
    struct StabilizerResult *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::shortstab::StabilizerSettings> {
    struct StabilizerSettings *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::graphql::GraphQLAssetFactory> {
    struct GraphQLAssetFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::graphql::GraphQLMetadataAssetLoader> {
    struct GraphQLMetadataAssetLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::graphql::GraphQLQuery> {
    struct GraphQLQuery *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::graphql::GraphQLService> {
    struct GraphQLService *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::graphql::parsing::GraphStoreGraphQLFactory> {
    struct GraphStoreGraphQLFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::FBSSLKeyMaterialListenerAbstractLogger> {
    struct FBSSLKeyMaterialListenerAbstractLogger *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::mobile::graphstore::NodeFactory> {
    struct NodeFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::graphstore::ServiceToken> {
    struct ServiceToken *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::graphstore::TreeShape::Field> {
    struct Field *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::mobile::graphstore::TreeShape::Resolver> {
    struct Resolver *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::graphstore::detail::FBTreeImpl> {
    struct FBTreeImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::xplat::executor::InlineSerialExecutor> {
    struct InlineSerialExecutor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::xplat::executor::SerialAsyncExecutorFactory> {
    struct SerialAsyncExecutorFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::xplat::executor::SerialDispatchQueueExecutor> {
    struct SerialDispatchQueueExecutor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mqttchannel::DefaultConnectScheduler::Analytics> {
    struct Analytics *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mqttchannel::MQTTChannelAnalytics> {
    struct MQTTChannelAnalytics *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mqttchannel::MQTTChannelCoordinatorProxy> {
    struct MQTTChannelCoordinatorProxy *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mqttchannel::WhistleConnectionFactory> {
    struct WhistleConnectionFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::perflogger::QPLBase> {
    struct QPLBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::pointtools::PointCloud<facebook::pointtools::Point3<float>>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::stash::Stash> {
    struct Stash *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::stash::StashFile> {
    struct StashFile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::stash::StashManager> {
    struct StashManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::stash::StashSQLite> {
    struct StashSQLite *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::structuredlogger::IStructuredLogger> {
    struct IStructuredLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::tigon::TigonService> {
    struct TigonService *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::tigon::TigonTailingFileBodyProviderReaderHandle> {
    struct TigonTailingFileBodyProviderReaderHandle *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<folly::EventBaseObserver> {
    struct EventBaseObserver *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IBuffer> {
    struct IBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::ICommandBuffer> {
    struct ICommandBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::ICommandQueue> {
    struct ICommandQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IDepthStencilState> {
    struct IDepthStencilState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IDevice> {
    struct IDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IFramebuffer> {
    struct IFramebuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IRenderCommandEncoder> {
    struct IRenderCommandEncoder *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IRenderPipelineState> {
    struct IRenderPipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<igl::ISamplerState> {
    struct ISamplerState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IShaderModule> {
    struct IShaderModule *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::ITexture> {
    struct ITexture *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IVertexInputState> {
    struct IVertexInputState *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::metal::Framebuffer> {
    struct Framebuffer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<igl::metal::ios::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::opengl::Framebuffer> {
    struct Framebuffer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<igl::opengl::IContext> {
    struct IContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::ManagedUniformBuffer> {
    struct ManagedUniformBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::drawable::Drawable> {
    struct Drawable *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::filterkit::IFilter> {
    struct IFilter *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::filterkit::IFilterDescriptor> {
    struct IFilterDescriptor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::filterkit::IFilterFactory> {
    struct IFilterFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::filters::filter_chain::FilterChain> {
    struct FilterChain *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::material::Material> {
    struct Material *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::resourceloader::IResourceLoader> {
    struct IResourceLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::resourceloader::ResourcePool> {
    struct ResourcePool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::resourceloader::ios::ResourceLoader> {
    struct ResourceLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<iglu::vertexdata::DynamicVertexData> {
    struct DynamicVertexData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mins::FunctionCode> {
    struct FunctionCode *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mobileconfig::FBMobileConfigContextV2> {
    struct FBMobileConfigContextV2 *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mobileconfig::FBMobileConfigManager> {
    struct FBMobileConfigManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mobileconfig::FBMobileConfigOverridesTable> {
    struct FBMobileConfigOverridesTable *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<mobileconfig::FBMobileConfigValueStore> {
    struct FBMobileConfigValueStore *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::analytics::IEngineAnalyticsLogger> {
    struct IEngineAnalyticsLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::asset::IAsyncAssetLoader> {
    struct IAsyncAssetLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::capture::ICaptureEventInput> {
    struct ICaptureEventInput *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::dataprovider::GestureEvent> {
    struct GestureEvent *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::dataprovider::IVideoDataProvider> {
    struct IVideoDataProvider *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::dataprovider::VideoDataProvider> {
    struct VideoDataProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::dataprovider::platform_events::PlatformEventsInput> {
    struct PlatformEventsInput *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::experiment::IExperimentConfig> {
    struct IExperimentConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::fx::IAssetLoader> {
    struct IAssetLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::fx::ISubEffectDocumentFactory> {
    struct ISubEffectDocumentFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::fx::IViewport> {
    struct IViewport *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::fx::RenderSession> {
    struct RenderSession *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::fx::model::Document> {
    struct Document *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::fx::model::DocumentEventsSubscribable> {
    struct DocumentEventsSubscribable *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::fx::model::visual_programming::IComponentSyncListener> {
    struct IComponentSyncListener *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::location::LocationDataProvider> {
    struct LocationDataProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::logging::IBugReportLogger> {
    struct IBugReportLogger *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::logging::IRawEventLogger> {
    struct IRawEventLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::motion::MotionDataProvider> {
    struct MotionDataProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::platform::IScriptingLogger> {
    struct IScriptingLogger *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::platform::IShaderLogger> {
    struct IShaderLogger *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::plugins::BasePluginConfiguration> {
    struct BasePluginConfiguration *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::renderer::IRenderTarget> {
    struct IRenderTarget *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::renderer::texture::platform::PlatformTexture> {
    struct PlatformTexture *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::service_utils::ARNetworkDomainWhitelist> {
    struct ARNetworkDomainWhitelist *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::IFaceTrackingDataProvider>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::IFrameBrightnessDataProvider>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::IOpticalFlowDataProvider>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::BufferUpdatableDataProviderCreator<msqrd::dataprovider::ITargetTrackingDataProvider>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::DataProviderCreator<msqrd::dataprovider::IMotionDataProvider>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::DataProviderCreator<msqrd::dataprovider::ITouchGesturesDataProvider>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::EffectController> {
    struct EffectController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::IEffectSessionListener> {
    struct IEffectSessionListener *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IDeepLinkAssetProvider>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IHapticService>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IIdentityService>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IInterEffectLinkingService>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::ILiveStreamingService>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::ServiceCreator<msqrd::services::IScriptAnalyticsService>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::ServiceHost> {
    struct ServiceHost *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::servicehost::UpdatableDataProviderCreator<msqrd::services::IVideoDataService>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::EffectDataSnapshot> {
    struct EffectDataSnapshot *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::IServiceAnalyticsLogger> {
    struct IServiceAnalyticsLogger *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::services::IServiceConfiguration> {
    struct IServiceConfiguration *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::services::IServiceMessage> {
    struct IServiceMessage *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::audio::IAudioFileSink> {
    struct IAudioFileSink *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::audio::IAudioPlatformComponentHost> {
    struct IAudioPlatformComponentHost *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::services::audio::IAudioServiceConfigurationAnnouncer> {
    struct IAudioServiceConfigurationAnnouncer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::audio::IAudioServiceController> {
    struct IAudioServiceController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::audio::IMicrophoneSink> {
    struct IMicrophoneSink *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::feedback::ServiceFeedbackGenerator> {
    struct ServiceFeedbackGenerator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::network::INetworkClientSource> {
    struct INetworkClientSource *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::network::INetworkConsentManager> {
    struct INetworkConsentManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::persistence::IPersistenceServiceDelegate> {
    struct IPersistenceServiceDelegate *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<msqrd::services::platformalgorithmdata::IPlatformAlgorithmDataSource> {
    struct IPlatformAlgorithmDataSource *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<msqrd::touch::TouchGesturesDataProvider> {
    struct TouchGesturesDataProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<pando::Tree> {
    struct Tree *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<pando::consistency::Service::Update> {
    struct Update *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<pando::consistency::Service> {
    struct Service *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<pando::graphql::Service<pando::data::GraphQLRequest>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::vector<facebook::artech::anchorservice::datawrappers::ARPlaneTrackableData>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::vector<facebook::artech::anchorservice::datawrappers::ARPointTrackableData>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::vector<float>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::vector<std::weak_ptr<msqrd::dataprovider::ILocationUpdateListener>>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::vector<unsigned char>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::vector<unsigned long long>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ref<arfx::analytics::functional_correctness::IQPLUserFlow> {
    struct shared_ptr<arfx::analytics::functional_correctness::IQPLUserFlow> _field1;
};

struct shared_ref<arfx::analytics::session_waterfall::SessionWaterfallLogger> {
    struct shared_ptr<arfx::analytics::session_waterfall::SessionWaterfallLogger> _field1;
};

struct shared_ref<arfx::delivery::IEffectsManager> {
    shared_ptr_c5b1d1e2 _field1;
};

struct shared_ref<const msqrd::manifest::Manifest> {
    shared_ptr_8f3f58d1 _field1;
};

struct shared_ref<facebook::bufferpool::BufferPool> {
    struct shared_ptr<facebook::bufferpool::BufferPool> _field1;
};

struct shared_ref<facebook::cameracore::arclass::ARClassContext> {
    struct shared_ptr<facebook::cameracore::arclass::ARClassContext> _field1;
};

struct shared_ref<msqrd::analytics::IEngineAnalyticsLogger> {
    struct shared_ptr<msqrd::analytics::IEngineAnalyticsLogger> _field1;
};

struct shared_ref<msqrd::dataprovider::platform_events::PlatformEventsInput> {
    struct shared_ptr<msqrd::dataprovider::platform_events::PlatformEventsInput> _field1;
};

struct shared_ref<msqrd::experiment::IExperimentConfig> {
    struct shared_ptr<msqrd::experiment::IExperimentConfig> _field1;
};

struct shared_ref<msqrd::fx::IViewport> {
    shared_ptr_28782c24 _field1;
};

struct shared_ref<msqrd::logging::IBugReportLogger> {
    struct shared_ptr<msqrd::logging::IBugReportLogger> _field1;
};

struct shared_ref<msqrd::logging::IRawEventLogger> {
    shared_ptr_614878a6 target_;
};

struct shared_ref<msqrd::plugins::BasePluginConfiguration> {
    struct shared_ptr<msqrd::plugins::BasePluginConfiguration> _field1;
};

struct shared_ref<msqrd::service_utils::ARNetworkDomainWhitelist> {
    struct shared_ptr<msqrd::service_utils::ARNetworkDomainWhitelist> _field1;
};

struct shared_ref<msqrd::servicehost::EffectController> {
    struct shared_ptr<msqrd::servicehost::EffectController> _field1;
};

struct shared_ref<msqrd::servicehost::IEffectSessionListener> {
    struct shared_ptr<msqrd::servicehost::IEffectSessionListener> _field1;
};

struct shared_ref<msqrd::servicehost::ServiceHost> {
    shared_ptr_ad266505 _field1;
};

struct shared_ref<msqrd::services::IServiceAnalyticsLogger> {
    struct shared_ptr<msqrd::services::IServiceAnalyticsLogger> _field1;
};

struct shared_ref<msqrd::services::audio::IAudioPlatformComponentHost> {
    shared_ptr_27fa6347 _field1;
};

struct shared_ref<msqrd::services::network::INetworkClientSource> {
    struct shared_ptr<msqrd::services::network::INetworkClientSource> _field1;
};

struct shared_timed_mutex {
    struct __shared_mutex_base {
        struct mutex _field1;
        struct condition_variable _field2;
        struct condition_variable _field3;
        unsigned int _field4;
    } _field1;
};

struct sockaddr_storage {
    unsigned char ss_len;
    unsigned char ss_family;
    char __ss_pad1[6];
    long long __ss_align;
    char __ss_pad2[112];
};

struct stack<CKComponentContextStackItem, std::deque<CKComponentContextStackItem>> {
    struct deque<CKComponentContextStackItem, std::allocator<CKComponentContextStackItem>> c;
};

struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> {
    struct duration<long long, std::ratio<1, 1000000000>> __d_;
};

struct type {
    unsigned char __lx[24];
};

struct unique_ptr<(anonymous namespace)::DestructionGuardAdapter, std::default_delete<(anonymous namespace)::DestructionGuardAdapter>> {
    struct __compressed_pair<(anonymous namespace)::DestructionGuardAdapter *, std::default_delete<(anonymous namespace)::DestructionGuardAdapter>> {
        struct DestructionGuardAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::IGAudioEffectAudioPostProcessorOutputCallback, std::default_delete<(anonymous namespace)::IGAudioEffectAudioPostProcessorOutputCallback>> {
    struct __compressed_pair<(anonymous namespace)::IGAudioEffectAudioPostProcessorOutputCallback *, std::default_delete<(anonymous namespace)::IGAudioEffectAudioPostProcessorOutputCallback>> {
        struct IGAudioEffectAudioPostProcessorOutputCallback *__value_;
    } __ptr_;
};

struct unique_ptr<AutoreleaseLoopCallback, std::default_delete<AutoreleaseLoopCallback>> {
    struct __compressed_pair<AutoreleaseLoopCallback *, std::default_delete<AutoreleaseLoopCallback>> {
        struct AutoreleaseLoopCallback *__value_;
    } __ptr_;
};

struct unique_ptr<CKMountInfo, std::default_delete<CKMountInfo>> {
    struct __compressed_pair<CKMountInfo *, std::default_delete<CKMountInfo>> {
        struct CKMountInfo *__value_;
    } __ptr_;
};

struct unique_ptr<FBWhistleConnectionStatsLogger, std::default_delete<FBWhistleConnectionStatsLogger>> {
    struct __compressed_pair<FBWhistleConnectionStatsLogger *, std::default_delete<FBWhistleConnectionStatsLogger>> {
        struct FBWhistleConnectionStatsLogger *__value_;
    } __ptr_;
};

struct unique_ptr<IgTigonLigerService, std::default_delete<IgTigonLigerService>> {
    struct __compressed_pair<IgTigonLigerService *, std::default_delete<IgTigonLigerService>> {
        struct IgTigonLigerService *__value_;
    } __ptr_;
};

struct unique_ptr<StructuredLogger::TmediaplaybackinitialproductextrasType, std::default_delete<StructuredLogger::TmediaplaybackinitialproductextrasType>> {
    struct __compressed_pair<StructuredLogger::TmediaplaybackinitialproductextrasType *, std::default_delete<StructuredLogger::TmediaplaybackinitialproductextrasType>> {
        struct TmediaplaybackinitialproductextrasType *__value_;
    } __ptr_;
};

struct unique_ptr<StructuredLogger::TmediaplaybackrequiredmetadatapayloadType, std::default_delete<StructuredLogger::TmediaplaybackrequiredmetadatapayloadType>> {
    struct __compressed_pair<StructuredLogger::TmediaplaybackrequiredmetadatapayloadType *, std::default_delete<StructuredLogger::TmediaplaybackrequiredmetadatapayloadType>> {
        struct TmediaplaybackrequiredmetadatapayloadType *__value_;
    } __ptr_;
};

struct unique_ptr<arfx::analytics::onecamera::OneCameraXLogger, std::default_delete<arfx::analytics::onecamera::OneCameraXLogger>> {
    struct __compressed_pair<arfx::analytics::onecamera::OneCameraXLogger *, std::default_delete<arfx::analytics::onecamera::OneCameraXLogger>> {
        struct OneCameraXLogger *__value_;
    } __ptr_;
};

struct unique_ptr<arfx::delivery::ICancelableToken, std::default_delete<arfx::delivery::ICancelableToken>> {
    struct __compressed_pair<arfx::delivery::ICancelableToken *, std::default_delete<arfx::delivery::ICancelableToken>> {
        struct ICancelableToken *__value_;
    } __ptr_;
};

struct unique_ptr<arfx::delivery::IConnectionInfoProvider, std::default_delete<arfx::delivery::IConnectionInfoProvider>> {
    struct __compressed_pair<arfx::delivery::IConnectionInfoProvider *, std::default_delete<arfx::delivery::IConnectionInfoProvider>> {
        struct IConnectionInfoProvider *__value_;
    } __ptr_;
};

struct unique_ptr<cameracore::audiopostprocessor::AudioPostProcessor, std::default_delete<cameracore::audiopostprocessor::AudioPostProcessor>> {
    struct __compressed_pair<cameracore::audiopostprocessor::AudioPostProcessor *, std::default_delete<cameracore::audiopostprocessor::AudioPostProcessor>> {
        struct AudioPostProcessor *__value_;
    } __ptr_;
};

struct unique_ptr<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> {
    struct __compressed_pair<const msqrd::services::IEffectDataSnapshotterCreator *, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> {
        struct IEffectDataSnapshotterCreator *_field1;
    } _field1;
};

struct unique_ptr<const std::unordered_map<unsigned long, IGActiveModuleItem *>, std::default_delete<const std::unordered_map<unsigned long, IGActiveModuleItem *>>> {
    struct __compressed_pair<const std::unordered_map<unsigned long, IGActiveModuleItem *>*, std::default_delete<const std::unordered_map<unsigned long, IGActiveModuleItem *>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::cp::regiontracking::TrackerKCF, std::default_delete<facebook::cp::regiontracking::TrackerKCF>> {
    struct __compressed_pair<facebook::cp::regiontracking::TrackerKCF *, std::default_delete<facebook::cp::regiontracking::TrackerKCF>> {
        struct TrackerKCF *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::i18n::language_packs::LanguagePackReader, std::default_delete<facebook::i18n::language_packs::LanguagePackReader>> {
    struct __compressed_pair<facebook::i18n::language_packs::LanguagePackReader *, std::default_delete<facebook::i18n::language_packs::LanguagePackReader>> {
        struct LanguagePackReader *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper, std::default_delete<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper>> {
    struct __compressed_pair<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper *, std::default_delete<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper>> {
        struct TreeBuilderWrapper *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::tigon::TigonRequestToken, std::default_delete<facebook::tigon::TigonRequestToken>> {
    struct __compressed_pair<facebook::tigon::TigonRequestToken *, std::default_delete<facebook::tigon::TigonRequestToken>> {
        struct TigonRequestToken *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::xplat::bandwidth_estimator::BandwidthEstimator, std::default_delete<facebook::xplat::bandwidth_estimator::BandwidthEstimator>> {
    struct __compressed_pair<facebook::xplat::bandwidth_estimator::BandwidthEstimator *, std::default_delete<facebook::xplat::bandwidth_estimator::BandwidthEstimator>> {
        struct BandwidthEstimator *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::xplat::bandwidth_estimator::EstimationStrategy, std::default_delete<facebook::xplat::bandwidth_estimator::EstimationStrategy>> {
    struct __compressed_pair<facebook::xplat::bandwidth_estimator::EstimationStrategy *, std::default_delete<facebook::xplat::bandwidth_estimator::EstimationStrategy>> {
        struct EstimationStrategy *_field1;
    } _field1;
};

struct unique_ptr<facebook::xplat::request_measurement::RequestMeasurer, std::default_delete<facebook::xplat::request_measurement::RequestMeasurer>> {
    struct __compressed_pair<facebook::xplat::request_measurement::RequestMeasurer *, std::default_delete<facebook::xplat::request_measurement::RequestMeasurer>> {
        struct RequestMeasurer *__value_;
    } __ptr_;
};

struct unique_ptr<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>, std::default_delete<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>>> {
    struct __compressed_pair<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>*, std::default_delete<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<folly::EventBaseBackendBase, std::default_delete<folly::EventBaseBackendBase>> {
    struct __compressed_pair<folly::EventBaseBackendBase *, std::default_delete<folly::EventBaseBackendBase>> {
        struct EventBaseBackendBase *__value_;
    } __ptr_;
};

struct unique_ptr<folly::EvictingCacheMap<std::tuple<unsigned long, unsigned long, unsigned int>, FBCFRefGuard<const void *>, std::hash<std::tuple<unsigned long, unsigned long, unsigned int>>>, std::default_delete<folly::EvictingCacheMap<std::tuple<unsigned long, unsigned long, unsigned int>, FBCFRefGuard<const void *>, std::hash<std::tuple<unsigned long, unsigned long, unsigned int>>>>> {
    struct __compressed_pair<folly::EvictingCacheMap<std::tuple<unsigned long, unsigned long, unsigned int>, FBCFRefGuard<const void *>, std::hash<std::tuple<unsigned long, unsigned long, unsigned int>>>*, std::default_delete<folly::EvictingCacheMap<std::tuple<unsigned long, unsigned long, unsigned int>, FBCFRefGuard<const void *>, std::hash<std::tuple<unsigned long, unsigned long, unsigned int>>>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<folly::HHWheelTimerBase<std::chrono::milliseconds>, folly::DelayedDestruction::Destructor> {
    struct __compressed_pair<folly::HHWheelTimerBase<std::chrono::milliseconds>*, folly::DelayedDestruction::Destructor> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<folly::TimeoutManager::CobTimeouts, std::default_delete<folly::TimeoutManager::CobTimeouts>> {
    struct __compressed_pair<folly::TimeoutManager::CobTimeouts *, std::default_delete<folly::TimeoutManager::CobTimeouts>> {
        struct CobTimeouts *__value_;
    } __ptr_;
};

struct unique_ptr<folly::VirtualEventBase, std::default_delete<folly::VirtualEventBase>> {
    struct __compressed_pair<folly::VirtualEventBase *, std::default_delete<folly::VirtualEventBase>> {
        struct VirtualEventBase *__value_;
    } __ptr_;
};

struct unique_ptr<igl::ITexture, std::default_delete<igl::ITexture>> {
    struct __compressed_pair<igl::ITexture *, std::default_delete<igl::ITexture>> {
        struct ITexture *_field1;
    } _field1;
};

struct unique_ptr<iglu::filtergraph::MeshNode, std::default_delete<iglu::filtergraph::MeshNode>> {
    struct __compressed_pair<iglu::filtergraph::MeshNode *, std::default_delete<iglu::filtergraph::MeshNode>> {
        struct MeshNode *__value_;
    } __ptr_;
};

struct unique_ptr<iglu::renderpass::ForwardRenderPass, std::default_delete<iglu::renderpass::ForwardRenderPass>> {
    struct __compressed_pair<iglu::renderpass::ForwardRenderPass *, std::default_delete<iglu::renderpass::ForwardRenderPass>> {
        struct ForwardRenderPass *__value_;
    } __ptr_;
};

struct unique_ptr<msqrd::events::ISubscription, std::default_delete<msqrd::events::ISubscription>> {
    struct __compressed_pair<msqrd::events::ISubscription *, std::default_delete<msqrd::events::ISubscription>> {
        struct ISubscription *__value_;
    } __ptr_;
};

struct unique_ptr<msqrd::fx::GraphicsEngine, std::default_delete<msqrd::fx::GraphicsEngine>> {
    struct __compressed_pair<msqrd::fx::GraphicsEngine *, std::default_delete<msqrd::fx::GraphicsEngine>> {
        struct GraphicsEngine *__value_;
    } __ptr_;
};

struct unique_ptr<msqrd::logger::AREngineLogger, std::default_delete<msqrd::logger::AREngineLogger>> {
    struct __compressed_pair<msqrd::logger::AREngineLogger *, std::default_delete<msqrd::logger::AREngineLogger>> {
        struct AREngineLogger *__value_;
    } __ptr_;
};

struct unique_ptr<msqrd::logging::SessionInfo, std::default_delete<msqrd::logging::SessionInfo>> {
    struct __compressed_pair<msqrd::logging::SessionInfo *, std::default_delete<msqrd::logging::SessionInfo>> {
        struct SessionInfo *__value_;
    } __ptr_;
};

struct unique_ptr<msqrd::plugins::BasePluginConfiguration, std::default_delete<msqrd::plugins::BasePluginConfiguration>> {
    struct __compressed_pair<msqrd::plugins::BasePluginConfiguration *, std::default_delete<msqrd::plugins::BasePluginConfiguration>> {
        struct BasePluginConfiguration *_field1;
    } _field1;
};

struct unique_ptr<msqrd::services::network::INetworkRequestRedirectHandler, std::default_delete<msqrd::services::network::INetworkRequestRedirectHandler>> {
    struct __compressed_pair<msqrd::services::network::INetworkRequestRedirectHandler *, std::default_delete<msqrd::services::network::INetworkRequestRedirectHandler>> {
        struct INetworkRequestRedirectHandler *__value_;
    } __ptr_;
};

struct unique_ptr<msqrd::services::network::INetworkResult, std::default_delete<msqrd::services::network::INetworkResult>> {
    struct __compressed_pair<msqrd::services::network::INetworkResult *, std::default_delete<msqrd::services::network::INetworkResult>> {
        struct INetworkResult *_field1;
    } _field1;
};

struct unique_ptr<proxygen::battery::RadioStatusObserver, std::default_delete<proxygen::battery::RadioStatusObserver>> {
    struct __compressed_pair<proxygen::battery::RadioStatusObserver *, std::default_delete<proxygen::battery::RadioStatusObserver>> {
        struct RadioStatusObserver *__value_;
    } __ptr_;
};

struct unique_ptr<proxygen::httpclient::CertificatePinner, std::default_delete<proxygen::httpclient::CertificatePinner>> {
    struct __compressed_pair<proxygen::httpclient::CertificatePinner *, std::default_delete<proxygen::httpclient::CertificatePinner>> {
        struct CertificatePinner *__value_;
    } __ptr_;
};

struct unique_ptr<proxygen::httpclient::monitor::NetworkStatusMonitor, std::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor>> {
    struct __compressed_pair<proxygen::httpclient::monitor::NetworkStatusMonitor *, std::default_delete<proxygen::httpclient::monitor::NetworkStatusMonitor>> {
        struct NetworkStatusMonitor *__value_;
    } __ptr_;
};

struct unique_ptr<reliability::MmappedFile, std::default_delete<reliability::MmappedFile>> {
    struct __compressed_pair<reliability::MmappedFile *, std::default_delete<reliability::MmappedFile>> {
        struct MmappedFile *__value_;
    } __ptr_;
};

struct unique_ptr<short [], std::default_delete<short []>> {
    struct __compressed_pair<short *, std::default_delete<short []>> {
        short *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IG::_IGUnorderedMapWeakKeyWrapper<id<FBViewpointTrackable>>, NSMutableSet<FBViewpointAction *>*>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::atomic<void *>[], std::default_delete<std::atomic<void *>[]>> {
    struct __compressed_pair<std::atomic<void *>*, std::default_delete<std::atomic<void *>[]>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<std::mutex, std::default_delete<std::mutex>> {
    struct __compressed_pair<std::mutex *, std::default_delete<std::mutex>> {
        struct mutex *__value_;
    } __ptr_;
};

struct unique_ptr<unsigned char [], std::default_delete<unsigned char []>> {
    struct __compressed_pair<unsigned char *, std::default_delete<unsigned char []>> {
        char *_field1;
    } _field1;
};

struct unique_ref<arfx::delivery::ICancelableToken, std::default_delete<arfx::delivery::ICancelableToken>> {
    struct unique_ptr<arfx::delivery::ICancelableToken, std::default_delete<arfx::delivery::ICancelableToken>> _field1;
};

struct unique_ref<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> {
    struct unique_ptr<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> _field1;
};

struct unique_ref<msqrd::services::network::INetworkRequestRedirectHandler, std::default_delete<msqrd::services::network::INetworkRequestRedirectHandler>> {
    struct unique_ptr<msqrd::services::network::INetworkRequestRedirectHandler, std::default_delete<msqrd::services::network::INetworkRequestRedirectHandler>> _field1;
};

struct unordered_map<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*, std::hash<NSOperationQueuePriority>, std::equal_to<NSOperationQueuePriority>, std::allocator<std::pair<const NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>>> {
    struct __hash_table<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, std::__unordered_map_hasher<NSOperationQueuePriority, std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, std::hash<NSOperationQueuePriority>, std::equal_to<NSOperationQueuePriority>, true>, std::__unordered_map_equal<NSOperationQueuePriority, std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, std::equal_to<NSOperationQueuePriority>, std::hash<NSOperationQueuePriority>, true>, std::allocator<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSOperationQueuePriority, std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, std::hash<NSOperationQueuePriority>, std::equal_to<NSOperationQueuePriority>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<NSOperationQueuePriority, std::__hash_value_type<NSOperationQueuePriority, NSMutableArray<id<IGResourceOperation>>*>, std::equal_to<NSOperationQueuePriority>, std::hash<NSOperationQueuePriority>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<NSString *, DFDataObservableWithFetchPurpose, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::allocator<std::pair<NSString *const, DFDataObservableWithFetchPurpose>>> {
    struct __hash_table<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>, true>, std::allocator<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, DFDataObservableWithFetchPurpose>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<NSString *, IGPrefetchState, NSStringHash, NSStringEqual, std::allocator<std::pair<NSString *const, IGPrefetchState>>> {
    struct __hash_table<std::__hash_value_type<NSString *, IGPrefetchState>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, IGPrefetchState>, NSStringHash, NSStringEqual, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, IGPrefetchState>, NSStringEqual, NSStringHash, true>, std::allocator<std::__hash_value_type<NSString *, IGPrefetchState>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, IGPrefetchState>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, IGPrefetchState>, NSStringHash, NSStringEqual, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, IGPrefetchState>, NSStringEqual, NSStringHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*, FB::ObjcHash, FB::ObjcEqual, std::allocator<std::pair<NSString *const, NSDictionary<NSString *, IGLauncherParameter *>*>>> {
    struct __hash_table<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, FB::ObjcHash, FB::ObjcEqual, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, FB::ObjcEqual, FB::ObjcHash, true>, std::allocator<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, FB::ObjcHash, FB::ObjcEqual, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, NSDictionary<NSString *, IGLauncherParameter *>*>, FB::ObjcEqual, FB::ObjcHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<NSString *, id, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::allocator<std::pair<NSString *const, id>>> {
    struct __hash_table<std::__hash_value_type<NSString *, id>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, id>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>, true>, std::allocator<std::__hash_value_type<NSString *, id>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, id>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<NSString *, std::vector<(anonymous namespace)::Subscription>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::allocator<std::pair<NSString *const, std::vector<(anonymous namespace)::Subscription>>>> {
    struct __hash_table<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>, true>, std::allocator<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<id (*)(BKContext *), id, std::hash<id (*)(BKContext *)>, std::equal_to<id (*)(BKContext *)>, std::allocator<std::pair<id (*const)(BKContext *), id>>> {
    struct __hash_table<std::__hash_value_type<id (*)(BKContext *), id>, std::__unordered_map_hasher<id (*)(BKContext *), std::__hash_value_type<id (*)(BKContext *), id>, std::hash<id (*)(BKContext *)>, std::equal_to<id (*)(BKContext *)>, true>, std::__unordered_map_equal<id (*)(BKContext *), std::__hash_value_type<id (*)(BKContext *), id>, std::equal_to<id (*)(BKContext *)>, std::hash<id (*)(BKContext *)>, true>, std::allocator<std::__hash_value_type<id (*)(BKContext *), id>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<id (*)(BKContext *), id>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<id (*)(BKContext *), std::__hash_value_type<id (*)(BKContext *), id>, std::hash<id (*)(BKContext *)>, std::equal_to<id (*)(BKContext *)>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<id (*)(BKContext *), std::__hash_value_type<id (*)(BKContext *), id>, std::equal_to<id (*)(BKContext *)>, std::hash<id (*)(BKContext *)>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<id, FBMPInternalFilterPerf, FBMPHashFunctor<NSObject *>, std::equal_to<id>, std::allocator<std::pair<const id, FBMPInternalFilterPerf>>> {
    struct __hash_table<std::__hash_value_type<id, FBMPInternalFilterPerf>, std::__unordered_map_hasher<id, std::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, std::equal_to<id>, true>, std::__unordered_map_equal<id, std::__hash_value_type<id, FBMPInternalFilterPerf>, std::equal_to<id>, FBMPHashFunctor<NSObject *>, true>, std::allocator<std::__hash_value_type<id, FBMPInternalFilterPerf>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<id, FBMPInternalFilterPerf>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<id, std::__hash_value_type<id, FBMPInternalFilterPerf>, FBMPHashFunctor<NSObject *>, std::equal_to<id>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<id, std::__hash_value_type<id, FBMPInternalFilterPerf>, std::equal_to<id>, FBMPHashFunctor<NSObject *>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>, std::hash<msqrd::services::ServiceType>, std::equal_to<msqrd::services::ServiceType>, std::allocator<std::pair<const msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>>> {
    struct __hash_table<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, std::__unordered_map_hasher<msqrd::services::ServiceType, std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, std::hash<msqrd::services::ServiceType>, std::equal_to<msqrd::services::ServiceType>, true>, std::__unordered_map_equal<msqrd::services::ServiceType, std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, std::equal_to<msqrd::services::ServiceType>, std::hash<msqrd::services::ServiceType>, true>, std::allocator<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<msqrd::services::ServiceType, std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, std::hash<msqrd::services::ServiceType>, std::equal_to<msqrd::services::ServiceType>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<msqrd::services::ServiceType, std::__hash_value_type<msqrd::services::ServiceType, arfx::shared_ref<msqrd::servicehost::ARServiceCreator>>, std::equal_to<msqrd::services::ServiceType>, std::hash<msqrd::services::ServiceType>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>, std::hash<msqrd::services::ServiceType::Enum>, std::equal_to<msqrd::services::ServiceType::Enum>, std::allocator<std::pair<const msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>>> {
    struct __hash_table<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, std::__unordered_map_hasher<msqrd::services::ServiceType::Enum, std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, std::hash<msqrd::services::ServiceType::Enum>, std::equal_to<msqrd::services::ServiceType::Enum>, true>, std::__unordered_map_equal<msqrd::services::ServiceType::Enum, std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, std::equal_to<msqrd::services::ServiceType::Enum>, std::hash<msqrd::services::ServiceType::Enum>, true>, std::allocator<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<msqrd::services::ServiceType::Enum, std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, std::hash<msqrd::services::ServiceType::Enum>, std::equal_to<msqrd::services::ServiceType::Enum>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<msqrd::services::ServiceType::Enum, std::__hash_value_type<msqrd::services::ServiceType::Enum, id<FBARServiceConfiguration>>, std::equal_to<msqrd::services::ServiceType::Enum>, std::hash<msqrd::services::ServiceType::Enum>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<pando::NodeKey, std::shared_ptr<const pando::Node>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>, std::allocator<std::pair<const pando::NodeKey, std::shared_ptr<const pando::Node>>>> {
    struct __hash_table<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>, true>, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>, true>, std::allocator<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::pair<long, long>, IGWaterfallLayoutCachedItem, std::hash<IGWaterfallIndexPath>, std::equal_to<std::pair<long, long>>, std::allocator<std::pair<const std::pair<long, long>, IGWaterfallLayoutCachedItem>>> {
    struct __hash_table<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, std::__unordered_map_hasher<std::pair<long, long>, std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, std::hash<IGWaterfallIndexPath>, std::equal_to<std::pair<long, long>>, true>, std::__unordered_map_equal<std::pair<long, long>, std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, std::equal_to<std::pair<long, long>>, std::hash<IGWaterfallIndexPath>, true>, std::allocator<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::pair<long, long>, std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, std::hash<IGWaterfallIndexPath>, std::equal_to<std::pair<long, long>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::pair<long, long>, std::__hash_value_type<std::pair<long, long>, IGWaterfallLayoutCachedItem>, std::equal_to<std::pair<long, long>>, std::hash<IGWaterfallIndexPath>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, IGGLKLibrary *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, IGGLKLibrary *>>> {
    struct __hash_table<std::__hash_value_type<std::string, IGGLKLibrary *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, IGGLKLibrary *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> {
    struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, double>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, fbsdk::MTensor, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, fbsdk::MTensor>>> {
    struct __hash_table<std::__hash_value_type<std::string, fbsdk::MTensor>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, fbsdk::MTensor>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, std::string>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>, facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::IdentityHash, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>>> {
    struct __hash_table<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::IdentityHash, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, std::equal_to<unsigned long>, facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::IdentityHash, true>, std::allocator<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::IdentityHash, std::equal_to<unsigned long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::shared_ptr<const facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::LayeredObject>>, std::equal_to<unsigned long>, facebook::graphql::GraphQLLayeredInformation<facebook::graphql::GraphQLService::Summary>::IdentityHash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long, std::unique_ptr<void, void (*)(void *)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::unique_ptr<void, void (*)(void *)>>>> {
    struct __hash_table<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long, std::vector<CKAction<UIEvent *>>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::vector<CKAction<UIEvent *>>>>> {
    struct __hash_table<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<CKAction<UIEvent *>>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::allocator<_IGListWorkingRangeHandlerIndexPath>> {
    struct __hash_table<_IGListWorkingRangeHandlerIndexPath, _IGListWorkingRangeHandlerIndexPathHash, std::equal_to<_IGListWorkingRangeHandlerIndexPath>, std::allocator<_IGListWorkingRangeHandlerIndexPath>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*>, std::allocator<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>>> {
            struct __hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerIndexPath, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, _IGListWorkingRangeHandlerIndexPathHash> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<_IGListWorkingRangeHandlerIndexPath>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper>> {
    struct __hash_table<_IGListWorkingRangeHandlerSectionControllerWrapper, _IGListWorkingRangeHashID, std::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>, std::allocator<_IGListWorkingRangeHandlerSectionControllerWrapper>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*>, std::allocator<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>>> {
            struct __hash_node_base<std::__hash_node<_IGListWorkingRangeHandlerSectionControllerWrapper, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, _IGListWorkingRangeHashID> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<_IGListWorkingRangeHandlerSectionControllerWrapper>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, std::hash<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::equal_to<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::allocator<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
    struct __hash_table<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, std::hash<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::equal_to<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::allocator<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>, std::allocator<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>>> {
            struct __hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::hash<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::equal_to<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<folly::detail::EventBaseLocalBase *, std::hash<folly::detail::EventBaseLocalBase *>, std::equal_to<folly::detail::EventBaseLocalBase *>, std::allocator<folly::detail::EventBaseLocalBase *>> {
    struct __hash_table<folly::detail::EventBaseLocalBase *, std::hash<folly::detail::EventBaseLocalBase *>, std::equal_to<folly::detail::EventBaseLocalBase *>, std::allocator<folly::detail::EventBaseLocalBase *>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>, std::allocator<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>>> {
            struct __hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<folly::detail::EventBaseLocalBase *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<folly::detail::EventBaseLocalBase *>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<unsigned long, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<unsigned long>> {
    struct __hash_table<unsigned long, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<unsigned long>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long, void *>*>, std::allocator<std::__hash_node<unsigned long, void *>>> {
            struct __hash_node_base<std::__hash_node<unsigned long, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<unsigned long>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<unsigned long>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct uuid {
    unsigned char _field1[16];
};

struct variant<FBMPSessionConnectOperation, FBMPSessionConnectPortsOperation, FBMPSessionDisconnectOperation, FBMPSessionDisconnectPortsOperation, FBMPSessionReplaceOperation, FBMPSessionRemoveOperation> {
    int which_;
    struct aligned_storage<16, 8> storage_;
};

struct variant<bool, CGPoint, KFAnimation<CGPoint>*> {
    struct __impl<bool, CGPoint, KFAnimation<CGPoint>*> {
        union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0, bool, CGPoint, KFAnimation<CGPoint>*> {
            char __dummy;
            struct __alt<0, bool> __head;
            union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1, CGPoint, KFAnimation<CGPoint>*> {
                char __dummy;
                struct __alt<1, CGPoint> {
                    struct CGPoint __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2, KFAnimation<CGPoint>*> {
                    char __dummy;
                    struct __alt<2, KFAnimation<CGPoint>*> {
                        void *__value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl;
};

struct variant<bool, UIColor *, KFAnimation<UIColor *>*> {
    struct __impl<bool, UIColor *, KFAnimation<UIColor *>*> {
        union __union<std::__variant_detail::_Trait::_Available, 0, bool, UIColor *, KFAnimation<UIColor *>*> {
            char __dummy;
            struct __alt<0, bool> __head;
            union __union<std::__variant_detail::_Trait::_Available, 1, UIColor *, KFAnimation<UIColor *>*> {
                char __dummy;
                struct __alt<1, UIColor *> {
                    UIColor *__value;
                } __head;
                union __union<std::__variant_detail::_Trait::_Available, 2, KFAnimation<UIColor *>*> {
                    char __dummy;
                    struct __alt<2, KFAnimation<UIColor *>*> {
                        void *__value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_Available, 3> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl;
};

struct variant<bool, double, KFAnimation<double>*> {
    struct __impl<bool, double, KFAnimation<double>*> {
        union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0, bool, double, KFAnimation<double>*> {
            char __dummy;
            struct __alt<0, bool> __head;
            union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1, double, KFAnimation<double>*> {
                char __dummy;
                struct __alt<1, double> {
                    double __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2, KFAnimation<double>*> {
                    char __dummy;
                    struct __alt<2, KFAnimation<double>*> {
                        void *__value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl;
};

struct variant<bool, std::vector<KFPathCommand>, KFAnimation<std::vector<KFPathCommand>>*> {
    struct __impl<bool, std::vector<KFPathCommand>, KFAnimation<std::vector<KFPathCommand>>*> {
        union __union<std::__variant_detail::_Trait::_Available, 0, bool, std::vector<KFPathCommand>, KFAnimation<std::vector<KFPathCommand>>*> {
            char __dummy;
            struct __alt<0, bool> __head;
            union __union<std::__variant_detail::_Trait::_Available, 1, std::vector<KFPathCommand>, KFAnimation<std::vector<KFPathCommand>>*> {
                char __dummy;
                struct __alt<1, std::vector<KFPathCommand>> {
                    struct vector<KFPathCommand, std::allocator<KFPathCommand>> __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_Available, 2, KFAnimation<std::vector<KFPathCommand>>*> {
                    char __dummy;
                    struct __alt<2, KFAnimation<std::vector<KFPathCommand>>*> {
                        void *__value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_Available, 3> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl;
};

struct variant<bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>>*> {
    struct __impl<bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>>*> {
        union __union<std::__variant_detail::_Trait::_Available, 0, bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>>*> {
            char __dummy;
            struct __alt<0, bool> __head;
            union __union<std::__variant_detail::_Trait::_Available, 1, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>>*> {
                char __dummy;
                struct __alt<1, std::vector<UIColor *>> {
                    struct vector<UIColor *, std::allocator<UIColor *>> __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_Available, 2, KFAnimation<std::vector<UIColor *>>*> {
                    char __dummy;
                    struct __alt<2, KFAnimation<std::vector<UIColor *>>*> {
                        void *__value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_Available, 3> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl;
};

struct variant<bool, std::vector<double>, KFAnimation<std::vector<double>>*> {
    struct __impl<bool, std::vector<double>, KFAnimation<std::vector<double>>*> {
        union __union<std::__variant_detail::_Trait::_Available, 0, bool, std::vector<double>, KFAnimation<std::vector<double>>*> {
            char __dummy;
            struct __alt<0, bool> __head;
            union __union<std::__variant_detail::_Trait::_Available, 1, std::vector<double>, KFAnimation<std::vector<double>>*> {
                char __dummy;
                struct __alt<1, std::vector<double>> {
                    struct vector<double, std::allocator<double>> __value;
                } __head;
                union __union<std::__variant_detail::_Trait::_Available, 2, KFAnimation<std::vector<double>>*> {
                    char __dummy;
                    struct __alt<2, KFAnimation<std::vector<double>>*> {
                        void *__value;
                    } __head;
                    union __union<std::__variant_detail::_Trait::_Available, 3> __tail;
                } __tail;
            } __tail;
        } __data;
        unsigned int __index;
    } __impl;
};

struct vec<2, float, glm::packed_highp> {
    CDUnion_d07f0a1e ;
    CDUnion_58f8d4fa ;
};

struct vec<4, float, glm::packed_highp> {
    CDUnion_d07f0a1e ;
    CDUnion_58f8d4fa ;
    union {
        float z;
        float b;
        float p;
    } ;
    union {
        float w;
        float a;
        float q;
    } ;
};

struct vector<AlphaMatteDescriptor, std::allocator<AlphaMatteDescriptor>> {
    struct AlphaMatteDescriptor *__begin_;
    struct AlphaMatteDescriptor *__end_;
    struct __compressed_pair<AlphaMatteDescriptor *, std::allocator<AlphaMatteDescriptor>> {
        struct AlphaMatteDescriptor *__value_;
    } __end_cap_;
};

struct vector<BKQueuedTreeModification, std::allocator<BKQueuedTreeModification>> {
    struct BKQueuedTreeModification *__begin_;
    struct BKQueuedTreeModification *__end_;
    struct __compressed_pair<BKQueuedTreeModification *, std::allocator<BKQueuedTreeModification>> {
        struct BKQueuedTreeModification *__value_;
    } __end_cap_;
};

struct vector<CGRect, std::allocator<CGRect>> {
    struct CGRect *__begin_;
    struct CGRect *__end_;
    struct __compressed_pair<CGRect *, std::allocator<CGRect>> {
        struct CGRect *__value_;
    } __end_cap_;
};

struct vector<CK::Component::OptimisticViewMutationInfo, std::allocator<CK::Component::OptimisticViewMutationInfo>> {
    struct OptimisticViewMutationInfo *__begin_;
    struct OptimisticViewMutationInfo *__end_;
    struct __compressed_pair<CK::Component::OptimisticViewMutationInfo *, std::allocator<CK::Component::OptimisticViewMutationInfo>> {
        struct OptimisticViewMutationInfo *__value_;
    } __end_cap_;
};

struct vector<CKComponentAnimation, std::allocator<CKComponentAnimation>> {
    struct CKComponentAnimation *_field1;
    struct CKComponentAnimation *_field2;
    struct __compressed_pair<CKComponentAnimation *, std::allocator<CKComponentAnimation>> {
        struct CKComponentAnimation *_field1;
    } _field3;
};

struct vector<CKComponentFinalUnmountAnimation, std::allocator<CKComponentFinalUnmountAnimation>> {
    struct CKComponentFinalUnmountAnimation *_field1;
    struct CKComponentFinalUnmountAnimation *_field2;
    struct __compressed_pair<CKComponentFinalUnmountAnimation *, std::allocator<CKComponentFinalUnmountAnimation>> {
        struct CKComponentFinalUnmountAnimation *_field1;
    } _field3;
};

struct vector<CKDescendantTreeNodeKeyToNode, std::allocator<CKDescendantTreeNodeKeyToNode>> {
    struct CKDescendantTreeNodeKeyToNode *__begin_;
    struct CKDescendantTreeNodeKeyToNode *__end_;
    struct __compressed_pair<CKDescendantTreeNodeKeyToNode *, std::allocator<CKDescendantTreeNodeKeyToNode>> {
        struct CKDescendantTreeNodeKeyToNode *__value_;
    } __end_cap_;
};

struct vector<CKTreeNode *, std::allocator<CKTreeNode *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<CKTreeNode *__strong *, std::allocator<CKTreeNode *>> {
        id *_field1;
    } _field3;
};

struct vector<CKTreeNode *__weak, std::allocator<CKTreeNode *__weak>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<CKTreeNode *__weak *, std::allocator<CKTreeNode *__weak>> {
        id *__value_;
    } __end_cap_;
};

struct vector<CMTime, std::allocator<CMTime>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CMTime *, std::allocator<CMTime>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CaptureCompletionContext, std::allocator<CaptureCompletionContext>> {
    struct CaptureCompletionContext *__begin_;
    struct CaptureCompletionContext *__end_;
    struct __compressed_pair<CaptureCompletionContext *, std::allocator<CaptureCompletionContext>> {
        struct CaptureCompletionContext *__value_;
    } __end_cap_;
};

struct vector<FBMPCDecodingObjectContext, std::allocator<FBMPCDecodingObjectContext>> {
    struct FBMPCDecodingObjectContext *__begin_;
    struct FBMPCDecodingObjectContext *__end_;
    struct __compressed_pair<FBMPCDecodingObjectContext *, std::allocator<FBMPCDecodingObjectContext>> {
        struct FBMPCDecodingObjectContext *__value_;
    } __end_cap_;
};

struct vector<FBMPCEncodingObjectContext *, std::allocator<FBMPCEncodingObjectContext *>> {
    struct FBMPCEncodingObjectContext **__begin_;
    struct FBMPCEncodingObjectContext **__end_;
    struct __compressed_pair<FBMPCEncodingObjectContext **, std::allocator<FBMPCEncodingObjectContext *>> {
        struct FBMPCEncodingObjectContext **__value_;
    } __end_cap_;
};

struct vector<FBMPCEncodingObjectContext::EncodedObjectRecord, std::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord>> {
    struct EncodedObjectRecord *__begin_;
    struct EncodedObjectRecord *__end_;
    struct __compressed_pair<FBMPCEncodingObjectContext::EncodedObjectRecord *, std::allocator<FBMPCEncodingObjectContext::EncodedObjectRecord>> {
        struct EncodedObjectRecord *__value_;
    } __end_cap_;
};

struct vector<FNFDashFrameMetadata, std::allocator<FNFDashFrameMetadata>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<FNFDashFrameMetadata *, std::allocator<FNFDashFrameMetadata>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<FNFMP4EmsgAtom, std::allocator<FNFMP4EmsgAtom>> {
    struct FNFMP4EmsgAtom *__begin_;
    struct FNFMP4EmsgAtom *__end_;
    struct __compressed_pair<FNFMP4EmsgAtom *, std::allocator<FNFMP4EmsgAtom>> {
        struct FNFMP4EmsgAtom *__value_;
    } __end_cap_;
};

struct vector<FNFMP4MoofAtom, std::allocator<FNFMP4MoofAtom>> {
    struct FNFMP4MoofAtom *__begin_;
    struct FNFMP4MoofAtom *__end_;
    struct __compressed_pair<FNFMP4MoofAtom *, std::allocator<FNFMP4MoofAtom>> {
        struct FNFMP4MoofAtom *__value_;
    } __end_cap_;
};

struct vector<FNFMP4SidxSegment, std::allocator<FNFMP4SidxSegment>> {
    struct FNFMP4SidxSegment *__begin_;
    struct FNFMP4SidxSegment *__end_;
    struct __compressed_pair<FNFMP4SidxSegment *, std::allocator<FNFMP4SidxSegment>> {
        struct FNFMP4SidxSegment *__value_;
    } __end_cap_;
};

struct vector<FNFMP4TrakAtom, std::allocator<FNFMP4TrakAtom>> {
    struct FNFMP4TrakAtom *__begin_;
    struct FNFMP4TrakAtom *__end_;
    struct __compressed_pair<FNFMP4TrakAtom *, std::allocator<FNFMP4TrakAtom>> {
        struct FNFMP4TrakAtom *__value_;
    } __end_cap_;
};

struct vector<FNFMP4TrakAtomForSeek, std::allocator<FNFMP4TrakAtomForSeek>> {
    struct FNFMP4TrakAtomForSeek *__begin_;
    struct FNFMP4TrakAtomForSeek *__end_;
    struct __compressed_pair<FNFMP4TrakAtomForSeek *, std::allocator<FNFMP4TrakAtomForSeek>> {
        struct FNFMP4TrakAtomForSeek *__value_;
    } __end_cap_;
};

struct vector<FNFMP4TrexAtom, std::allocator<FNFMP4TrexAtom>> {
    struct FNFMP4TrexAtom *__begin_;
    struct FNFMP4TrexAtom *__end_;
    struct __compressed_pair<FNFMP4TrexAtom *, std::allocator<FNFMP4TrexAtom>> {
        struct FNFMP4TrexAtom *__value_;
    } __end_cap_;
};

struct vector<IG::_IGWeakUnorderedMap<id<FBViewpointTrackable>, NSMutableSet<FBViewpointAction *>*, void, void, void>, std::allocator<IG::_IGWeakUnorderedMap<id<FBViewpointTrackable>, NSMutableSet<FBViewpointAction *>*, void, void, void>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<IG::_IGWeakUnorderedMap<id<FBViewpointTrackable>, NSMutableSet<FBViewpointAction *>*, void, void, void>*, std::allocator<IG::_IGWeakUnorderedMap<id<FBViewpointTrackable>, NSMutableSet<FBViewpointAction *>*, void, void, void>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<IGAttitudeSample, std::allocator<IGAttitudeSample>> {
    struct IGAttitudeSample *__begin_;
    struct IGAttitudeSample *__end_;
    struct __compressed_pair<IGAttitudeSample *, std::allocator<IGAttitudeSample>> {
        struct IGAttitudeSample *__value_;
    } __end_cap_;
};

struct vector<IGFrameSample, std::allocator<IGFrameSample>> {
    struct IGFrameSample *__begin_;
    struct IGFrameSample *__end_;
    struct __compressed_pair<IGFrameSample *, std::allocator<IGFrameSample>> {
        struct IGFrameSample *__value_;
    } __end_cap_;
};

struct vector<IGGyroSample, std::allocator<IGGyroSample>> {
    struct IGGyroSample *__begin_;
    struct IGGyroSample *__end_;
    struct __compressed_pair<IGGyroSample *, std::allocator<IGGyroSample>> {
        struct IGGyroSample *__value_;
    } __end_cap_;
};

struct vector<IGListSectionEntry, std::allocator<IGListSectionEntry>> {
    struct IGListSectionEntry *__begin_;
    struct IGListSectionEntry *__end_;
    struct __compressed_pair<IGListSectionEntry *, std::allocator<IGListSectionEntry>> {
        struct IGListSectionEntry *__value_;
    } __end_cap_;
};

struct vector<IGOrientationSample, std::allocator<IGOrientationSample>> {
    struct IGOrientationSample *__begin_;
    struct IGOrientationSample *__end_;
    struct __compressed_pair<IGOrientationSample *, std::allocator<IGOrientationSample>> {
        struct IGOrientationSample *__value_;
    } __end_cap_;
};

struct vector<IGShoppingSizingChartRowEntry, std::allocator<IGShoppingSizingChartRowEntry>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<IGShoppingSizingChartRowEntry *, std::allocator<IGShoppingSizingChartRowEntry>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<IGWaterfallLayoutColumn, std::allocator<IGWaterfallLayoutColumn>> {
    struct IGWaterfallLayoutColumn *_field1;
    struct IGWaterfallLayoutColumn *_field2;
    struct __compressed_pair<IGWaterfallLayoutColumn *, std::allocator<IGWaterfallLayoutColumn>> {
        struct IGWaterfallLayoutColumn *_field1;
    } _field3;
};

struct vector<KFDecodedAsset *, std::allocator<KFDecodedAsset *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<KFDecodedAsset *__strong *, std::allocator<KFDecodedAsset *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<KFPathCommand, std::allocator<KFPathCommand>> {
    struct KFPathCommand *__begin_;
    struct KFPathCommand *__end_;
    struct __compressed_pair<KFPathCommand *, std::allocator<KFPathCommand>> {
        struct KFPathCommand *__value_;
    } __end_cap_;
};

struct vector<KFVariable, std::allocator<KFVariable>> {
    struct KFVariable *__begin_;
    struct KFVariable *__end_;
    struct __compressed_pair<KFVariable *, std::allocator<KFVariable>> {
        struct KFVariable *__value_;
    } __end_cap_;
};

struct vector<NSString *, std::allocator<NSString *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<NSString *__strong *, std::allocator<NSString *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<UIColor *, std::allocator<UIColor *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<UIColor *__strong *, std::allocator<UIColor *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<UIView *, std::allocator<UIView *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<UIView *__strong *, std::allocator<UIView *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<__weak id<KFFrameListenerProtocol>, std::allocator<__weak id<KFFrameListenerProtocol>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<KFFrameListenerProtocol>*, std::allocator<__weak id<KFFrameListenerProtocol>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<__weak id<KFFrameUpdateListenerProtocol>, std::allocator<__weak id<KFFrameUpdateListenerProtocol>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<KFFrameUpdateListenerProtocol>*, std::allocator<__weak id<KFFrameUpdateListenerProtocol>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<arfx::delivery::CapabilityMinVersionModel, std::allocator<arfx::delivery::CapabilityMinVersionModel>> {
    struct CapabilityMinVersionModel *_field1;
    struct CapabilityMinVersionModel *_field2;
    struct __compressed_pair<arfx::delivery::CapabilityMinVersionModel *, std::allocator<arfx::delivery::CapabilityMinVersionModel>> {
        struct CapabilityMinVersionModel *_field1;
    } _field3;
};

struct vector<arfx::delivery::EffectAsyncAsset, std::allocator<arfx::delivery::EffectAsyncAsset>> {
    struct EffectAsyncAsset *_field1;
    struct EffectAsyncAsset *_field2;
    struct __compressed_pair<arfx::delivery::EffectAsyncAsset *, std::allocator<arfx::delivery::EffectAsyncAsset>> {
        struct EffectAsyncAsset *_field1;
    } _field3;
};

struct vector<arfx::delivery::VersionedCapability, std::allocator<arfx::delivery::VersionedCapability>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<arfx::delivery::VersionedCapability *, std::allocator<arfx::delivery::VersionedCapability>> {
        int *_field1;
    } _field3;
};

struct vector<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>*, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>*, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<boost::qvm::quat<double>, std::allocator<boost::qvm::quat<double>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<boost::qvm::quat<double>*, std::allocator<boost::qvm::quat<double>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<char, std::allocator<char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<char *, std::allocator<char>> {
        char *__value_;
    } __end_cap_;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<id, std::allocator<id>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__strong id *, std::allocator<id>> {
        id *__value_;
    } __end_cap_;
};

struct vector<id<NSObject>, std::allocator<id<NSObject>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__strong id<NSObject>*, std::allocator<id<NSObject>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
};

struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
};

struct vector<long long, std::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::allocator<long long>> {
        long long *__value_;
    } __end_cap_;
};

struct vector<msqrd::platform::IScriptingLogger::WatchEntry, std::allocator<msqrd::platform::IScriptingLogger::WatchEntry>> {
    struct WatchEntry *__begin_;
    struct WatchEntry *__end_;
    struct __compressed_pair<msqrd::platform::IScriptingLogger::WatchEntry *, std::allocator<msqrd::platform::IScriptingLogger::WatchEntry>> {
        struct WatchEntry *__value_;
    } __end_cap_;
};

struct vector<proxygen::CircularLogSink::RequestResponseInfo, std::allocator<proxygen::CircularLogSink::RequestResponseInfo>> {
    struct RequestResponseInfo *_field1;
    struct RequestResponseInfo *_field2;
    struct __compressed_pair<proxygen::CircularLogSink::RequestResponseInfo *, std::allocator<proxygen::CircularLogSink::RequestResponseInfo>> {
        struct RequestResponseInfo *_field1;
    } _field3;
};

struct vector<proxygen::httpclient::monitor::SocketData, std::allocator<proxygen::httpclient::monitor::SocketData>> {
    struct SocketData *__begin_;
    struct SocketData *__end_;
    struct __compressed_pair<proxygen::httpclient::monitor::SocketData *, std::allocator<proxygen::httpclient::monitor::SocketData>> {
        struct SocketData *__value_;
    } __end_cap_;
};

struct vector<short, std::allocator<short>> {
    short *__begin_;
    short *__end_;
    struct __compressed_pair<short *, std::allocator<short>> {
        short *__value_;
    } __end_cap_;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__begin_;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__end_;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__value_;
    } __end_cap_;
};

struct vector<std::pair<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::allocator<std::pair<CK::Component::ViewKey, CK::Component::ViewReusePool>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<CK::Component::ViewKey, CK::Component::ViewReusePool>*, std::allocator<std::pair<CK::Component::ViewKey, CK::Component::ViewReusePool>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<NSObject *const, NSObject *>, std::allocator<std::pair<NSObject *const, NSObject *>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<NSObject *const, NSObject *>*, std::allocator<std::pair<NSObject *const, NSObject *>>> {
        void *_field1;
    } _field3;
};

struct vector<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>, std::allocator<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>*, std::allocator<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>>> {
        void *_field1;
    } _field3;
};

struct vector<std::pair<double, FNFFrameBufferDataInternal *>, std::allocator<std::pair<double, FNFFrameBufferDataInternal *>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<double, FNFFrameBufferDataInternal *>*, std::allocator<std::pair<double, FNFFrameBufferDataInternal *>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<double, bool>, std::allocator<std::pair<double, bool>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<double, bool>*, std::allocator<std::pair<double, bool>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<double, double>*, std::allocator<std::pair<double, double>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>, std::allocator<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>*, std::allocator<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>>> {
        void *_field1;
    } _field3;
};

struct vector<std::pair<int, id<NSObject>>, std::allocator<std::pair<int, id<NSObject>>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<int, id<NSObject>>*, std::allocator<std::pair<int, id<NSObject>>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<void (^)(FBMPVideoPreviewingFrameData), NSObject<OS_dispatch_queue>*>, std::allocator<std::pair<void (^)(FBMPVideoPreviewingFrameData), NSObject<OS_dispatch_queue>*>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<void (^)(FBMPVideoPreviewingFrameData), NSObject<OS_dispatch_queue>*>*, std::allocator<std::pair<void (^)(FBMPVideoPreviewingFrameData), NSObject<OS_dispatch_queue>*>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<void (^)(bool, double), NSObject<OS_dispatch_queue>*>, std::allocator<std::pair<void (^)(bool, double), NSObject<OS_dispatch_queue>*>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<void (^)(bool, double), NSObject<OS_dispatch_queue>*>*, std::allocator<std::pair<void (^)(bool, double), NSObject<OS_dispatch_queue>*>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<const facebook::graphql::ConnectionConfiguration>, std::allocator<std::shared_ptr<const facebook::graphql::ConnectionConfiguration>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<const facebook::graphql::ConnectionConfiguration>*, std::allocator<std::shared_ptr<const facebook::graphql::ConnectionConfiguration>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::tuple<unsigned long long, opaqueCMSampleBuffer *>, std::allocator<std::tuple<unsigned long long, opaqueCMSampleBuffer *>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::tuple<unsigned long long, opaqueCMSampleBuffer *>*, std::allocator<std::tuple<unsigned long long, opaqueCMSampleBuffer *>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::tuple<unsigned long long, unsigned long long>, std::allocator<std::tuple<unsigned long long, unsigned long long>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::tuple<unsigned long long, unsigned long long>*, std::allocator<std::tuple<unsigned long long, unsigned long long>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>, std::allocator<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>*, std::allocator<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>>> {
        void *_field1;
    } _field3;
};

struct vector<std::unique_ptr<facebook::mqttchannel::TopicListener>, std::allocator<std::unique_ptr<facebook::mqttchannel::TopicListener>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::unique_ptr<facebook::mqttchannel::TopicListener>*, std::allocator<std::unique_ptr<facebook::mqttchannel::TopicListener>>> {
        void *_field1;
    } _field3;
};

struct vector<std::vector<char>, std::allocator<std::vector<char>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<char>*, std::allocator<std::vector<char>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned int, std::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
};

struct vector<unsigned long long, std::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

struct vector<unsigned short, std::allocator<unsigned short>> {
    unsigned short *_field1;
    unsigned short *_field2;
    struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> {
        unsigned short *_field1;
    } _field3;
};

struct vector<void (^)(UIView *), std::allocator<void (^)(UIView *)>> {
    CDUnknownBlockType *__begin_;
    CDUnknownBlockType *__end_;
    struct __compressed_pair<void (^__strong *)(UIView *), std::allocator<void (^)(UIView *)>> {
        CDUnknownBlockType *__value_;
    } __end_cap_;
};

struct vpx_codec_ctx {
    char *name;
    struct vpx_codec_iface *iface;
    int err;
    char *err_detail;
    long long init_flags;
    union {
        struct vpx_codec_dec_cfg *dec;
        struct vpx_codec_enc_cfg *enc;
        void *raw;
    } config;
    struct vpx_codec_priv *priv;
};

struct vpx_codec_dec_cfg;

struct vpx_codec_enc_cfg;

struct vpx_codec_iface;

struct vpx_codec_priv;

struct weak_ptr<igl::opengl::TextureTarget> {
    struct TextureTarget *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<mobileconfig::IFBMobileConfigManager> {
    struct IFBMobileConfigManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<msqrd::capture::CaptureEventService> {
    struct CaptureEventService *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<msqrd::dataprovider::ILocationUpdateListener> {
    struct ILocationUpdateListener *_field1;
    struct __shared_weak_count *_field2;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDUnion_7e831cd3 ;
    _Bool hasValue;
} StorageTriviallyDestructible_d373e774;

typedef struct {
    CDUnion_7e831cd3 _field1;
    _Bool _field2;
} StorageTriviallyDestructible_f6776964;

typedef struct {
    CDUnion_2d14f5d8 ;
    _Bool hasValue;
} StorageTriviallyDestructible_099f9f94;

typedef struct {
    struct _GLKVector2 _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
} _IGDrawTouchSample_5dcac39d;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    NSNumber *captionsAvailable;
    NSNumber *captionsDisplayed;
    NSString *component;
    NSString *componentType;
    NSString *entryPoint;
    NSString *igtvBrowseSessionId;
    NSString *igtvDestinationSessionId;
    NSString *igtvViewerSessionId;
    NSNumber *requestTimeSinceBroadcastStarts;
    NSString *sourceChannelType;
    NSNumber *storyPreviewMediaId;
    NSNumber *storyPreviewMediaOwnerId;
    NSString *surface;
    NSNumber *videoXPosition;
    NSNumber *videoYPosition;
    NSNumber *wasLive;
} CDStruct_525868da;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    long long _field7;
    long long _field8;
    unsigned long long _field9;
    _Bool _field10;
} CDStruct_61bbf500;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
} CDStruct_d10438cc;

typedef struct {
    NSString *title;
    NSString *artist;
    NSString *genre;
    NSString *category;
} CDStruct_cebda64c;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
} CDStruct_0f015c83;

typedef struct {
    NSString *initialUserSelectedQuality;
    NSString *sessionKey;
    _Bool isAudioOnly;
    _Bool isLowLatency;
    _Bool isLatencySensitiveBroadcast;
    _Bool expectsEmsgInData;
    long long liveDesiredLatencyMs;
    long long liveLatencyToleranceMs;
} CDStruct_c72663c7;

typedef struct {
    NSURL *mediaThumbnailURL;
    UIImage *mediaThumbnailImage;
    _Bool useLightColorScheme;
    unsigned long long bodyMultiLineType;
    NSAttributedString *username;
    NSURL *recipientImageURL;
    _Bool badgeWithThreadsLogo;
    NSString *notificationTypeString;
    NSString *threadId;
    NSString *recipientUserPk;
    IGUserSession *presentingUserSession;
} CDStruct_d29f4384;

typedef struct {
    id _field1;
    id _field2;
} CDStruct_a70f6672;

typedef struct {
    id _field1;
    int _field2;
    id _field3;
    id _field4;
    id _field5;
} CDStruct_e26d5b4e;

typedef struct {
    id _field1;
    long long _field2;
    _Bool _field3;
    unsigned long long _field4;
    unsigned long long _field5;
} CDStruct_0cc8954d;

typedef struct {
    _Bool logProviderSetupDebugEvent;
    _Bool logRequestedPlayingDebugEvent;
    _Bool logStartedPlayingDebugEvent;
    _Bool logVideoIdMismatchOnSetupDebugEvent;
    _Bool logVideoIdMismatchOnSendDebugEvent;
    _Bool logAdsEventOnly;
    _Bool dataProviderEnabledForStories;
    _Bool allowVideoIDMismatchInDataProviderSetup;
    _Bool enableEventBucketLogging;
    _Bool disableEventArrayLogging;
    _Bool enableSoundOnTag;
    _Bool asyncSetVideoIdInLogger;
    _Bool useLastStartTimeForStartedPlayingEvent;
    NSObject *loggingQueue;
} CDStruct_ce0fb163;

typedef struct {
    _Bool sandboxEnabled;
    _Bool shouldSubscribeToLiveTopic;
    _Bool shouldAllow24hReplay;
    _Bool shouldLogRealtimeAnalytics;
    _Bool authCacheEnabled;
    _Bool enableFizz;
    _Bool enableCallbackOffMainQueue;
    _Bool mqttPresenceAppForegroundReportingEnabled;
    _Bool mqttPresenceAppBackgroundReportingEnabled;
    _Bool msysPresenceConsumptionEnabled;
    _Bool shouldLogPresenceAppStateChange;
    _Bool publishTimeoutReconnectFixEnabled;
    _Bool shouldLogGQLSDebugAnalytics;
} CDStruct_70df817b;

typedef struct {
    _Bool sectionMovesAsDeletesInserts;
    _Bool singleItemSectionUpdates;
    _Bool preferItemReloadsForSectionReloads;
    _Bool allowsReloadingOnTooManyUpdates;
    _Bool allowsBackgroundDiffing;
    long long experiments;
} CDStruct_4a9ed357;

typedef struct {
    _Bool containsStaticImage;
    _Bool skipServiceHostUpdating;
    unsigned long long deviceSource;
    NSString *deviceType;
    NSString *deviceID;
    unsigned long long colorSpace;
    _Bool skipFilterRendering;
} CDStruct_de1cb42d;

typedef struct {
    _Bool _field1;
    _Bool _field2;
} CDStruct_3d581f42;

typedef struct {
    _Bool _field1;
    unsigned char _field2;
    _Bool _field3;
    unsigned long long _field4;
} CDStruct_6a6a01a4;

typedef struct {
    _Bool isEnabled;
    long long trigger;
    NSString *origin;
    _Bool isFullscreenExitLoggingEnabled;
} CDStruct_bcf1ca7b;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
} CDStruct_a14c44a6;

typedef struct {
    unsigned long long _field1;
    int _field2;
    id _field3;
    id _field4;
    id _field5;
} CDStruct_28f16230;

typedef struct {
    unsigned long long _field1;
} CDStruct_69d7cc99;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

typedef struct {
    unsigned int *_field1;
    unsigned long long _field2;
} CDStruct_63a81634;

typedef struct {
    double _field1;
    _Bool _field2;
    _Bool _field3;
} CDStruct_8bbad28c;

typedef struct {
    double _field1;
    _Bool _field2;
} CDStruct_fd1107da;

typedef struct {
    double fieldOfView;
    double aspectRatio;
    double gyroDelay;
    double shutterSpeed;
    char gyroOrientation[3];
} CDStruct_c91b0ade;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    _Bool _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    _Bool _field15;
    _Bool _field16;
} CDStruct_3e16764c;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double noAudioThreshold;
    int avSyncThresholdMs;
    int avSyncMinSampleSize;
    double avSyncPassRate;
    int avSyncLoggingVideoSampleRate;
    int avSyncMinBufferIndexGap;
    int avSyncMaxBufferIndexGap;
    _Bool restartAudioOnError;
} CDStruct_7b2b433f;

typedef struct {
    double cacheTimeout;
} CDStruct_eb671702;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
} CDStruct_a734b2e2;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
} CDStruct_77932685;

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

typedef struct {
    long long _field1;
    id _field2;
} CDStruct_6db0658e;

typedef struct {
    long long applicationBehavior;
    _Bool shouldSyncOverNetwork;
} CDStruct_39e1c37c;

typedef struct {
    long long _field1;
    double _field2;
    _Bool _field3;
} CDStruct_60aa3504;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long itemCountSinceLastAd;
    long long itemCountSinceLastNetego;
    long long itemCountForAdSlotsSinceLastAd;
    long long itemCountForNetegoSlotsSinceLastNetego;
    NSMutableSet *consumedItemsIds;
} CDStruct_72499660;

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_2ec95fd7;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct {
    long long _field1;
} CDStruct_4508418e;

typedef struct CDStruct_183601bc;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    long long _field5;
    unsigned long long _field6;
    _Bool _field7;
    unsigned long long _field8;
    unsigned long long _field9;
    unsigned long long _field10;
    id _field11;
    struct CGSize _field12;
    struct CGSize _field13;
} CDStruct_4fda4cbb;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    long long _field4;
    id _field5;
    _Bool _field6;
    struct final _field7;
    _Bool _field8;
    id _field9;
    id _field10;
} CDStruct_c22b3d9b;

typedef struct {
    id _field1;
    long long _field2;
    id _field3;
    struct instrumentation _field4;
} CDStruct_dac57052;

typedef struct {
    NSString *path;
    CDStruct_1b6d18a9 clipStartTimeMarker;
    CDStruct_1b6d18a9 clipDuration;
} CDStruct_3c272d1d;

typedef struct {
    id _field1;
    struct CGSize _field2;
    id _field3;
    int _field4;
} CDStruct_6eb6aa4a;

typedef struct {
    _Bool mosaicQplInstrumentationEnabled;
    _Bool isEfficiencyLoggingEnabled;
    _Bool fastPathCacheKeyedOnURL;
    _Bool usesSharedTaskQueue;
    _Bool usesConcurrentSharedTask;
    _Bool usesSerialSharedTask;
    _Bool usesConcurrentHighPriorityQueueForSharedTask;
    _Bool bumpRequestPriorityWithoutSharedTaskQueue;
    _Bool avoidCreatingRequestObject;
    _Bool isInstagramIntegrationEnabled;
    _Bool avoidDecodingMemoryCacheImages;
    _Bool persistDiskCacheContentOnLogout;
    _Bool dontUsePJPEGForFullData;
    struct FBImageCreateWithDataExperimentsConfig createImageExperimentsConfig;
    struct MOSProgressiveLoadingConfig progressiveLoadingConfig;
} CDStruct_80e93c6f;

typedef struct {
    _Bool endFrameSeekIfNoMoreFrames;
    _Bool useLastCallbackInBackToBackFrameSeek;
    _Bool shouldFlushTrailingSeek;
    _Bool displaySeekFrame;
    _Bool skipBackToBackSeekAsApplicable;
    int frameSeekTimerInterval;
    _Bool bypassFrameBufferOnFramePerfectSeek;
    unsigned int minSampleAudioFrameSize;
    _Bool playbackAVSyncTrackQueueRunningState;
    _Bool playbackAVSyncEarlyAudioSetup;
    _Bool enableVideoStallCheckFrequencyVariation;
    _Bool enableSynchronizerClock;
    _Bool enableSampleBufferRenderAudioEngine;
    _Bool useAudioQueueNewOutputWithDispatchQueue;
    _Bool useDelayToDeinitMutedAssets;
    double delayToDeinitMutedAssets;
    _Bool restartAudioOnNoAudioError;
    _Bool restartAudioOnNegativeStartError;
    _Bool restartAudioOnAVSyncError;
    _Bool enableAudioStallOnly;
    _Bool enableBackgroundAudio;
    unsigned long long audioStallOnlyVersion;
    _Bool enableVideoStallForAudioStallOnly;
    _Bool enableVideoStallTimeThresholdForAudioStallOnly;
    int maxAudioStallsAllowed;
    unsigned long long videoStallTimeThresholdForAudioStallOnly;
    _Bool enableAVSyncLogging;
    _Bool enableAVSyncMetrics;
    _Bool enableFrameRenderLogging;
    int avSyncThresholdMs;
    int avSyncMinSampleSize;
    double avSyncPassRate;
    long long frameRenderLoggingSampleRate;
    _Bool logAudioQueueInvalidationWarnings;
    _Bool logAudioQueueGeneralWarnings;
    _Bool logAudioQueueCommonWarnings;
    _Bool enableAdsFrameLogging;
    _Bool enableSynchronousPlayerStallLogs;
    _Bool shouldLogNegativeAudioStartTime;
    double negativeAudioStartTimeThreshold;
    int avSyncLoggingVideoSampleRate;
    _Bool decompressionErrorDebugging;
    _Bool forbidEnqueueVideoWhenAppInactive;
    _Bool displayFirstFrame;
    _Bool allowsVideoPlaybackWithoutAudio;
    double noAudioThreshold;
    int avSyncMinBufferIndexGap;
    int avSyncMaxBufferIndexGap;
    _Bool enableLastFrameRenderedTimestamp;
    _Bool invalidateAudioWrapperOnDealloc;
    struct {
        _Bool pictureInPictureEnabled;
        _Bool requiresLinearPlayback;
        _Bool canStartPictureInPictureAutomaticallyFromInline;
        _Bool startsPictureInPictureOnPlay;
    } pictureInPictureConfig;
    double videoStallCheckFrequencyDurationSecond;
    int bgLongStallingThreshold;
    _Bool enableAVSampleBufferDisplayLayer;
    _Bool enableAVSampleBufferDisplayLayerV2;
    _Bool xheAACLoudnessNormalizationEnabled;
    double xheAACLoudnessTarget;
    int xheAACDRCEffectType;
    unsigned int xheAACMinTimeLagToAdjustAudioFrameMsecs;
    _Bool xheAACEnableAudioBufferingInMuteInterval;
    _Bool xheAACEnablePerfectFrameSeek;
    _Bool useFNFValidationToken;
    _Bool enableDisplayEngineInactiveForAudioOnly;
    _Bool flushAudioQueueAfterEnqueuingAllBuffers;
    _Bool enableNullCheckOnInvalidate;
} CDStruct_b8b5dd59;

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    int _field5;
    unsigned int _field6;
    int _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    struct FNFDecompressionConfig _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    int _field17;
    int _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    int _field26;
    _Bool _field27;
} CDStruct_603cd4b3;

typedef struct {
    _Bool isScrollingDown;
    struct CGPoint contentOffset;
    struct CGPoint contentOffsetOnDragBeginOrDirectionChange;
    struct CGPoint velocityOnDragEnd;
} CDStruct_8eea7b7b;

typedef struct {
    _Bool _field1;
    struct CGSize _field2;
} CDStruct_deb187f0;

typedef struct {
    struct CGImage *_field1;
    _Bool _field2;
    struct CGSize _field3;
} CDStruct_72138f47;

typedef struct {
    double _field1;
    struct CGPoint _field2;
} CDStruct_f31c9284;

typedef struct {
    float _field1;
    float _field2;
    CDStruct_1b6d18a9 _field3;
    CDStruct_1b6d18a9 _field4;
    float _field5;
    float _field6;
} CDStruct_15fe95f0;

typedef struct {
    float _field1;
    CDStruct_1b6d18a9 _field2;
    long long _field3;
    float _field4;
    float _field5;
} CDStruct_62455522;

typedef struct {
    long long _field1;
    CDStruct_183601bc **_field2;
} CDStruct_96ee9b75;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

typedef struct {
    struct CGPoint topLeftPoint;
    struct CGPoint topRightPoint;
    struct CGPoint bottomLeftPoint;
    struct CGPoint bottomRightPoint;
} CDStruct_1475ac9d;

typedef struct {
    struct CGSize speakerSize;
    struct CGSize smallSoundwaveSize;
    struct CGSize bigSoundwaveSize;
    struct CGSize soundwaveAreaSize;
    struct CGSize crossSize;
    double speakerSoundwavePadding;
    double speakerCrossPadding;
} CDStruct_b17e9ffe;

typedef struct {
    union _GLKVector4 _field1;
    union _GLKVector4 _field2;
} CDStruct_8aefd972;

typedef struct {
    long long _field1;
    int _field2;
    int _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    long long _field7;
    int _field8;
    unsigned int _field9;
    _Bool _field10;
    unsigned char _field11[16];
    struct vector<unsigned short, std::allocator<unsigned short>> _field12;
    struct vector<unsigned int, std::allocator<unsigned int>> _field13;
    int _field14;
} CDStruct_72d0e578;

typedef struct {
    long long devicePosition;
    struct CGRect faceRect;
} CDStruct_c68f086b;

typedef struct {
    struct CGRect _field1;
    struct CGRect _field2;
    struct CGRect _field3;
    _Bool _field4;
    struct CGRect _field5;
    struct CGRect _field6;
    struct CGRect _field7;
    struct CGRect _field8;
    struct CGRect _field9;
    struct CGRect _field10;
    struct CGRect _field11;
    struct CGRect _field12;
    double _field13;
} CDStruct_2a138dcc;

// Ambiguous groups
typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
} CDStruct_8024420c;

typedef struct {
    _Bool _field1;
} CDStruct_b31ca263;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct {
    unsigned long long width;
    unsigned long long height;
} CDStruct_5e758c1a;

typedef struct {
    unsigned int shouldBeginEditing:1;
    unsigned int shouldEndEditing:1;
    unsigned int didBeginEditing:1;
    unsigned int didEndEditing:1;
    unsigned int shouldChangeTextInRange:1;
    unsigned int didChange:1;
    unsigned int didChangeSelection:1;
} CDStruct_c7a4ad33;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct Callback<void, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass> {
    CDUnknownFunctionPointerType *_vptr$Callback;
    void *callbackFunction;
} Callback_45ec5012;

typedef struct Callback<void, __CVBuffer *, std::shared_ptr<Ocean::AnyCameraT<float>>, double, double, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass, Ocean::NullClass> {
    CDUnknownFunctionPointerType *_vptr$Callback;
    void *callbackFunction;
} Callback_7a0991ab;

typedef struct Either<NSError *, id<FBMPData>> {
    id _field1;
    id _field2;
    _Bool _field3;
} Either_964923b2;

typedef struct F14ValueMap<folly::Range<const char *>, std::string, folly::HeterogeneousAccessHash<folly::Range<const char *>>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, std::allocator<std::pair<const folly::Range<const char *>, std::string>>> {
    struct __hash_table<std::__hash_value_type<folly::Range<const char *>, std::string>, std::__unordered_map_hasher<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, true>, std::__unordered_map_equal<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, true>, std::allocator<std::__hash_value_type<folly::Range<const char *>, std::string>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<folly::Range<const char *>, std::string>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<folly::Range<const char *>, std::__hash_value_type<folly::Range<const char *>, std::string>, folly::HeterogeneousAccessEqualTo<folly::Range<const char *>>, folly::HeterogeneousAccessHash<folly::Range<const char *>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
} F14ValueMap_21ad7c48;

typedef struct Optional<StructuredLogger::IguserinteropusertypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
} Optional_8822d440;

typedef struct Optional<StructuredLogger::InstagramstickertypesEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
} Optional_24808989;

typedef struct Optional<StructuredLogger::TmediaplaybackdynamicproductextrasType> {
    struct StorageNonTriviallyDestructible {
        union {
            char emptyState;
            struct TmediaplaybackdynamicproductextrasType value;
        } ;
        _Bool hasValue;
    } storage_;
} Optional_269585c6;

typedef struct Optional<StructuredLogger::TmediaplaybackinitialproductextrasType> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            struct TmediaplaybackinitialproductextrasType value;
        } ;
        _Bool hasValue;
    } storage_;
} Optional_008fc322;

typedef struct Optional<arfx::shared_ref<msqrd::servicehost::IEffectSessionListener>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct shared_ref<msqrd::servicehost::IEffectSessionListener> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
} Optional_daa70580;

typedef struct Optional<arfx::shared_ref<msqrd::services::IServiceAnalyticsLogger>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct shared_ref<msqrd::services::IServiceAnalyticsLogger> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
} Optional_4a74817c;

typedef struct Optional<arfx::unique_ref<const msqrd::services::IEffectDataSnapshotterCreator>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct unique_ref<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
} Optional_92f53422;

typedef struct Optional<long long> {
    StorageTriviallyDestructible_099f9f94 storage_;
} Optional_381dc36e;

typedef struct Range<const char *> {
    char *_field1;
    char *_field2;
} Range_3cfb20fc;

typedef struct Range<const msqrd::platform::IScriptingLogger::WatchEntry *> {
    struct WatchEntry *_field1;
    struct WatchEntry *_field2;
} Range_88fef6a7;

typedef struct array<double, 5> {
    double __elems_[5];
} array_06c318a3;

typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep __value_;
    } __r_;
} basic_string_0ec669f3;

typedef struct duration<long long, std::ratio<1, 1000>> {
    long long __rep_;
} duration_15f873c1;

typedef struct future<std::vector<facebook::artech::anchorservice::datawrappers::HitTestResultData>> {
    void *_field1;
} future_6ca21f13;

typedef struct list<std::shared_ptr<POPAnimatorItem>, std::allocator<std::shared_ptr<POPAnimatorItem>>> {
    struct __list_node_base<std::shared_ptr<POPAnimatorItem>, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<std::shared_ptr<POPAnimatorItem>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
} list_e34ef07f;

typedef struct map<int, IGRegion, std::less<int>, std::allocator<std::pair<const int, IGRegion>>> {
    struct __tree<std::__value_type<int, IGRegion>, std::__map_value_compare<int, std::__value_type<int, IGRegion>, std::less<int>, true>, std::allocator<std::__value_type<int, IGRegion>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, IGRegion>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, IGRegion>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_754194f1;

typedef struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __tree<std::__value_type<std::string, std::string>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string>>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_23e100cc;

typedef struct mat<4, 4, float, glm::packed_highp> {
    struct vec<4, float, glm::packed_highp> value[4];
} mat_3ea91578;

typedef struct pair<BKModel *, NSDictionary<NSString *, id>*> {
    id _field1;
    id _field2;
} pair_41707745;

typedef struct pair<id<FBMPInput>, id<FBMPOutput>> {
    id _field1;
    id _field2;
} pair_c442e4d7;

typedef struct pair<std::vector<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>>, bool> {
    struct vector<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>, std::allocator<std::pair<arfx::delivery::EffectModel, FBAREffectLoggingInfo *>>> _field1;
    _Bool _field2;
} pair_b3ada1ea;

typedef struct quat<double> {
    double _field1[4];
} quat_f7c121b3;

typedef struct shared_future<int> {
    void *_field1;
} shared_future_7e8d5716;

typedef struct shared_future<std::shared_ptr<msqrd::services::music::IMusicItem>> {
    void *_field1;
} shared_future_95cc1a0a;

typedef struct shared_future<std::string> {
    void *_field1;
} shared_future_a8c1b570;

typedef struct shared_ptr<FBLoomTraceControlling> {
    struct FBLoomTraceControlling *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_f67b7089;

typedef struct shared_ptr<FBQPLLoggingPolicyConfig> {
    struct FBQPLLoggingPolicyConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c3a421ef;

typedef struct shared_ptr<POPAnimatorItem> {
    struct POPAnimatorItem *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_1553c9f8;

typedef struct shared_ptr<arfx::delivery::ARDWriteThroughShaderAssetProvider> {
    struct ARDWriteThroughShaderAssetProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_155dbc59;

typedef struct shared_ptr<arfx::delivery::IAssetsManager> {
    struct IAssetsManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f3f11684;

typedef struct shared_ptr<arfx::delivery::IAsyncAssetMetadataDownloading> {
    struct IAsyncAssetMetadataDownloading *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8aa99c0e;

typedef struct shared_ptr<arfx::delivery::IEffectsManager> {
    struct IEffectsManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c5b1d1e2;

typedef struct shared_ptr<arfx::delivery::IModelManager> {
    struct IModelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_d7901282;

typedef struct shared_ptr<arfx::delivery::ModelPaths> {
    struct ModelPaths *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f2543195;

typedef struct shared_ptr<const facebook::graphql::parsing::GraphStoreGraphQLFactory> {
    struct GraphStoreGraphQLFactory *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_14a78dab;

typedef struct shared_ptr<const msqrd::attribution::EffectAttribution> {
    struct EffectAttribution *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f86b0e66;

typedef struct shared_ptr<const msqrd::manifest::Manifest> {
    struct Manifest *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8f3f58d1;

typedef struct shared_ptr<const msqrd::versioning::Version> {
    struct Version *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_602211e3;

typedef struct shared_ptr<const pando::Node> {
    struct Node *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_fb50d89f;

typedef struct shared_ptr<facebook::arservices::apple::AudioPlatformComponentHostImpl> {
    struct AudioPlatformComponentHostImpl *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f708a341;

typedef struct shared_ptr<facebook::audio::IAudioGraphClient> {
    struct IAudioGraphClient *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_b0943105;

typedef struct shared_ptr<facebook::audiofiltercore::FBAudioFileReader<short>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8f4949f5;

typedef struct shared_ptr<facebook::graphql::GraphQLAssetFactory> {
    struct GraphQLAssetFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a05df825;

typedef struct shared_ptr<facebook::graphql::GraphQLQuery> {
    struct GraphQLQuery *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_75eb96ea;

typedef struct shared_ptr<facebook::mobile::FBSSLKeyMaterialListenerAbstractLogger> {
    struct FBSSLKeyMaterialListenerAbstractLogger *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_1317cc0b;

typedef struct shared_ptr<facebook::mobile::graphstore::ServiceToken> {
    struct ServiceToken *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f2ea8619;

typedef struct shared_ptr<facebook::mobile::graphstore::TreeShape::Field> {
    struct Field *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_1a9caf36;

typedef struct shared_ptr<facebook::mobile::graphstore::TreeShape::Resolver> {
    struct Resolver *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_b4f13e85;

typedef struct shared_ptr<facebook::perflogger::QPLBase> {
    struct QPLBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_eaf197ea;

typedef struct shared_ptr<facebook::pointtools::PointCloud<facebook::pointtools::Point3<float>>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_740ce7c9;

typedef struct shared_ptr<facebook::stash::Stash> {
    struct Stash *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_aa0b0210;

typedef struct shared_ptr<facebook::stash::StashFile> {
    struct StashFile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1f6bbe34;

typedef struct shared_ptr<facebook::stash::StashManager> {
    struct StashManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_5181b5c0;

typedef struct shared_ptr<facebook::structuredlogger::IStructuredLogger> {
    struct IStructuredLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_422868cf;

typedef struct shared_ptr<facebook::tigon::TigonService> {
    struct TigonService *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_e4617883;

typedef struct shared_ptr<facebook::tigon::TigonTailingFileBodyProviderReaderHandle> {
    struct TigonTailingFileBodyProviderReaderHandle *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_53883449;

typedef struct shared_ptr<igl::IBuffer> {
    struct IBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3ca5f01e;

typedef struct shared_ptr<igl::ICommandBuffer> {
    struct ICommandBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_87f2834a;

typedef struct shared_ptr<igl::ICommandQueue> {
    struct ICommandQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_998cc3cc;

typedef struct shared_ptr<igl::IDevice> {
    struct IDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_eefa0e38;

typedef struct shared_ptr<igl::IFramebuffer> {
    struct IFramebuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f1960820;

typedef struct shared_ptr<igl::IRenderCommandEncoder> {
    struct IRenderCommandEncoder *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c73ae14e;

typedef struct shared_ptr<igl::IRenderPipelineState> {
    struct IRenderPipelineState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_32cdf849;

typedef struct shared_ptr<igl::ITexture> {
    struct ITexture *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_b95409fc;

typedef struct shared_ptr<igl::IVertexInputState> {
    struct IVertexInputState *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9261a1f4;

typedef struct shared_ptr<igl::metal::Framebuffer> {
    struct Framebuffer *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7412f414;

typedef struct shared_ptr<igl::opengl::Framebuffer> {
    struct Framebuffer *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_b1f7ea7b;

typedef struct shared_ptr<iglu::ManagedUniformBuffer> {
    struct ManagedUniformBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_fbaa1313;

typedef struct shared_ptr<iglu::filterkit::IFilter> {
    struct IFilter *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f184d616;

typedef struct shared_ptr<iglu::filters::filter_chain::FilterChain> {
    struct FilterChain *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_575acc32;

typedef struct shared_ptr<iglu::material::Material> {
    struct Material *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8b9aca12;

typedef struct shared_ptr<iglu::resourceloader::IResourceLoader> {
    struct IResourceLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_4362f975;

typedef struct shared_ptr<iglu::resourceloader::ResourcePool> {
    struct ResourcePool *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_36e189fa;

typedef struct shared_ptr<iglu::resourceloader::ios::ResourceLoader> {
    struct ResourceLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_79507cb0;

typedef struct shared_ptr<mobileconfig::FBMobileConfigManager> {
    struct FBMobileConfigManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f83ce10f;

typedef struct shared_ptr<mobileconfig::FBMobileConfigOverridesTable> {
    struct FBMobileConfigOverridesTable *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_ac567d75;

typedef struct shared_ptr<mobileconfig::FBMobileConfigValueStore> {
    struct FBMobileConfigValueStore *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_42bda299;

typedef struct shared_ptr<msqrd::asset::IAsyncAssetLoader> {
    struct IAsyncAssetLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_63cb3669;

typedef struct shared_ptr<msqrd::capture::ICaptureEventInput> {
    struct ICaptureEventInput *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_bd589161;

typedef struct shared_ptr<msqrd::dataprovider::GestureEvent> {
    struct GestureEvent *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_549641cb;

typedef struct shared_ptr<msqrd::dataprovider::IVideoDataProvider> {
    struct IVideoDataProvider *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_53c346d1;

typedef struct shared_ptr<msqrd::fx::IAssetLoader> {
    struct IAssetLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9ee3ad0a;

typedef struct shared_ptr<msqrd::fx::IViewport> {
    struct IViewport *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_28782c24;

typedef struct shared_ptr<msqrd::location::LocationDataProvider> {
    struct LocationDataProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a53fea94;

typedef struct shared_ptr<msqrd::logging::IRawEventLogger> {
    struct IRawEventLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_614878a6;

typedef struct shared_ptr<msqrd::motion::MotionDataProvider> {
    struct MotionDataProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_692abb54;

typedef struct shared_ptr<msqrd::platform::IScriptingLogger> {
    struct IScriptingLogger *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_19a3124c;

typedef struct shared_ptr<msqrd::platform::IShaderLogger> {
    struct IShaderLogger *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_6266c83b;

typedef struct shared_ptr<msqrd::servicehost::ServiceHost> {
    struct ServiceHost *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ad266505;

typedef struct shared_ptr<msqrd::services::IServiceConfiguration> {
    struct IServiceConfiguration *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_e7d8ca2a;

typedef struct shared_ptr<msqrd::services::IServiceMessage> {
    struct IServiceMessage *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ee1d5afb;

typedef struct shared_ptr<msqrd::services::audio::IAudioFileSink> {
    struct IAudioFileSink *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0fafba50;

typedef struct shared_ptr<msqrd::services::audio::IAudioPlatformComponentHost> {
    struct IAudioPlatformComponentHost *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_27fa6347;

typedef struct shared_ptr<msqrd::services::audio::IAudioServiceController> {
    struct IAudioServiceController *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_de289cca;

typedef struct shared_ptr<msqrd::services::audio::IMicrophoneSink> {
    struct IMicrophoneSink *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_89031f2b;

typedef struct shared_ptr<msqrd::services::network::INetworkConsentManager> {
    struct INetworkConsentManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ae76abe8;

typedef struct shared_ptr<msqrd::services::persistence::IPersistenceServiceDelegate> {
    struct IPersistenceServiceDelegate *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_5e1d7b9d;

typedef struct shared_ptr<msqrd::services::platformalgorithmdata::IPlatformAlgorithmDataSource> {
    struct IPlatformAlgorithmDataSource *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_6041c464;

typedef struct shared_ptr<msqrd::touch::TouchGesturesDataProvider> {
    struct TouchGesturesDataProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6e0e6635;

typedef struct shared_ptr<pando::Tree> {
    struct Tree *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_92d70013;

typedef struct shared_ptr<pando::consistency::Service> {
    struct Service *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_64b8a6b1;

typedef struct shared_ptr<pando::graphql::Service<pando::data::GraphQLRequest>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3c727788;

typedef struct shared_ptr<std::vector<facebook::artech::anchorservice::datawrappers::ARPlaneTrackableData>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f0c6b712;

typedef struct shared_ptr<std::vector<facebook::artech::anchorservice::datawrappers::ARPointTrackableData>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_7966fa45;

typedef struct shared_ptr<std::vector<unsigned long long>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_5896edf5;

typedef struct shared_ref<arfx::analytics::functional_correctness::IQPLUserFlow> {
    struct shared_ptr<arfx::analytics::functional_correctness::IQPLUserFlow> _field1;
} shared_ref_bf09a83c;

typedef struct shared_ref<arfx::analytics::session_waterfall::SessionWaterfallLogger> {
    struct shared_ptr<arfx::analytics::session_waterfall::SessionWaterfallLogger> _field1;
} shared_ref_fa177e0d;

typedef struct shared_ref<arfx::delivery::IEffectsManager> {
    shared_ptr_c5b1d1e2 _field1;
} shared_ref_1f011210;

typedef struct shared_ref<const msqrd::manifest::Manifest> {
    shared_ptr_8f3f58d1 _field1;
} shared_ref_a9344986;

typedef struct shared_ref<facebook::bufferpool::BufferPool> {
    struct shared_ptr<facebook::bufferpool::BufferPool> _field1;
} shared_ref_c863b8ca;

typedef struct shared_ref<facebook::cameracore::arclass::ARClassContext> {
    struct shared_ptr<facebook::cameracore::arclass::ARClassContext> _field1;
} shared_ref_49fe85fd;

typedef struct shared_ref<msqrd::analytics::IEngineAnalyticsLogger> {
    struct shared_ptr<msqrd::analytics::IEngineAnalyticsLogger> _field1;
} shared_ref_c3a6841c;

typedef struct shared_ref<msqrd::dataprovider::platform_events::PlatformEventsInput> {
    struct shared_ptr<msqrd::dataprovider::platform_events::PlatformEventsInput> _field1;
} shared_ref_4ba0611f;

typedef struct shared_ref<msqrd::experiment::IExperimentConfig> {
    struct shared_ptr<msqrd::experiment::IExperimentConfig> _field1;
} shared_ref_5cdfb9eb;

typedef struct shared_ref<msqrd::fx::IViewport> {
    shared_ptr_28782c24 _field1;
} shared_ref_2a7eb66a;

typedef struct shared_ref<msqrd::logging::IBugReportLogger> {
    struct shared_ptr<msqrd::logging::IBugReportLogger> _field1;
} shared_ref_80593006;

typedef struct shared_ref<msqrd::logging::IRawEventLogger> {
    shared_ptr_614878a6 target_;
} shared_ref_5e37a987;

typedef struct shared_ref<msqrd::plugins::BasePluginConfiguration> {
    struct shared_ptr<msqrd::plugins::BasePluginConfiguration> _field1;
} shared_ref_431945ee;

typedef struct shared_ref<msqrd::service_utils::ARNetworkDomainWhitelist> {
    struct shared_ptr<msqrd::service_utils::ARNetworkDomainWhitelist> _field1;
} shared_ref_3fe27c92;

typedef struct shared_ref<msqrd::servicehost::EffectController> {
    struct shared_ptr<msqrd::servicehost::EffectController> _field1;
} shared_ref_344acd93;

typedef struct shared_ref<msqrd::servicehost::ServiceHost> {
    shared_ptr_ad266505 _field1;
} shared_ref_f3fa7b41;

typedef struct shared_ref<msqrd::services::audio::IAudioPlatformComponentHost> {
    shared_ptr_27fa6347 _field1;
} shared_ref_a585b04f;

typedef struct shared_ref<msqrd::services::network::INetworkClientSource> {
    struct shared_ptr<msqrd::services::network::INetworkClientSource> _field1;
} shared_ref_855019a2;

typedef struct unique_ptr<arfx::delivery::IConnectionInfoProvider, std::default_delete<arfx::delivery::IConnectionInfoProvider>> {
    struct __compressed_pair<arfx::delivery::IConnectionInfoProvider *, std::default_delete<arfx::delivery::IConnectionInfoProvider>> {
        struct IConnectionInfoProvider *__value_;
    } __ptr_;
} unique_ptr_b37b340f;

typedef struct unique_ptr<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper, std::default_delete<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper>> {
    struct __compressed_pair<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper *, std::default_delete<facebook::mobile::FBMemModel::detail::TreeBuilderWrapper>> {
        struct TreeBuilderWrapper *__value_;
    } __ptr_;
} unique_ptr_3ab33de2;

typedef struct unique_ptr<facebook::tigon::TigonRequestToken, std::default_delete<facebook::tigon::TigonRequestToken>> {
    struct __compressed_pair<facebook::tigon::TigonRequestToken *, std::default_delete<facebook::tigon::TigonRequestToken>> {
        struct TigonRequestToken *__value_;
    } __ptr_;
} unique_ptr_45c18e1a;

typedef struct unique_ptr<facebook::xplat::bandwidth_estimator::EstimationStrategy, std::default_delete<facebook::xplat::bandwidth_estimator::EstimationStrategy>> {
    struct __compressed_pair<facebook::xplat::bandwidth_estimator::EstimationStrategy *, std::default_delete<facebook::xplat::bandwidth_estimator::EstimationStrategy>> {
        struct EstimationStrategy *_field1;
    } _field1;
} unique_ptr_418f6418;

typedef struct unique_ptr<igl::ITexture, std::default_delete<igl::ITexture>> {
    struct __compressed_pair<igl::ITexture *, std::default_delete<igl::ITexture>> {
        struct ITexture *_field1;
    } _field1;
} unique_ptr_b33c71c1;

typedef struct unique_ptr<msqrd::plugins::BasePluginConfiguration, std::default_delete<msqrd::plugins::BasePluginConfiguration>> {
    struct __compressed_pair<msqrd::plugins::BasePluginConfiguration *, std::default_delete<msqrd::plugins::BasePluginConfiguration>> {
        struct BasePluginConfiguration *_field1;
    } _field1;
} unique_ptr_428768e8;

typedef struct unique_ptr<msqrd::services::network::INetworkResult, std::default_delete<msqrd::services::network::INetworkResult>> {
    struct __compressed_pair<msqrd::services::network::INetworkResult *, std::default_delete<msqrd::services::network::INetworkResult>> {
        struct INetworkResult *_field1;
    } _field1;
} unique_ptr_17da2dd5;

typedef struct unique_ptr<unsigned char [], std::default_delete<unsigned char []>> {
    struct __compressed_pair<unsigned char *, std::default_delete<unsigned char []>> {
        char *_field1;
    } _field1;
} unique_ptr_ea0661fb;

typedef struct unique_ref<arfx::delivery::ICancelableToken, std::default_delete<arfx::delivery::ICancelableToken>> {
    struct unique_ptr<arfx::delivery::ICancelableToken, std::default_delete<arfx::delivery::ICancelableToken>> _field1;
} unique_ref_71c48880;

typedef struct unique_ref<msqrd::services::network::INetworkRequestRedirectHandler, std::default_delete<msqrd::services::network::INetworkRequestRedirectHandler>> {
    struct unique_ptr<msqrd::services::network::INetworkRequestRedirectHandler, std::default_delete<msqrd::services::network::INetworkRequestRedirectHandler>> _field1;
} unique_ref_05c1bdea;

typedef struct unordered_map<std::string, fbsdk::MTensor, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, fbsdk::MTensor>>> {
    struct __hash_table<std::__hash_value_type<std::string, fbsdk::MTensor>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, fbsdk::MTensor>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, fbsdk::MTensor>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, fbsdk::MTensor>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_57055d1d;

typedef struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, std::string>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_048dd119;

typedef struct unordered_set<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, std::hash<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::equal_to<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::allocator<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
    struct __hash_table<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, std::hash<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::equal_to<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>, std::allocator<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*>, std::allocator<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>>> {
            struct __hash_node_base<std::__hash_node<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::hash<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::equal_to<facebook::xplat::request_measurement::RequestMeasurementConstants::RequestType>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_set_af45f711;

typedef struct variant<FBMPSessionConnectOperation, FBMPSessionConnectPortsOperation, FBMPSessionDisconnectOperation, FBMPSessionDisconnectPortsOperation, FBMPSessionReplaceOperation, FBMPSessionRemoveOperation> {
    int which_;
    struct aligned_storage<16, 8> storage_;
} variant_d68ec686;

typedef struct vector<CGRect, std::allocator<CGRect>> {
    struct CGRect *__begin_;
    struct CGRect *__end_;
    struct __compressed_pair<CGRect *, std::allocator<CGRect>> {
        struct CGRect *__value_;
    } __end_cap_;
} vector_48bfb567;

typedef struct vector<CKComponentAnimation, std::allocator<CKComponentAnimation>> {
    struct CKComponentAnimation *_field1;
    struct CKComponentAnimation *_field2;
    struct __compressed_pair<CKComponentAnimation *, std::allocator<CKComponentAnimation>> {
        struct CKComponentAnimation *_field1;
    } _field3;
} vector_e842ebe3;

typedef struct vector<CKComponentFinalUnmountAnimation, std::allocator<CKComponentFinalUnmountAnimation>> {
    struct CKComponentFinalUnmountAnimation *_field1;
    struct CKComponentFinalUnmountAnimation *_field2;
    struct __compressed_pair<CKComponentFinalUnmountAnimation *, std::allocator<CKComponentFinalUnmountAnimation>> {
        struct CKComponentFinalUnmountAnimation *_field1;
    } _field3;
} vector_d74a892b;

typedef struct vector<CKTreeNode *, std::allocator<CKTreeNode *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<CKTreeNode *__strong *, std::allocator<CKTreeNode *>> {
        id *_field1;
    } _field3;
} vector_6b2a8336;

typedef struct vector<CMTime, std::allocator<CMTime>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CMTime *, std::allocator<CMTime>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_0fad6074;

typedef struct vector<NSString *, std::allocator<NSString *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<NSString *__strong *, std::allocator<NSString *>> {
        id *__value_;
    } __end_cap_;
} vector_5a9bb81a;

typedef struct vector<arfx::delivery::VersionedCapability, std::allocator<arfx::delivery::VersionedCapability>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<arfx::delivery::VersionedCapability *, std::allocator<arfx::delivery::VersionedCapability>> {
        int *_field1;
    } _field3;
} vector_c3ed9701;

typedef struct vector<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>*, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::IRecognizerCreator>>> {
        void *__value_;
    } __end_cap_;
} vector_5d492b96;

typedef struct vector<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>*, std::allocator<arfx::shared_ref<msqrd::dataprovider::recognitiontracking::ITrackerCreator>>> {
        void *__value_;
    } __end_cap_;
} vector_ec6924cd;

typedef struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
} vector_cd3186ef;

typedef struct vector<proxygen::CircularLogSink::RequestResponseInfo, std::allocator<proxygen::CircularLogSink::RequestResponseInfo>> {
    struct RequestResponseInfo *_field1;
    struct RequestResponseInfo *_field2;
    struct __compressed_pair<proxygen::CircularLogSink::RequestResponseInfo *, std::allocator<proxygen::CircularLogSink::RequestResponseInfo>> {
        struct RequestResponseInfo *_field1;
    } _field3;
} vector_961bcea6;

typedef struct vector<std::pair<NSObject *const, NSObject *>, std::allocator<std::pair<NSObject *const, NSObject *>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<NSObject *const, NSObject *>*, std::allocator<std::pair<NSObject *const, NSObject *>>> {
        void *_field1;
    } _field3;
} vector_b074186d;

typedef struct vector<std::pair<double, double>, std::allocator<std::pair<double, double>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<double, double>*, std::allocator<std::pair<double, double>>> {
        void *__value_;
    } __end_cap_;
} vector_259249ff;

typedef struct vector<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>, std::allocator<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>*, std::allocator<std::pair<id<FBMPProducerPort>, id<FBMPConsumerPort>>>> {
        void *_field1;
    } _field3;
} vector_5017e23a;

typedef struct vector<std::pair<int, id<NSObject>>, std::allocator<std::pair<int, id<NSObject>>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<int, id<NSObject>>*, std::allocator<std::pair<int, id<NSObject>>>> {
        void *__value_;
    } __end_cap_;
} vector_6a77d4bb;

typedef struct vector<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>, std::allocator<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>*, std::allocator<std::unique_ptr<facebook::mobile::graphstore::parser::RecordPostProcessor>>> {
        void *_field1;
    } _field3;
} vector_6dd9e400;

typedef struct vector<std::unique_ptr<facebook::mqttchannel::TopicListener>, std::allocator<std::unique_ptr<facebook::mqttchannel::TopicListener>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::unique_ptr<facebook::mqttchannel::TopicListener>*, std::allocator<std::unique_ptr<facebook::mqttchannel::TopicListener>>> {
        void *_field1;
    } _field3;
} vector_6282a862;

typedef struct vector<unsigned long long, std::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
} vector_b42bd36b;

typedef struct weak_ptr<mobileconfig::IFBMobileConfigManager> {
    struct IFBMobileConfigManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_c6f827d5;

typedef struct weak_ptr<msqrd::capture::CaptureEventService> {
    struct CaptureEventService *_field1;
    struct __shared_weak_count *_field2;
} weak_ptr_9ca7bb89;

typedef struct weak_ptr<msqrd::dataprovider::ILocationUpdateListener> {
    struct ILocationUpdateListener *_field1;
    struct __shared_weak_count *_field2;
} weak_ptr_892112ed;

#pragma mark Named Unions

union Data {
    void *big;
    struct type tiny;
};

union _Block;

union _GLKMatrix2 {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field1;
    float _field2[2][2];
    float _field3[4];
};

union _GLKMatrix3 {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
    } _field1;
    float _field2[9];
};

union _GLKMatrix4 {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
};

union _GLKQuaternion {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field1;
    struct {
        union _GLKVector3 _field1;
        float _field2;
    } _field2;
    float _field3[4];
};

union _GLKVector2 {
    struct {
        float x;
        float y;
    } ;
    struct {
        float s;
        float t;
    } ;
    float v[2];
};

union _GLKVector3 {
    CDStruct_869f9c67 _field1;
    CDStruct_869f9c67 _field2;
    CDStruct_869f9c67 _field3;
    float _field4[3];
};

union _GLKVector4 {
    struct {
        float x;
        float y;
        float z;
        float w;
    } ;
    struct {
        float r;
        float g;
        float b;
        float a;
    } ;
    struct {
        float s;
        float t;
        float p;
        float q;
    } ;
    float v[4];
};

union _IGGLKIntVector2 {
    CDStruct_1ef3fb1f _field1;
    CDStruct_1ef3fb1f _field2;
    int _field3[2];
};

union _IGGLKIntVector3 {
    CDStruct_77932685 _field1;
    CDStruct_77932685 _field2;
    CDStruct_77932685 _field3;
    int _field4[3];
};

union _IGGLKIntVector4 {
    CDStruct_a734b2e2 _field1;
    CDStruct_a734b2e2 _field2;
    CDStruct_a734b2e2 _field3;
    int _field4[4];
};

union __union<std::__variant_detail::_Trait::_Available, 3>;

union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3>;

union data_t {
    char buf[16];
    struct a8 align_;
};

#pragma mark Typedef'd Unions

typedef union {
    char emptyState;
    int value;
} CDUnion_7e831cd3;

typedef union {
    char emptyState;
    long long value;
} CDUnion_2d14f5d8;

typedef union {
    struct {
        struct _GLKVector3 v1;
        struct _GLKVector3 v2;
        struct _GLKVector3 v3;
        struct _GLKVector3 v4;
    } ;
    float v[12];
} CDUnion_7d78eca3;

// Ambiguous groups
typedef union {
    float x;
    float r;
    float s;
} CDUnion_d07f0a1e;

typedef union {
    float y;
    float g;
    float t;
} CDUnion_58f8d4fa;

