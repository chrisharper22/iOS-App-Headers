//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Mar 27 2019 15:10:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class IGFacebookUserInfoCache, IGFacebookXpostingDestination, IGLegacyLinkedFBAccountTokenManager, IGUserDefaults, NSString;
@protocol IGAPIClient, IGAnalyticsEventLoggingProtocol, IGFacebookPermissionAnnouncer, IGUserLauncherSetProviding, IGUserProviding;

@interface IGFacebookHelper : NSObject
{
    IGLegacyLinkedFBAccountTokenManager *_tokenManager;
    id <IGFacebookPermissionAnnouncer> _permissionAnnouncer;
    IGFacebookUserInfoCache *_facebookCrosspostingTokenUserInfoCache;
    id <IGUserLauncherSetProviding> _launcherSetProvider;
    NSString *_pageAccessTokenString;
    IGFacebookXpostingDestination *_optimisticDestination_DO_NOT_USE_OTHER_THAN_DESTINATION_PICKER;
    _Bool _shouldNotUseServerLinkage;
    _Bool _hasNoXpostDestination;
    _Bool _isAskingForAdditionalPermisons;
    id <IGAnalyticsEventLoggingProtocol> _analyticsLogger;
    id <IGUserProviding> _currentUser;
    id <IGAPIClient> _networker;
    IGUserDefaults *_sessionUserDefaults;
}

+ (void)load;
- (void).cxx_destruct;
@property(nonatomic) _Bool isAskingForAdditionalPermisons; // @synthesize isAskingForAdditionalPermisons=_isAskingForAdditionalPermisons;
@property(readonly, nonatomic) IGUserDefaults *sessionUserDefaults; // @synthesize sessionUserDefaults=_sessionUserDefaults;
@property(readonly, nonatomic) id <IGAPIClient> networker; // @synthesize networker=_networker;
@property(readonly, nonatomic) id <IGUserProviding> currentUser; // @synthesize currentUser=_currentUser;
@property(nonatomic) _Bool hasNoXpostDestination; // @synthesize hasNoXpostDestination=_hasNoXpostDestination;
@property(readonly, nonatomic) __weak id <IGAnalyticsEventLoggingProtocol> analyticsLogger; // @synthesize analyticsLogger=_analyticsLogger;
@property(nonatomic) _Bool shouldNotUseServerLinkage; // @synthesize shouldNotUseServerLinkage=_shouldNotUseServerLinkage;
@property(readonly, nonatomic) id <IGFacebookPermissionAnnouncer> permissionAnnouncer; // @synthesize permissionAnnouncer=_permissionAnnouncer;
- (void)_logFxUpsellsProductEvent:(int)arg1;
- (void)_refreshCurrentFBCrosspostingTokenUserInfoIfExpired;
- (id)destinationPickerDefaultDestinationId;
- (id)optimisticDestinationFromDestinationPicker;
- (void)setDestinationPickerOptimisticDestination:(id)arg1;
- (void)fetchFBCrosspostingTokenUserInfoWithFetchStrategy:(long long)arg1 shouldFetchLargeProfilePicture:(_Bool)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)clearCurrentFBCrosspostingTokenUserInfo;
- (id)crosspostingFacebookInfo;
- (id)_localUserID;
- (id)_backendUserID;
- (id)_backendProfileName;
- (id)profileName;
- (void)logSettingsScreenImpression;
- (void)logBizDestinationEvent:(id)arg1;
- (void)logDestinationMigrationEvent:(id)arg1 targetAccountID:(id)arg2 targetDestinationID:(id)arg3 targetDestinationType:(id)arg4 entryPoint:(id)arg5 userInteraction:(_Bool)arg6 message:(id)arg7;
- (void)logClientLinkageStatus:(id)arg1 entryPoint:(id)arg2;
- (void)logClearCacheEvent:(id)arg1 timeStaleInSeconds:(double)arg2;
- (id)pageID;
- (id)backendPageID;
- (id)backendPageName;
- (id)localPageID;
- (id)localPageName;
- (id)pageName;
- (void)clearForUnlink;
- (void)backfillDesinationWithUserID:(id)arg1 userName:(id)arg2 isValid:(_Bool)arg3 atEntryPoint:(id)arg4 withUserInteraction:(_Bool)arg5;
- (void)setDestinationWithPageAccessToken:(id)arg1 pageName:(id)arg2 pageID:(id)arg3 atEntryPoint:(id)arg4 withUserInteraction:(_Bool)arg5 completionBlock:(CDUnknownBlockType)arg6;
- (void)_syncPageDestinationToServerWithPageID:(id)arg1 pageName:(id)arg2 userID:(id)arg3 userName:(id)arg4 isValid:(_Bool)arg5 atEntryPoint:(id)arg6 withUserInteraction:(_Bool)arg7 completionBlock:(CDUnknownBlockType)arg8;
- (void)_syncUserDestinationToServerWithUserID:(id)arg1 userName:(id)arg2 isValid:(_Bool)arg3 atEntryPoint:(id)arg4 withUserInteraction:(_Bool)arg5 completionBlock:(CDUnknownBlockType)arg6;
- (void)setHasBackFilledLinkageToServer;
- (void)setCrosspostingFacebookInfoLastResponseTime;
- (void)updateCrosspostingFacebookInfoWithLinkedUserID:(id)arg1 linkedUserName:(id)arg2 isValidLinkedUser:(_Bool)arg3 destinationType:(id)arg4 destinationID:(id)arg5 destinationName:(id)arg6;
- (void)removeLocalPageDestinationAtEntryPoint:(id)arg1 withUserInteraction:(_Bool)arg2;
- (void)setLocalPageDestinationWithAccessToken:(id)arg1 pageName:(id)arg2 pageID:(id)arg3 atEntryPoint:(id)arg4 withUserInteraction:(_Bool)arg5;
- (id)pageAccessToken;
- (_Bool)hasAuthorizedPublishPages;
- (_Bool)hasAuthorizedManagePages;
- (_Bool)hasAuthorizedWallPost;
- (void)_storeAccessToken:(id)arg1;
- (void)clearAccessToken;
- (_Bool)isLoggedInWithCallerName:(id)arg1 fromClass:(id)arg2;
- (id)accessTokenStringWithCallerName:(id)arg1 fromClass:(id)arg2;
- (id)currentAccessTokenWithCallerName:(id)arg1 fromClass:(id)arg2;
- (_Bool)_isLoggedIn;
- (id)_accessTokenString;
- (id)_currentAccessToken;
- (_Bool)canUseServerDestinationMigration;
- (_Bool)canUseTokenlessCrossposting;
- (_Bool)isEligibleForInteropUpsells;
- (_Bool)shouldHideEntryPointForWrongPageTokenForPersonal;
- (void)checkPageTokenIfNecessary;
- (void)validateAndBackfillPageTokenWithSuccessBlock:(CDUnknownBlockType)arg1 failureBlock:(CDUnknownBlockType)arg2;
- (void)setIsAskingForAdditionalPermissions:(_Bool)arg1;
- (_Bool)takeIsAskingForAdditionalPermissions;
- (_Bool)hasBackFilledLinkageToServer;
- (_Bool)isCreatorAccountEligibleForXpostingIfOnlyLinkedOnServer;
- (_Bool)isPersonalAccountEligibleForXpostingIfOnlyLinkedOnServer;
- (_Bool)destinationInconsistencyCheckAtEntryPoint:(id)arg1;
- (void)setDestinationMigratedToServer:(_Bool)arg1;
- (void)setDestinationInconsistent:(_Bool)arg1;
- (_Bool)shouldOnlyUseServerLinkage;
- (_Bool)isDestinationInconsistent;
- (_Bool)isDestinationMigratedToServer;
- (_Bool)isPostingToManagedPage;
- (void)addListenerToFacebookPermissionAnnouncer:(id)arg1;
- (void)_notifyAuthCompleted;
- (void)_notifyHardLinkedCompleted:(_Bool)arg1;
- (void)_fbDidLoginSendCredentialsFromSurface:(unsigned long long)arg1 facebookLogFlow:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)handleAccessTokenGranted:(id)arg1 fromSurface:(unsigned long long)arg2 facebookLogFlow:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)initWithCurrentUser:(id)arg1 networker:(id)arg2 launcherSetProvider:(id)arg3 sessionUserDefaults:(id)arg4 analyticsLogger:(id)arg5;

@end

