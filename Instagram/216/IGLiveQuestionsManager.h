//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Mar 27 2019 15:10:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class IGLiveBroadcastLogger, IGLivePlaybackLoggingContext, IGLiveQuestionModel, IGUserStore, NSArray, NSMutableDictionary, NSMutableSet;
@protocol IGAPIClient, IGLiveQuestionsManagerAnnouncer;

@interface IGLiveQuestionsManager : NSObject
{
    id <IGAPIClient> _networker;
    IGUserStore *_userStore;
    id <IGLiveQuestionsManagerAnnouncer> _announcer;
    NSMutableSet *_answeredQuestionPks;
    NSMutableDictionary *_deletedQuestionPksAndRetryCount;
    NSMutableSet *_reportedQuestionPks;
    NSMutableSet *_likedQuestionPks;
    NSArray *_availableQuestions;
    IGLiveQuestionModel *_selectedQuestion;
    IGLiveBroadcastLogger *_broadcastLogger;
    IGLivePlaybackLoggingContext *_playbackLoggingContext;
}

- (void).cxx_destruct;
@property(retain, nonatomic) IGLivePlaybackLoggingContext *playbackLoggingContext; // @synthesize playbackLoggingContext=_playbackLoggingContext;
@property(retain, nonatomic) IGLiveBroadcastLogger *broadcastLogger; // @synthesize broadcastLogger=_broadcastLogger;
@property(retain, nonatomic) IGLiveQuestionModel *selectedQuestion; // @synthesize selectedQuestion=_selectedQuestion;
- (void)notifyQuestionTrayImpressionWithViewMode:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *storiesQuestions;
@property(readonly, copy, nonatomic) NSArray *liveQuestions;
@property(readonly, copy, nonatomic) NSArray *availableQuestions; // @synthesize availableQuestions=_availableQuestions;
- (_Bool)isQuestionActive:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *unselectedUnansweredQuestions;
@property(readonly, copy, nonatomic) NSArray *unselectedAnsweredQuestions;
@property(readonly, copy, nonatomic) NSArray *unansweredQuestions;
@property(readonly, copy, nonatomic) NSArray *answeredQuestions;
- (long long)maxLikeCount;
- (_Bool)isQuestionLiked:(id)arg1;
- (void)markQuestionReported:(id)arg1;
- (_Bool)isQuestionAnswered:(id)arg1;
- (void)markQuestionAnswered:(id)arg1;
- (void)endQuestionSession;
- (void)startQuestionSession;
- (void)_fetchQuestionsWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchAvailableQuestionsWithBroadcastId:(id)arg1 questionTypesToFetch:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)fetchStoryQuestionsWithCompletion:(CDUnknownBlockType)arg1;
- (void)deleteQuestion:(id)arg1 withBroadcastId:(id)arg2;
- (void)setQuestion:(id)arg1 withBroadcastId:(id)arg2 asLiked:(_Bool)arg3;
- (void)clearQuestions;
- (void)removeListener:(id)arg1;
- (void)addListener:(id)arg1;
- (id)initWithNetworker:(id)arg1 userStore:(id)arg2;

@end

