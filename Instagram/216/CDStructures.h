//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Mar 27 2019 15:10:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class AVCaptureDevice, BKContext, BKLispyExpression, BKObjectSet, BKParseResult, FBCameraAction, FBCaptureDeviceConfiguration, FBDiskVideoRecorderDiskResults, FBRCDCache, FBVideoBroadcastSessionTimingDataModel, FOAGridLayoutConfig, FOAOmniGridLayoutProps, FOAOmniGridRoundedCornerOptions, FOAOmniGridViewModel, IGBloksScreenNavbarCustomTitle, IGBloksTTRCListener, MISSING_TYPE, NSArray, NSDictionary, NSError, NSMapTable, NSMutableDictionary, NSNumber, NSObject, NSSet, NSString, NSURL, UIColor, UIImage, UIView;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AMLFaceTrackerOcean {
    CDUnknownFunctionPointerType *_vptr$IFaceTracker;
    CDUnknownFunctionPointerType *_vptr$QuickPerformanceLoggable;
    struct shared_ptr<facebook::perflogger::QPLBase> performanceLogger_;
    struct unique_ptr<aml::facetracker::AMLFaceTrackerOcean::Impl, std::default_delete<aml::facetracker::AMLFaceTrackerOcean::Impl>> impl_;
    unsigned char meshType_;
    unsigned char trackerMode_;
    struct unique_ref<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> referenceFaceShapeLoader_;
};

struct ARPointTrackable {
    CDUnknownFunctionPointerType *_field1;
    struct Matrix<float, 4, 4, 0, 4, 4> _field2;
    struct uuid _field3;
    struct shared_timed_mutex _field4;
    _Bool _field5;
};

struct AdaptiveBitrateBandwidthBasedParameters {
    int smallQueueSizeMs;
    int bigQueueSizeMs;
    int decreaseBitrateAmountBps;
    int increaseBitrateAmountBps;
    int timeSinceLastBitrateChangeThresholdMs;
};

struct AdaptiveBitrateConfig {
    _Bool enabled;
    int minBitrate;
    int maxBitrate;
    int maxBitrateWifi;
    int maxBitrate4G;
    int statisticsWindowSize;
    double statisticsSmoothFactor;
    int qualityQueryFrameInterval;
    basic_string_0ec669f3 resolutionMappingBppJsonString;
    struct AdaptiveBitrateExperimentalParameters experimentalParameters;
    struct AdaptiveBitrateBandwidthBasedParameters bandwidthBasedAbrParameters;
};

struct AdaptiveBitrateExperimentalParameters {
    int timeSinceLastResolutionChangeThresholdMs;
    float bitsPerPixelRatio;
};

struct Allocated {
    int *_field1;
    unsigned long long _field2;
};

struct Annotation;

struct AppForegroundStateListener;

struct AppleLiveStreamingClient;

struct AppleLiveStreamingPipelineConfig {
    struct AppleLiveStreamingThreadingConfig threadingConfig;
    _Bool adjustDVRTimestamps;
    _Bool packageAACFramesIndividualy;
};

struct AppleLiveStreamingThreadingConfig {
    _Bool useAsyncAudioSource;
    _Bool useAsyncVideoSource;
    _Bool useAsyncAudioEncoder;
    _Bool useAsyncVideoEncoder;
    _Bool audioEncoderHighQosClass;
    _Bool videoEncoderHighQosClass;
};

struct AppleStreamingSessionCallbacksHybrid;

struct AppleVideoAdapterConfig {
    int minFPS;
    int maxFPS;
};

struct AssetCache;

struct AsyncDetector;

struct AsyncExecutor;

struct AsyncInvoker {
    CDUnknownFunctionPointerType *_vptr$MessageHandler;
    struct atomic<int> pending_invocations_;
    struct scoped_refptr<rtc::RefCountedObject<rtc::Event>> invocation_complete_;
    struct atomic<bool> destroying_;
};

struct AudioConfig {
    int sampleRate;
    int bitRate;
    int channels;
    unsigned char profile;
};

struct AudioDecoderFactory;

struct AudioDeviceModule;

struct AudioEncoderConfig {
    int sampleRate;
    int bitRate;
    int channels;
    unsigned char profile;
};

struct AudioEncoderErrorReporter {
    CDUnknownFunctionPointerType *_vptr$AudioEncoderErrorReporter;
};

struct AudioEncoderFactory;

struct AudioProcessing;

struct AudioSourceInterface;

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct AudioTrackInterface;

struct AudioValidatorParams {
    _Bool enabled;
    struct duration<double, std::ratio<1, 1>> timestampForwardJumpToleranceUpperBound;
    struct duration<double, std::ratio<1, 1>> timestampForwardJumpToleranceLowerBound;
    struct duration<double, std::ratio<1, 1>> loggerEpochDuration;
    int loggerSamplesPerEpoch;
};

struct BKAnimation<BKInterpolation<BKBloksDimension>> {
    CDUnknownBlockType _onUpdate;
    CDUnknownBlockType _onComplete;
    double _duration;
    struct BKInterpolation<BKBloksDimension> _interpolation;
    struct BKBloksDimension _currentValue;
    double _startTimestamp;
};

struct BKAnimation<BKInterpolation<UIColor *>> {
    CDUnknownBlockType _onUpdate;
    CDUnknownBlockType _onComplete;
    double _duration;
    struct BKInterpolation<UIColor *> _interpolation;
    UIColor *_currentValue;
    double _startTimestamp;
};

struct BKAnimation<BKInterpolation<double>> {
    CDUnknownBlockType _onUpdate;
    CDUnknownBlockType _onComplete;
    double _duration;
    struct BKInterpolation<double> _interpolation;
    double _currentValue;
    double _startTimestamp;
};

struct BKBloksAnimation;

struct BKBloksBottomSheetModel {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    _Bool _field5;
    _Bool _field6;
    id _field7;
    _Bool _field8;
    _Bool _field9;
    long long _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
};

struct BKBloksCollectionSpacings {
    double itemSpacing;
    double firstItemSpacing;
    double lastItemSpacing;
};

struct BKBloksDimension {
    unsigned long long type;
    double value;
};

struct BKBloksSurfaceCoreProps {
    BKObjectSet *objectSet;
    NSString *appID;
    NSDictionary *params;
    unsigned long long secondsCacheIsValidFor;
    NSString *customCacheKey;
    BKParseResult *initialParseResult;
    struct BKBloksTTRCContext ttrcContext;
    NSDictionary *externalVariables;
    UIView *loadingView;
    CDUnknownBlockType errorViewProvider;
    CDUnknownBlockType onLoading;
    CDUnknownBlockType onSuccess;
    CDUnknownBlockType onFailure;
    CDUnknownBlockType onUpdateView;
    CDUnknownBlockType onViewInvalidateSize;
    CDUnknownBlockType onSizeRangeForBoundingSize;
    _Bool parseAsync;
    NSString *onExitAction;
    CDStruct_54f302a6 actionLoadingOptions;
};

struct BKBloksTTRCContext {
    int markerId;
    NSObject *listener;
    NSDictionary *analyticsExtras;
};

struct BKCdsBottomSheetScreenModel {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    unsigned long long _field6;
    long long _field7;
    id _field8;
};

struct BKCdsOpenScreenOptions {
    long long mode;
    long long dragToDismiss;
    CDUnknownBlockType onDismiss;
    long long backgroundMode;
    _Bool disableAutorotate;
};

struct BKCollectionPendingScrollEvent {
    long long index;
    unsigned long long scrollPosition;
    _Bool animated;
};

struct BKImageComponentOptions {
    long long imageContentMode;
    _Bool showLoadingIndicator;
    _Bool enableRetries;
    UIColor *tintColor;
};

struct BKInterpolation<BKBloksDimension> {
    struct BKBloksDimension _from;
    struct BKBloksDimension _to;
    CDUnknownBlockType _curve;
};

struct BKInterpolation<UIColor *> {
    UIColor *_from;
    UIColor *_to;
    CDUnknownBlockType _curve;
};

struct BKInterpolation<double> {
    double _from;
    double _to;
    CDUnknownBlockType _curve;
};

struct BKLayoutControllersManager {
    NSMapTable *_clientIDToLayoutController;
};

struct BKLispyEnvironment {
    struct shared_ptr<const std::vector<NSString *>> keyPath;
    NSDictionary *variablesOverride;
    NSDictionary *manifestEntriesOverride;
    NSDictionary *embeddedPayloads;
    NSMutableDictionary *variableLog;
    BKContext *bkContext_DO_NOT_ADD_NEW_CALLSITE_OR_YOUR_SIGNATURE_WILL_BREAK_SOON;
    NSString *loggingId;
};

struct BaseTimestampManagerService;

struct Beat;

struct BitrateAdjuster;

struct BitrateAllocationStrategy;

struct BroadcastSessionStatsProvider;

struct BufferPool;

struct CATransform3D {
    double m11;
    double m12;
    double m13;
    double m14;
    double m21;
    double m22;
    double m23;
    double m24;
    double m31;
    double m32;
    double m33;
    double m34;
    double m41;
    double m42;
    double m43;
    double m44;
};

struct CCScanner;

struct CCScannerConfig {
    basic_string_0ec669f3 _field1;
    basic_string_0ec669f3 _field2;
    basic_string_0ec669f3 _field3;
    basic_string_0ec669f3 _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    unsigned long long _field9;
    unsigned long long _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    struct unordered_set<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> _field14;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGColor;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CKSizeRange {
    struct CGSize min;
    struct CGSize max;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct CMSampleBufferSmartPtr {
    CDUnknownFunctionPointerType *_field1;
    struct opaqueCMSampleBuffer *_field2;
    struct unique_ptr<mediastreaming::Resource<int>, std::default_delete<mediastreaming::Resource<int>>> _field3;
};

struct CallInvoker;

struct Chromaticity {
    float _field1;
    float _field2;
};

struct Client;

struct ClientProvider;

struct Clip;

struct CobTimeouts;

struct CodecSpecificInfo {
    int _field1;
    union CodecSpecificInfoUnion _field2;
    struct optional<webrtc::GenericFrameInfo> _field3;
    struct optional<webrtc::TemplateStructure> _field4;
};

struct CodecSpecificInfoH264 {
    int _field1;
    unsigned char _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CodecSpecificInfoH265 {
    int _field1;
    unsigned char _field2;
};

struct CodecSpecificInfoVP8 {
    _Bool _field1;
    unsigned char _field2;
    _Bool _field3;
    char _field4;
    _Bool _field5;
    unsigned long long _field6[3];
    unsigned long long _field7;
    unsigned long long _field8[3];
    unsigned long long _field9;
};

struct CodecSpecificInfoVP9 {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    unsigned char _field6;
    _Bool _field7;
    _Bool _field8;
    unsigned char _field9;
    unsigned long long _field10;
    _Bool _field11;
    unsigned short _field12[8];
    unsigned short _field13[8];
    struct GofInfoVP9 _field14;
    unsigned char _field15;
    unsigned char _field16[3];
    _Bool _field17;
};

struct ColorSpace {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    int _field4;
    int _field5;
    int _field6;
    struct optional<webrtc::HdrMetadata> _field7;
};

struct Composition;

struct CompressedTuple<std::allocator<int>, unsigned long> {
    unsigned long long _field1;
};

struct CompressedTuple<std::allocator<webrtc::GenericFrameInfo::DecodeTargetIndication>, unsigned long> {
    unsigned long long _field1;
};

struct Constraint;

struct Constraints {
    struct Constraint *_field1;
    struct Constraint *_field2;
    struct __compressed_pair<webrtc::MediaConstraints::Constraint *, std::allocator<webrtc::MediaConstraints::Constraint>> {
        struct Constraint *_field1;
    } _field3;
};

struct ContextualMusicGraph;

struct CopyOnWriteBuffer {
    struct scoped_refptr<rtc::RefCountedObject<rtc::BufferT<unsigned char, false>>> _field1;
};

struct CriticalSection {
    struct _opaque_pthread_mutex_t mutex_;
    struct _opaque_pthread_t *thread_;
    int recursion_count_;
};

struct CryptoOptions {
    struct Srtp _field1;
    struct SFrame _field2;
};

struct CxxModule;

struct DGWClient;

struct DataBuffer;

struct DataChannelDelegateAdapter;

struct DataChannelInit {
    _Bool reliable;
    _Bool ordered;
    int maxRetransmitTime;
    int maxRetransmits;
    basic_string_0ec669f3 protocol;
    _Bool negotiated;
    int id;
};

struct DataChannelInterface;

struct DefaultClient;

struct DenseStorage<float, 16, 4, 4, 0> {
    struct plain_array<float, 16, 0, 16> _field1;
};

struct DetectionResult;

struct DetectorConfig {
    basic_string_0ec669f3 _field1;
    float _field2;
    struct VotingConfig _field3;
    struct VotingConfig _field4;
    struct VotingConfig _field5;
    struct VotingConfig _field6;
    struct VotingConfig _field7;
    struct unordered_set<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> _field8;
};

struct DiskVideoRecorderConfig {
    int availableSpaceThresholdInMB;
    struct duration<double, std::ratio<1, 1>> checkAvailableSpaceIntervalInSeconds;
    struct duration<double, std::ratio<1, 1>> movieFragmentIntervalInSeconds;
    struct VideoConfig videoConfig;
    struct AudioConfig audioConfig;
    _Bool enablePartialRecordingIfNoEnoughSpace;
    int minValidDurationMs;
    int maxValidDvrLiveDurationDiffMs;
    double frameCheckRateThreshold;
    int frameCheckTimePeriod;
    unsigned long long wifiDVRUploadFileSizeThresholdInBytes;
    unsigned long long lteDVRUploadFileSizeThresholdInBytes;
    unsigned long long cellDVRUploadFileSizeThresholdInBytes;
    unsigned long long offlineStreamingDVRFileSizeLimitInBytes;
    _Bool enableSmartDVRUpload;
    _Bool enableDebugLogging;
};

struct DtmfSenderInterface;

struct DvrManagerService;

struct Either<NSError *, FBDiskVideoRecorderDiskResults *> {
    NSError *_left;
    FBDiskVideoRecorderDiskResults *_right;
    _Bool _isLeft;
};

struct EncodedImage {
    unsigned int _field1;
    unsigned int _field2;
    long long _field3;
    long long _field4;
    int _field5;
    int _field6;
    unsigned char _field7;
    _Bool _field8;
    int _field9;
    int _field10;
    struct PlayoutDelay _field11;
    struct Timing _field12;
    struct CopyOnWriteBuffer _field13;
    unsigned long long _field14;
    char *_field15;
    unsigned long long _field16;
    unsigned int _field17;
    struct optional<int> _field18;
    struct optional<webrtc::ColorSpace> _field19;
};

struct EventBase {
    CDUnknownFunctionPointerType *_vptr$TimeoutManager;
    struct unique_ptr<folly::TimeoutManager::CobTimeouts, std::default_delete<folly::TimeoutManager::CobTimeouts>> cobTimeouts_;
    CDUnknownFunctionPointerType *_vptr$DrivableExecutor;
    CDUnknownFunctionPointerType *_vptr$IOExecutor;
    CDUnknownFunctionPointerType *_vptr$SequencedExecutor;
    CDUnknownFunctionPointerType *_vptr$ScheduledExecutor;
    duration_15f873c1 intervalDuration_;
    struct unique_ptr<folly::HHWheelTimerBase<std::chrono::milliseconds>, folly::DelayedDestruction::Destructor> wheelTimer_;
    struct list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> loopCallbacks_;
    struct list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> runBeforeLoopCallbacks_;
    struct Synchronized<boost::intrusive::list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>>, folly::SharedMutexImpl<false>> onDestructionCallbacks_;
    void *runOnceCallbacks_;
    struct atomic<bool> stop_;
    struct atomic<std::__thread_id> loopThread_;
    struct unique_ptr<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>, std::default_delete<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>>> queue_;
    long long loopKeepAliveCount_;
    struct atomic<long> loopKeepAliveCountAtomic_;
    _Bool loopKeepAliveActive_;
    struct duration<long long, std::ratio<1, 1000000>> maxLatency_;
    struct SmoothLoopTime avgLoopTime_;
    struct SmoothLoopTime maxLatencyLoopTime_;
    _Bool dampenMaxLatency_;
    struct Function<void ()> maxLatencyCob_;
    _Bool enableTimeMeasurement_;
    unsigned long long nextLoopCnt_;
    unsigned long long latestLoopCnt_;
    struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> startWork_;
    _Bool invokingLoop_;
    struct shared_ptr<folly::EventBaseObserver> observer_;
    unsigned int observerSampleCount_;
    struct ExecutionObserver *executionObserver_;
    basic_string_0ec669f3 name_;
    struct unordered_map<unsigned long, std::unique_ptr<void, void (*)(void *)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::unique_ptr<void, void (*)(void *)>>>> localStorage_;
    struct Synchronized<std::unordered_set<folly::detail::EventBaseLocalBase *>, folly::SharedMutexImpl<false>> localStorageToDtor_;
    struct basic_once_flag<folly::SharedMutexImpl<false>, std::atomic> virtualEventBaseInitFlag_;
    struct unique_ptr<folly::VirtualEventBase, std::default_delete<folly::VirtualEventBase>> virtualEventBase_;
    struct unique_ptr<folly::EventBaseBackendBase, std::default_delete<folly::EventBaseBackendBase>> evb_;
};

struct EventBaseBackendBase;

struct EventBaseObserver;

struct ExecutionObserver;

struct Executor;

struct FBARCameraCaptureControllerSwitchBundle {
    unsigned char startType;
    FBCaptureDeviceConfiguration *captureDeviceConfiguration;
    FBCameraAction *cameraAction;
    NSObject *cameraActionCompletionQueue;
    CDUnknownBlockType cameraActionCompletion;
};

struct FBBracketedCaptureConfiguration {
    NSArray *exposureValues;
    CDUnknownFunctionPointerType resolverFunction;
    _Bool enabled;
    _Bool autoEnhanceEnabled;
    unsigned long long downsampleWidth;
};

struct FBCFRefGuard<__CVBuffer *> {
    struct __CVBuffer *_field1;
};

struct FBCameraConfiguration {
    _Bool shouldFrontCameraVideoMirrored;
    long long startingDevicePosition;
    long long initialFlashMode;
    NSString *initialSessionPreset;
    _Bool isSingleConfigurationAVCaptureSessionStart;
    unsigned char initialTargetFPS;
    _Bool audioCaptureIgnoreRTCClientNotification;
    _Bool automaticallyConfiguresApplicationAudioSession;
    _Bool canPreConfigureAudioSession;
    _Bool shouldRemoveInputsAndOutputsWhenStopped;
    _Bool enableEchoCancellation;
    _Bool videoBufferTransformEnabled;
    long long videoStabilizationMode;
    _Bool setVideoStabilizationModeAfterStart;
    _Bool subjectAreaChangeMonitoring;
    float lowLightDetectionThreshold;
    float lowLightExposureBias;
    struct FBBracketedCaptureConfiguration bracketedCaptureConfiguration;
    double maxZoomFactor;
    _Bool keepAudioSessionActiveDuringCameraSession;
    _Bool markAVWriterInputsAsFinishedWhenRecordingStops;
    CDUnknownBlockType disableARKitCacheBlock;
    struct CGSize preferredWorldTrackingResolution;
    _Bool planeDetectionEnabled;
    _Bool produceWorldTrackingFrames;
    _Bool worldTrackingAlignmentGravity;
    _Bool lowLightDetectorEnabled;
    _Bool flashSceneDetectorEnabled;
    _Bool audioCaptureEnabled;
    NSArray *preferredCaptureDeviceTypes;
    NSArray *captureDevices;
    unsigned int photoPixelFormat;
    struct FBCaptureAutoExposureConfiguration autoExposureConfiguration;
    struct FBCapturePOIDetectorConfiguration detectorConfiguration;
    _Bool fbAudioEnabled;
    NSArray *photoCapturePlugins;
    _Bool useFBMultiCaptureManager;
    _Bool enableMultiCapture;
    struct CGSize customizedCapturedPhotoResolution;
    struct FBPhotoCaptureConfiguration photoCaptureConfiguration;
    _Bool enableSceneDepth;
    _Bool livePhotoEnabled;
    _Bool includeTrackingDataInVideoData;
    struct FBCameraSimulationConfiguration cameraSimulationConfiguration;
    _Bool stereoEnabled;
};

struct FBCameraSimulationConfiguration {
    CDUnknownBlockType videoFilePathProvider;
    CDUnknownBlockType imageFilePathProvider;
};

struct FBCaptureAutoExposureConfiguration {
    _Bool enableAutoExposureOnTrackedObjects;
    _Bool trackVisibleFaces;
    _Bool trackVisibleBodies;
    _Bool trackVisibleCats;
    _Bool trackVisibleDogs;
    _Bool trackQRCodes;
};

struct FBCaptureCoordinatorConfiguration {
    struct FBCameraConfiguration _field1;
    struct FBRendererConfiguration _field2;
    struct FBPreviewConfiguration _field3;
    struct FBGestureConfiguration _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    double _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
};

struct FBCapturePOIDetectorConfiguration {
    long long detectorType;
    double executionTimeInterval;
    double minimumBoundsChange;
    _Bool drawDebugBounds;
};

struct FBDeviceBatteryInfo {
    long long state;
    double level;
    _Bool lowPowerModeEnabled;
};

struct FBEventMessageInputSource;

struct FBGNVReporterContext {
    double gestureExpireTime;
    double navCheckDelayTime;
    unsigned long long maxNavCheckCount;
    unsigned long long maxNavCheckRepeatCount;
    _Bool shouldGenerateLinkClick;
    double touchMoveThreshold;
    _Bool shouldDequeueFirstNavChecker;
    _Bool shouldCheckMoveTriggeredNav;
    _Bool shouldUseInlineFuncNavCheck;
    _Bool shouldCheckModuleUniqueIndex;
    NSString *jsonStringForModulesWithMTNav;
    id loggerPtr;
};

struct FBGestureConfiguration {
    _Bool _field1;
};

struct FBMPDataMetadata {
    unsigned long long _field1;
    unsigned long long _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
};

struct FBMapCameraConfiguration {
    id _field1;
    double _field2;
    struct UIEdgeInsets _field3;
};

struct FBMapConfiguration {
    unsigned long long _field1;
    int _field2;
    id _field3;
    struct FBMapCameraConfiguration _field4;
    struct CGSize _field5;
    id _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    struct FBMapDebugConfiguration _field17;
};

struct FBMapCoordinateBox {
    struct CLLocationCoordinate2D _field1;
    struct CLLocationCoordinate2D _field2;
};

struct FBMapDebugConfiguration {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    id _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    _Bool _field9;
};

struct FBMapLoggerMapState {
    struct FBMapCoordinateBox _field1;
    double _field2;
    struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> _field3;
    struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> _field4;
};

struct FBMobileConfigOverridesTable;

struct FBMobileConfigQEGroupInfo;

struct FBNetworkSpeedTestStatus {
    int _field1;
    double _field2;
    unsigned long long _field3;
    id _field4;
    _Bool _field5;
};

struct FBPayAccessibilityDataModel {
    NSString *label;
    unsigned long long trait;
    NSString *hintText;
};

struct FBPhotoCaptureConfiguration {
    _Bool stillImageCaptureEnabled;
    _Bool isFlipFrontCameraOutputEnabled;
    _Bool stopLivePreviewOnPhotoCapture;
    _Bool delayImageCaptureWhileAdjustingCamera;
    _Bool setFlashModeWithCapturePhotoOutputApiEnabled;
    _Bool setFlashModeOnPhotoSettingsForSceneMonitoring;
};

struct FBPreviewConfiguration {
    _Bool _field1;
    id _field2;
    struct CGRect _field3;
    _Bool _field4;
};

struct FBRendererConfiguration {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    int _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
};

struct FBSystemAudioCaptureSessionInteractorConfiguration {
    _Bool shouldActivateAlreadyActiveSession;
    _Bool shouldClearSessionInterruptionState;
};

struct FBTTRCSynchronizationContext {
    double _field1;
    unsigned long long _field2;
};

struct FBVideoBroadcastBaseSessionParameters {
    struct FBVideoBroadcastSessionTimestampConfig _field1;
    id _field2;
};

struct FBVideoBroadcastInputSource;

struct FBVideoBroadcastMediaStreamingSessionParameters {
    NSString *broadcastID;
    _Bool sandbox;
    _Bool forceNonSecureConnection;
    _Bool enableTcpFallback;
    unsigned int connectionTimeoutMs;
    struct AppleLiveStreamingPipelineConfig pipelineConfig;
    NSString *persistentCacheDir;
    struct Optional<facebook::mobile::xplat::livestreaming::NetworkLagConfig> networkLagConfig;
    NSObject *sampleBufferQueue;
    FBVideoBroadcastSessionTimingDataModel *timingDataModel;
    id messageChannel;
    CDStruct_b3f291cd sessionConfig;
    struct VideoValidatorParams videoValidatorParams;
    struct AudioValidatorParams audioValidatorParams;
    struct vector<std::pair<int, int>, std::allocator<std::pair<int, int>>> variableFPSConfig;
    struct AppleVideoAdapterConfig adapterConfig;
    struct HardLimit liveEncoderHardLimit;
    int resourceTrackingPoolCapacity;
    _Bool useStatsRepotringServiceV2;
    long long sdkInterruptionLimitInSecs;
    _Bool enableBaseTimestamp;
    int resolutionLadder;
    struct InitialBitratePredictionConfig initialBitratePredictionConfig;
    Optional_48d232f6 gopSizeRecomendationOnCellSeconds;
    CDUnknownBlockType smartDVRUploadDecisionQuery;
};

struct FBVideoBroadcastRtmpSwapStats {
    double audioBufferDurationSeconds;
    double videoBufferDurationSeconds;
    double lastAudioPts;
    double lastVideoPts;
    double lastAudioPtsStreamTime;
    double callStartedToSocketWritabilityLatencySeconds;
    double callJoinedToSocketWritabilityLatencySeconds;
};

struct FBVideoBroadcastSessionLoggingInfo {
    NSString *reason;
    NSError *error;
    _Bool remoteEnded;
};

struct FBVideoBroadcastSessionStats {
    struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> adaptiveBitrateStats;
    CDStruct_1b6d18a9 pipelineLatency;
    CDStruct_1b6d18a9 lastSentAudioPts;
    CDStruct_1b6d18a9 lastSentVideoPts;
    double throughput;
    unsigned long long totalBytesSent;
    unsigned long long elapsedTimeInMs;
    CDStruct_1b6d18a9 lastAudioSampleBufferPts;
    CDStruct_1b6d18a9 lastVideoSampleBufferPts;
    double videoQueueSizeInSeconds;
    double audioQueueSizeInSeconds;
    unsigned long long queueSizeInBytes;
    unsigned long long framerateSentToTransport;
    unsigned long long bitrateBpsSentToTransport;
    double batteryChargeLevel;
    long long batteryStatus;
    unsigned long long totalVideoBytesSent;
    unsigned long long totalAudioBytesSent;
    unsigned long long audioPacketsLost;
    unsigned long long audioPacketsSent;
    unsigned long long videoPacketsLost;
    unsigned long long videoPacketsSent;
    unsigned long long videoFramesEncoded;
    _Bool bandwidthLimitedResolution;
    _Bool cpuLimitedResolution;
    unsigned int encodeUsagePercent;
    unsigned int averageEncodeMs;
    unsigned long long frameRateSent;
    unsigned long long nacksReceived;
    unsigned long long firsReceived;
    unsigned long long plisReceived;
};

struct FBVideoBroadcastSessionTimestampConfig {
    _Bool shiftTimestampBase;
    _Bool collapseGapsInAudio;
    _Bool collapseGapsInVideo;
};

struct FBVideoBroadcastStreamTimestampGapDetector {
    CDStruct_1b6d18a9 _lastAudioPTS;
    CDStruct_1b6d18a9 _lastAudioDuration;
    CDStruct_1b6d18a9 _accumulatedGap;
    long long _gapCounter;
};

struct FOAGridLayoutInput {
    struct CGSize size;
    NSArray *layoutInputItems;
    FOAGridLayoutConfig *config;
};

struct FOAOmniGridItemViewModelReader {
    CDUnknownFunctionPointerType getUser;
    CDUnknownFunctionPointerType getItemType;
    CDUnknownFunctionPointerType getIsVideoOff;
    CDUnknownFunctionPointerType getPriority;
    CDUnknownFunctionPointerType getDisallowedInFloatingSelfView;
    CDUnknownFunctionPointerType diffingKeyGenerator;
};

struct FaceTrackerWrapper {
    struct AMLFaceTrackerOcean faceTracker;
};

struct FileRotatingLogSink;

struct FrameDecryptorInterface;

struct FrameEncryptorInterface;

struct Function<void ()> {
    union Data {
        void *big;
        struct type tiny;
    } data_;
    CDUnknownFunctionPointerType call_;
    CDUnknownFunctionPointerType exec_;
};

struct GenericFrameInfo {
    int _field1;
    int _field2;
    struct InlinedVector<int, 10, std::allocator<int>> _field3;
    struct InlinedVector<webrtc::GenericFrameInfo::DecodeTargetIndication, 10, std::allocator<webrtc::GenericFrameInfo::DecodeTargetIndication>> _field4;
};

struct GofInfoVP9 {
    unsigned long long _field1;
    unsigned char _field2[255];
    _Bool _field3[255];
    unsigned char _field4[255];
    unsigned char _field5[255][3];
    unsigned short _field6;
};

struct GraphConfig;

struct H264BitstreamParser {
    CDUnknownFunctionPointerType *_vptr$BitstreamParser;
    struct optional<webrtc::SpsParser::SpsState> sps_;
    struct optional<webrtc::PpsParser::PpsState> pps_;
    struct optional<int> last_slice_qp_delta_;
};

struct HDRGraph;

struct HardLimit {
    _Bool enabled;
    double bitrateMultiplier;
    struct duration<double, std::ratio<1, 1>> timeInterval;
};

struct HdrMasteringMetadata {
    struct Chromaticity _field1;
    struct Chromaticity _field2;
    struct Chromaticity _field3;
    struct Chromaticity _field4;
    float _field5;
    float _field6;
};

struct HdrMetadata {
    struct HdrMasteringMetadata _field1;
    int _field2;
    int _field3;
};

struct I420BufferInterface;

struct ICommandQueue;

struct IDevice;

struct IGAssetSelectionMechanic {
    unsigned long long options;
    unsigned long long maxSelectionCount;
};

struct IGAvatarCurrentSelection {
    NSString *selectedPoseId;
    NSString *selectedBackgroundId;
};

struct IGBloksScreenBottomSheetModel {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    struct IGBloksScreenNavbarModel _field5;
    id _field6;
    unsigned long long _field7;
    _Bool _field8;
    long long _field9;
    struct {
        _Bool _field1;
        _Bool _field2;
    } _field10;
};

struct IGBloksScreenModel {
    NSString *analyticsModule;
    NSString *screenId;
    _Bool needsLayoutOnKeyboardEvent;
    NSString *appId;
    struct IGBloksScreenNavbarModel navbarModel;
    _Bool rendersInUnsafeArea;
    _Bool rendersInUnsafeAreaTop;
    _Bool rendersInUnsafeAreaBottom;
    long long tabbarBehavior;
    BKParseResult *initialContent;
    id onExitLispyExpression;
    NSNumber *ttiMarkerId;
    NSNumber *ttiMarkerInstanceId;
    _Bool shouldDisableAnimation;
    unsigned long long secondsCacheIsValidFor;
    NSString *customCacheKey;
    _Bool shouldDisableSwiping;
    NSDictionary *analyticsExtras;
    CDStruct_54f302a6 actionLoadingOptions;
};

struct IGBloksScreenNavbarModel {
    long long iosStatusBarStyle;
    NSString *title;
    _Bool hideNavbar;
    _Bool hideBackButton;
    _Bool hideDivider;
    UIColor *tintColorLight;
    UIColor *tintColorDark;
    BKLispyExpression *onBackPressLispyExpression;
    NSArray *leadingButtons;
    NSArray *trailingButtons;
    NSString *subtitle;
    IGBloksScreenNavbarCustomTitle *customTitle;
};

struct IGBloksTTRCContext {
    struct BKBloksTTRCContext bkTtrcContext;
    IGBloksTTRCListener *listener;
};

struct IGBloksViewControllerExtras {
    id _field1;
    id _field2;
    id _field3;
    _Bool _field4;
    id _field5;
    id _field6;
    id _field7;
    id _field8;
    CDUnknownBlockType _field9;
    CDUnknownBlockType _field10;
};

struct IGCCCaptureManagerAutoExposureOptions {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
};

struct IGCCCaptureManagerBracketedCaptureOptions {
    NSArray *exposureValues;
    CDUnknownFunctionPointerType resolverFunction;
    _Bool enabled;
    _Bool autoEnhanceEnabled;
    unsigned long long downsampleWidth;
};

struct IGCompositionFilterTransform {
    struct CGPoint scale;
    struct CGPoint translation;
    double rotation;
};

struct IGCropInfo {
    struct CGSize _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
};

struct IGDiscoveryMapDataSourceCoordinates {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct IGExpandableButtonLayouts {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
};

struct IGFeedItemShowreelNativePlaybackConfig {
    double playbackDelay;
    double playableVisiblePercentage;
};

struct IGGallerySectionLayout;

struct IGGridLayoutConfiguration {
    double interitemSpacing;
    struct UIEdgeInsets insets;
    double mediasPerRow;
    double aspectRatio;
};

struct IGIXTEventExtras {
    id _field1;
};

struct IGMediaShareSurfaceAxisRange {
    double _field1;
    double _field2;
};

struct IGMediaShareSurfaceRectRange {
    struct IGMediaShareSurfaceAxisRange _field1;
    struct IGMediaShareSurfaceAxisRange _field2;
};

struct IGOverlayViewTapInfo {
    struct CGPoint center;
    struct CGSize size;
    double rotation;
    long long zIndex;
};

struct IGPagingFocusOffsets {
    long long before;
    long long focused;
    long long after;
};

struct IGProfileNavButtonExperiments {
    _Bool showFadingFollowButton;
    _Bool bagEnabled;
    _Bool showNotificationButton;
    _Bool profileIsInHeader;
};

struct IGReportingExtras {
    unsigned long long entryPoint;
    CDUnknownBlockType onComplete;
    NSString *shoppingSessionId;
    NSDictionary *loggingExtras;
    id clientContext;
};

struct IGRequestStreamFormattedRequest {
    id _field1;
    id _field2;
    id _field3;
};

struct IGSectionEntry;

struct IGTimeRange {
    double _field1;
    double _field2;
};

struct IGUsernameLabelConfiguration {
    _Bool isVerified;
    _Bool isCloseFriend;
    _Bool shouldShowInternalBadge;
    _Bool shouldShowFanClubBadge;
    NSArray *pronouns;
    struct UIEdgeInsets edgeInsets;
    unsigned long long displayMode;
};

struct ISessionLogger;

struct IabAutofillInteractionEventNoBuilder {
    struct Required<NSString *> _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    Optional_48d232f6 _field6;
    id _field7;
    Optional_381dc36e _field8;
    Optional_381dc36e _field9;
    id _field10;
    id _field11;
    Optional_381dc36e _field12;
    Optional_78e21a3f _field13;
    Optional_78e21a3f _field14;
    Optional_78e21a3f _field15;
    id _field16;
    id _field17;
    id _field18;
    id _field19;
    id _field20;
    id _field21;
    Optional_78e21a3f _field22;
    id _field23;
    id _field24;
    id _field25;
    id _field26;
    Optional_381dc36e _field27;
    id _field28;
    id _field29;
    Optional_78e21a3f _field30;
};

struct IceCandidateInterface;

struct IceServer {
    basic_string_0ec669f3 _field1;
    vector_74824a0a _field2;
    basic_string_0ec669f3 _field3;
    basic_string_0ec669f3 _field4;
    int _field5;
    basic_string_0ec669f3 _field6;
    vector_74824a0a _field7;
    vector_74824a0a _field8;
};

struct IgDiscoveryMapBoundingBox2TypeNoBuilder {
    struct Required<double> _field1;
    struct Required<double> _field2;
    struct Required<double> _field3;
    struct Required<double> _field4;
};

struct IgDiscoveryMapBoundingBoxTypeNoBuilder {
    struct Required<double> _field1;
    struct Required<double> _field2;
    struct Required<double> _field3;
    struct Required<double> _field4;
};

struct IgDiscoveryMapEventNoBuilder {
    struct Required<NSString *> _field1;
    id _field2;
    struct Optional<StructuredLogger::IgDiscoveryMapBoundingBoxTypeNoBuilder> _field3;
    struct Optional<StructuredLogger::IgDiscoveryMapBoundingBox2TypeNoBuilder> _field4;
    struct Required<NSString *> _field5;
    id _field6;
    id _field7;
    id _field8;
    id _field9;
    id _field10;
    id _field11;
    struct Optional<StructuredLogger::IgDiscoveryMapLocationInfoTypeNoBuilder> _field12;
    struct Optional<std::vector<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder>> _field13;
    id _field14;
    id _field15;
    Optional_381dc36e _field16;
    Optional_381dc36e _field17;
    Optional_381dc36e _field18;
    id _field19;
    Optional_381dc36e _field20;
    id _field21;
    id _field22;
    id _field23;
    Optional_381dc36e _field24;
    id _field25;
};

struct IgDiscoveryMapLocationInfoTypeNoBuilder {
    struct Required<NSString *> _field1;
    struct Required<double> _field2;
    struct Required<double> _field3;
    struct Required<NSString *> _field4;
};

struct IgDiscoveryMapLocationInfosTypeNoBuilder;

struct IgshoppingadstrackinginfoTypeNoBuilder {
    id _field1;
    id _field2;
};

struct IgshoppingcollectionslogginginfoType {
    Optional_381dc36e _field1;
    id _field2;
    Optional_381dc36e _field3;
    Optional_381dc36e _field4;
    id _field5;
    id _field6;
    id _field7;
};

struct IgshoppingcollectionslogginginfoTypeNoBuilder {
    Optional_381dc36e _field1;
    id _field2;
    Optional_381dc36e _field3;
    Optional_381dc36e _field4;
    id _field5;
    id _field6;
    id _field7;
};

struct IgshoppingfeediteminfoType {
    Optional_381dc36e _field1;
    id _field2;
    id _field3;
    id _field4;
};

struct IgshoppingnavigationinfoType {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
};

struct IgshoppingnavigationinfoTypeNoBuilder {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
};

struct IgshoppingsuggestedtagsinfoType {
    id _field1;
    Optional_381dc36e _field2;
    id _field3;
};

struct Impl;

struct Info {
    struct Optional<std::string> _field1;
    basic_string_0ec669f3 _field2;
};

struct InitialBitratePredictionConfig {
    struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> initialBitrateKbpsPredictions;
    basic_string_0ec669f3 selection;
    basic_string_0ec669f3 policy;
    _Bool useInitialBitratePrediction;
};

struct Inlined {
    char _field1[40];
};

struct InlinedVector<int, 10, std::allocator<int>> {
    struct Storage<int, 10, std::allocator<int>> _field1;
};

struct InlinedVector<webrtc::GenericFrameInfo::DecodeTargetIndication, 10, std::allocator<webrtc::GenericFrameInfo::DecodeTargetIndication>> {
    struct Storage<webrtc::GenericFrameInfo::DecodeTargetIndication, 10, std::allocator<webrtc::GenericFrameInfo::DecodeTargetIndication>> _field1;
};

struct Instance;

struct IntervalRange;

struct IosLifecycleLifecycleEventsTypeNoBuilder;

struct JSExecutorFactory;

struct Layout {
    struct CGSize _field1;
    struct CGRect _field2;
    struct CGRect _field3;
};

struct LiveStreamingTsLogServiceProvider;

struct LiveTraceConfig {
    _Bool enabled;
    int sampleIntervalInSeconds;
    int samplingSource;
};

struct LogSink;

struct ManualClock;

struct Matrix<float, 4, 4, 0, 4, 4> {
    struct DenseStorage<float, 16, 4, 4, 0> _field1;
};

struct MediaConstraints;

struct MediaSourceInterface;

struct MediaStreamInterface;

struct MediaStreamTrackInterface;

struct MediaTransportFactory;

struct MessageQueueThread;

struct Method;

struct MmappedFile;

struct ModuleRegistry;

struct NetworkLagConfig {
    double stopThreshold;
    double resumeThreshold;
};

struct OCMComponentPhotoCaptureConfiguration {
    _Bool livePhotoEnabled;
    _Bool highResolutionCaptureEnabled;
    AVCaptureDevice *captureDevice;
};

struct Optional<BKCollectionPendingScrollEvent> {
    struct Storage<BKCollectionPendingScrollEvent, true, true, true> _storage;
};

struct Optional<CGSize> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            struct CGSize value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<StructuredLogger::AuthenticationtickettypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::FbpayauthstepEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IgDiscoveryMapBoundingBox2TypeNoBuilder> {
    struct StorageTriviallyDestructible {
        union {
            char _field1;
            struct IgDiscoveryMapBoundingBox2TypeNoBuilder _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IgDiscoveryMapBoundingBoxTypeNoBuilder> {
    struct StorageTriviallyDestructible {
        union {
            char _field1;
            struct IgDiscoveryMapBoundingBoxTypeNoBuilder _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IgDiscoveryMapLocationInfoTypeNoBuilder> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct IgDiscoveryMapLocationInfoTypeNoBuilder _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IgcowatcheventmediasourceEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IgcowatcheventmediatypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IgcowatcheventsourceEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IgshoppingsuggestedtagsinfoType> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct IgshoppingsuggestedtagsinfoType _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::IguserinteropusertypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::InstagramdiscoveryitemtypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::InstagramfollowstatustypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::InstagraminventorysourceEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::LsthreadtypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::PaygraphqlloggingpolicyType> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct PaygraphqlloggingpolicyType _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::PromotedPostsFinishStepSelectedValuesAgeTypeNoBuilder> {
    struct StorageTriviallyDestructible {
        union {
            char _field1;
            struct PromotedPostsFinishStepSelectedValuesAgeTypeNoBuilder _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsTypeNoBuilder> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct PromotedPostsFinishStepSelectedValuesLocationsTypeNoBuilder _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::SearchstandardresulttypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::SearchtransporttypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::TselectedvaluestargetingspecgeolocationsshapeTypeNoBuilder> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct TselectedvaluestargetingspecgeolocationsshapeTypeNoBuilder _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::UpleventauthtargetnameEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<StructuredLogger::UpleventauthviewnameEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<bool> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            _Bool value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<double> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            double value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<facebook::mobile::xplat::livestreaming::NetworkLagConfig> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            struct NetworkLagConfig value;
        } ;
        _Bool hasValue;
    } storage_;
};

struct Optional<int> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 ;
        _Bool hasValue;
    } storage_;
};

struct Optional<long long> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 ;
        _Bool hasValue;
    } storage_;
};

struct Optional<long> {
    struct Storage<long, true, true, true> _storage;
};

struct Optional<std::string> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            basic_string_0ec669f3 _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<std::unordered_map<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct unordered_map<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum, std::hash<StructuredLogger::MaidentitysyncfieldEnum>, std::equal_to<StructuredLogger::MaidentitysyncfieldEnum>, std::allocator<std::pair<const StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>>> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<std::unordered_map<long long, StructuredLogger::FximidentitytypeEnum>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct unordered_map<long long, StructuredLogger::FximidentitytypeEnum, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::FximidentitytypeEnum>>> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<std::unordered_map<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            unordered_map_71f3fc84 _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<std::vector<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct vector<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder, std::allocator<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder>> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Optional<unsigned int> {
    struct StorageTriviallyDestructible {
        union {
            char _field1;
            unsigned int _field2;
        } _field1;
        _Bool _field2;
    } _field1;
};

struct Options {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    int _field4;
    int _field5;
    struct CryptoOptions _field6;
    _Bool _field7;
    _Bool _field8;
};

struct OverlayConfigLayer;

struct PaygraphqlecplogsuppressionpolicyType;

struct PaygraphqlloggingpolicyType {
    struct vector<StructuredLogger::PaygraphqlecplogsuppressionpolicyType, std::allocator<StructuredLogger::PaygraphqlecplogsuppressionpolicyType>> _field1;
    id _field2;
};

struct PeerConnectionDelegateAdapter;

struct PeerConnectionFactoryInterface;

struct PeerConnectionInterface;

struct PlayoutDelay {
    int _field1;
    int _field2;
};

struct PpsState {
    _Bool bottom_field_pic_order_in_frame_present_flag;
    _Bool weighted_pred_flag;
    _Bool entropy_coding_mode_flag;
    unsigned int weighted_bipred_idc;
    unsigned int redundant_pic_cnt_present_flag;
    int pic_init_qp_minus26;
    unsigned int id;
    unsigned int sps_id;
};

struct ProfileLevelId {
    int profile;
    int level;
};

struct Project;

struct PromiseEither<NSError *, FBDiskVideoRecorderDiskResults *> {
    struct shared_ptr<FB::Promise<FB::Functional::Either<NSError *, FBDiskVideoRecorderDiskResults *>>> _field1;
};

struct PromotedPostsFinishStepSelectedValuesAgeTypeNoBuilder {
    struct Required<double> _field1;
    struct Required<double> _field2;
};

struct PromotedPostsFinishStepSelectedValuesLocationsTypeNoBuilder {
    id _field1;
    id _field2;
    struct Optional<std::unordered_map<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>> _field3;
    id _field4;
    id _field5;
};

struct PromotedPostsFinishStepSelectedValuesTypeNoBuilder {
    id _field1;
    struct Optional<StructuredLogger::PromotedPostsFinishStepSelectedValuesAgeTypeNoBuilder> _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    id _field7;
    struct Optional<StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsTypeNoBuilder> _field8;
    id _field9;
    id _field10;
    id _field11;
};

struct Ptt;

struct QPL;

struct QPLBase;

struct RCDManagerConfig {
    NSString *queueIdentifier;
    NSSet *baseClasses;
    FBRCDCache *retainCycleCache;
    NSArray *onlyTrackPrefixes;
    long long maxCycleLength;
    _Bool trackNSObjectBaseClass;
    NSSet *ignoreAppleClassesWithPrefix;
    struct GraphConfig *graphConfig;
    struct TimerConfig *timerConfig;
};

struct RCLayout {
    id component;
    struct CGSize size;
    struct shared_ptr<const std::vector<RCLayoutChild>> children;
    NSDictionary *extra;
};

struct RCLayoutCache;

struct RCLayoutResult {
    struct RCLayout layout;
    struct shared_ptr<RCLayoutCache> cache;
};

struct RCTLayoutContext {
    struct CGPoint _field1;
    id _field2;
    id _field3;
};

struct RCTLayoutMetrics {
    struct CGRect frame;
    struct CGRect contentFrame;
    struct UIEdgeInsets borderWidth;
    long long displayType;
    long long layoutDirection;
};

struct RCTLocationConfiguration {
    _Bool skipPermissionRequests;
};

struct RCTLocationOptions {
    double timeout;
    double maximumAge;
    double accuracy;
    double distanceFilter;
    _Bool useSignificantChanges;
};

struct RCTMessageThread;

struct RTPFragmentationHeader;

struct ReferenceFaceShapeLoader;

struct RenderGraph;

struct RenderNodeProvider;

struct Required<NSArray<NSNumber *>*> {
    id _field1;
};

struct Required<NSArray<NSString *>*> {
    id _field1;
};

struct Required<NSString *> {
    id _field1;
};

struct Required<StructuredLogger::TselectedvaluestargetingspecshapeTypeNoBuilder> {
    struct TselectedvaluestargetingspecshapeTypeNoBuilder _field1;
};

struct Required<bool> {
    _Bool _field1;
};

struct Required<double> {
    double _field1;
};

struct Required<int> {
    int _field1;
};

struct Required<long> {
    long long _field1;
};

struct Required<std::unordered_map<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>> {
    struct unordered_map<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>>> _field1;
};

struct ResponseHandler;

struct RoomssessionidsTypeNoBuilder {
    NSString *appSessionId;
    NSString *bookmarkSessionId;
    NSString *cardSessionId;
    NSString *composerSessionId;
    NSString *funnelSessionId;
    NSString *roomSettingsSessionId;
    NSString *tofuTraySessionId;
    NSString *traySessionId;
};

struct RtcpFeedback;

struct RtcpParameters {
    struct optional<unsigned int> _field1;
    basic_string_0ec669f3 _field2;
    _Bool _field3;
    _Bool _field4;
};

struct RtpCodecParameters {
    basic_string_0ec669f3 _field1;
    int _field2;
    int _field3;
    struct optional<int> _field4;
    struct optional<int> _field5;
    struct optional<int> _field6;
    struct optional<int> _field7;
    struct vector<webrtc::RtcpFeedback, std::allocator<webrtc::RtcpFeedback>> _field8;
    struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> _field9;
};

struct RtpEncodingParameters {
    struct optional<unsigned int> _field1;
    struct optional<int> _field2;
    struct optional<webrtc::RtpFecParameters> _field3;
    struct optional<webrtc::RtpRtxParameters> _field4;
    struct optional<webrtc::DtxStatus> _field5;
    double _field6;
    double _field7;
    struct optional<int> _field8;
    struct optional<int> _field9;
    struct optional<int> _field10;
    struct optional<int> _field11;
    struct optional<int> _field12;
    struct optional<double> _field13;
    struct optional<double> _field14;
    _Bool _field15;
    basic_string_0ec669f3 _field16;
    vector_74824a0a _field17;
};

struct RtpExtension {
    basic_string_0ec669f3 _field1;
    int _field2;
    _Bool _field3;
};

struct RtpFecParameters {
    struct optional<unsigned int> _field1;
    int _field2;
};

struct RtpParameters {
    basic_string_0ec669f3 _field1;
    basic_string_0ec669f3 _field2;
    struct vector<webrtc::RtpCodecParameters, std::allocator<webrtc::RtpCodecParameters>> _field3;
    struct vector<webrtc::RtpExtension, std::allocator<webrtc::RtpExtension>> _field4;
    struct vector<webrtc::RtpEncodingParameters, std::allocator<webrtc::RtpEncodingParameters>> _field5;
    _Bool _field6;
    struct RtcpParameters _field7;
    int _field8;
};

struct RtpReceiverDelegateAdapter;

struct RtpReceiverInterface;

struct RtpRtxParameters {
    struct optional<unsigned int> _field1;
};

struct RtpSenderInterface;

struct RtpTransceiverInit {
    int _field1;
    vector_74824a0a _field2;
    struct vector<webrtc::RtpEncodingParameters, std::allocator<webrtc::RtpEncodingParameters>> _field3;
};

struct RtpTransceiverInterface;

struct SFrame {
    _Bool _field1;
};

struct SdpVideoFormat {
    basic_string_0ec669f3 _field1;
    struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> _field2;
};

struct ServerCertsVerifier;

struct Settings;

struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> {
    struct atomic<unsigned int> state_;
};

struct SiNativeWebviewRedirectRedirectChainTypeNoBuilder;

struct SmoothLoopTime {
    double expCoeff_;
    double value_;
    struct duration<long long, std::ratio<1, 1000000>> buffer_time_;
    struct duration<long long, std::ratio<1, 1000000>> busy_buffer_;
    unsigned long long buffer_cnt_;
};

struct SpatialLayer {
    unsigned short _field1;
    unsigned short _field2;
    float _field3;
    unsigned char _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    _Bool _field9;
};

struct SpsState {
    unsigned char profile_idc;
    unsigned int width;
    unsigned int height;
    unsigned int delta_pic_order_always_zero_flag;
    unsigned int separate_colour_plane_flag;
    unsigned int frame_mbs_only_flag;
    unsigned int log2_max_frame_num;
    unsigned int log2_max_pic_order_cnt_lsb;
    unsigned int pic_order_cnt_type;
    unsigned int max_num_ref_frames;
    unsigned int vui_params_present;
    unsigned int id;
};

struct Srtp {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
};

struct StallRecoveryADMListener;

struct Storage<BKCollectionPendingScrollEvent, true, true, true> {
    _Bool hasValue;
    struct BKCollectionPendingScrollEvent value;
};

struct Storage<int, 10, std::allocator<int>> {
    struct CompressedTuple<std::allocator<int>, unsigned long> _field1;
    union Data {
        struct Allocated _field1;
        struct Inlined _field2;
    } _field2;
};

struct Storage<long, true, true, true> {
    unsigned long long hasValue;
    long long value;
};

struct Storage<webrtc::GenericFrameInfo::DecodeTargetIndication, 10, std::allocator<webrtc::GenericFrameInfo::DecodeTargetIndication>> {
    struct CompressedTuple<std::allocator<webrtc::GenericFrameInfo::DecodeTargetIndication>, unsigned long> _field1;
    union Data {
        struct Allocated _field1;
        struct Inlined _field2;
    } _field2;
};

struct SubscribeCallback;

struct Synchronized<boost::intrusive::list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>>, folly::SharedMutexImpl<false>> {
    struct list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>, void, void, void> datum_;
    struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> mutex_;
};

struct Synchronized<std::unordered_set<folly::detail::EventBaseLocalBase *>, folly::SharedMutexImpl<false>> {
    struct unordered_set<folly::detail::EventBaseLocalBase *, std::hash<folly::detail::EventBaseLocalBase *>, std::equal_to<folly::detail::EventBaseLocalBase *>, std::allocator<folly::detail::EventBaseLocalBase *>> datum_;
    struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> mutex_;
};

struct Template;

struct TemplateStructure {
    int _field1;
    struct vector<webrtc::GenericFrameInfo, std::allocator<webrtc::GenericFrameInfo>> _field2;
};

struct Thread;

struct ThroughputMonitorConfig {
    double exponentialAverageDecayConstant;
};

struct TigonUrlMapFetcher;

struct TimeInAppController;

struct TimeSeriesLog;

struct TimeSeriesStream;

struct TimeSeriesStreamWrapper {
    CDUnknownFunctionPointerType *_vptr$TslogStreamFactory;
    struct TslogStreamFactory *tslog_;
    struct shared_ptr<rtc::tslog::TimeSeriesStream> stream_;
    _Bool is_owner_;
};

struct TimerConfig;

struct Timing {
    unsigned char _field1;
    long long _field2;
    long long _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    long long _field7;
    long long _field8;
    long long _field9;
};

struct TimingFrameTriggerThresholds {
    long long _field1;
    unsigned short _field2;
};

struct TpromotedpostsactionselectedvaluesshapeTypeNoBuilder {
    struct Required<NSString *> _field1;
    struct Required<StructuredLogger::TselectedvaluestargetingspecshapeTypeNoBuilder> _field2;
};

struct TransportCallbacksHybryd;

struct TsCounter;

struct TsLogCompactMemoryStorage;

struct TselectedvaluestargetingspecgeolocationsshapeTypeNoBuilder {
    struct Required<NSArray<NSNumber *>*> _field1;
    struct Required<NSArray<NSString *>*> _field2;
    struct Required<std::unordered_map<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>> _field3;
    struct Required<NSArray<NSNumber *>*> _field4;
    struct Required<NSArray<NSString *>*> _field5;
};

struct TselectedvaluestargetingspecshapeTypeNoBuilder {
    struct Required<NSArray<NSString *>*> _field1;
    struct Required<NSArray<NSNumber *>*> _field2;
    struct Optional<StructuredLogger::TselectedvaluestargetingspecgeolocationsshapeTypeNoBuilder> _field3;
    Optional_381dc36e _field4;
    Optional_381dc36e _field5;
};

struct TslogStreamFactory;

struct TurboModule;

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct UIOffset {
    double horizontal;
    double vertical;
};

struct USER_IGID {
    CDUnknownFunctionPointerType *_field1;
    long long _field2;
};

struct UpleventauthpayloadType {
    Optional_381dc36e _field1;
    struct Optional<StructuredLogger::AuthenticationtickettypeEnum> _field2;
    Optional_78e21a3f _field3;
    struct Optional<StructuredLogger::FbpayauthstepEnum> _field4;
    struct Optional<StructuredLogger::PaygraphqlloggingpolicyType> _field5;
    Optional_381dc36e _field6;
    struct Optional<StructuredLogger::UpleventauthtargetnameEnum> _field7;
    struct Optional<StructuredLogger::UpleventauthviewnameEnum> _field8;
};

struct VideoCodec {
    int _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    _Bool _field9;
    unsigned int _field10;
    unsigned char _field11;
    struct SpatialLayer _field12[4];
    struct SpatialLayer _field13[5];
    int _field14;
    _Bool _field15;
    struct TimingFrameTriggerThresholds _field16;
    union VideoCodecUnion _field17;
};

struct VideoCodecH264 {
    _Bool _field1;
    int _field2;
    unsigned char _field3;
    char *_field4;
    unsigned long long _field5;
    char *_field6;
    unsigned long long _field7;
    int _field8;
};

struct VideoCodecH265 {
    _Bool _field1;
    int _field2;
};

struct VideoCodecVP8 {
    int _field1;
    unsigned char _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    int _field6;
};

struct VideoCodecVP9 {
    int _field1;
    unsigned char _field2;
    _Bool _field3;
    _Bool _field4;
    int _field5;
    _Bool _field6;
    _Bool _field7;
    unsigned char _field8;
    _Bool _field9;
    int _field10;
};

struct VideoConfig {
    int width;
    int height;
    int bitRate;
    int fps;
    _Bool allowBFrames;
    int keyFrameIntervalFrames;
    int keyFrameIntervalSeconds;
    _Bool useMainProfile;
    unsigned char codecType;
};

struct VideoCoverPhotoFailedEvent {
    int _field1;
    struct USER_IGID _field2;
    Optional_381dc36e _field3;
    id _field4;
    struct Optional<StructuredLogger::InstagramfollowstatustypeEnum> _field5;
    id _field6;
    struct Optional<StructuredLogger::InstagramdiscoveryitemtypeEnum> _field7;
    struct Optional<StructuredLogger::InstagraminventorysourceEnum> _field8;
    Optional_381dc36e _field9;
    Optional_381dc36e _field10;
    id _field11;
    Optional_381dc36e _field12;
    Optional_48d232f6 _field13;
    id _field14;
};

struct VideoCoverPhotoFinishedEvent {
    int _field1;
    struct USER_IGID _field2;
    Optional_381dc36e _field3;
    id _field4;
    struct Optional<StructuredLogger::InstagramfollowstatustypeEnum> _field5;
    id _field6;
    struct Optional<StructuredLogger::InstagramdiscoveryitemtypeEnum> _field7;
    struct Optional<StructuredLogger::InstagraminventorysourceEnum> _field8;
    Optional_381dc36e _field9;
    Optional_381dc36e _field10;
    id _field11;
    Optional_381dc36e _field12;
    Optional_48d232f6 _field13;
    id _field14;
};

struct VideoCoverPhotoStartedEvent {
    int _field1;
    struct USER_IGID _field2;
    Optional_381dc36e _field3;
    id _field4;
    struct Optional<StructuredLogger::InstagramfollowstatustypeEnum> _field5;
    id _field6;
    struct Optional<StructuredLogger::InstagramdiscoveryitemtypeEnum> _field7;
    struct Optional<StructuredLogger::InstagraminventorysourceEnum> _field8;
    Optional_381dc36e _field9;
    Optional_381dc36e _field10;
    id _field11;
    Optional_381dc36e _field12;
    Optional_48d232f6 _field13;
    id _field14;
};

struct VideoDecoder;

struct VideoDecoderFactory;

struct VideoDisplayedEvent {
    int _field1;
    struct USER_IGID _field2;
    Optional_381dc36e _field3;
    id _field4;
    struct Optional<StructuredLogger::InstagramfollowstatustypeEnum> _field5;
    id _field6;
    struct Optional<StructuredLogger::InstagramdiscoveryitemtypeEnum> _field7;
    Optional_381dc36e _field8;
    struct Optional<StructuredLogger::InstagraminventorysourceEnum> _field9;
    long long _field10;
    Optional_381dc36e _field11;
    id _field12;
    Optional_381dc36e _field13;
    Optional_381dc36e _field14;
    int _field15;
    id _field16;
    id _field17;
    id _field18;
};

struct VideoEncoder;

struct VideoEncoderConfig;

struct VideoEncoderFactory;

struct VideoRendererAdapter;

struct VideoTrackInterface;

struct VideoTrackSourceInterface;

struct VideoValidatorParams {
    _Bool enabled;
    _Bool fpsValidatorEnabled;
    double fpsRange;
    struct duration<double, std::ratio<1, 1>> timestampForwardJumpToleranceUpperBound;
    struct duration<double, std::ratio<1, 1>> timestampForwardJumpToleranceLowerBound;
    struct duration<double, std::ratio<1, 1>> loggerEpochDuration;
    int loggerSamplesPerEpoch;
};

struct VirtualEventBase;

struct VotingConfig {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct Weak<const __IGRTCCallManager *> {
    struct __MCFWeak *ptr_;
};

struct XAnalytics;

struct YGValue {
    float value;
    int unit;
};

struct ZZStandardCryptoEngine {
    int keys[3];
};

struct _FBImagePerfQPLComponentLoggerConfiguration {
    _Bool dropsEmptyEvents;
    _Bool shouldIgnoreCancelBackgroundEvents;
    _Bool shouldEndMarkerOnImageRenderOrFailEvent;
    _Bool shouldEndMarkerOnEnterBackground;
    _Bool shouldLogDebugInformation;
    _Bool shouldLogGlobalEstimatedBandwidth;
    _Bool shouldLogImagesEstimatedBandwidth;
};

struct _GLKMatrix4 {
    float _field1[16];
};

struct _GLKVector3 {
    float _field1[3];
};

struct _IGRange {
    double location;
    double length;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct alias_ptr<__MCINetworkSession *> {
    struct alias_storage<__MCINetworkSession *, void> storage_;
};

struct alias_ptr<__RTOverlayConfigLayer *> {
    struct alias_storage<__RTOverlayConfigLayer *, void> storage_;
};

struct alias_ptr<const __IGRTCCallFeatureProvider *> {
    struct alias_storage<const __IGRTCCallFeatureProvider *, void> storage_;
};

struct alias_ptr<const __IGRTCCallManager *> {
    struct alias_storage<const __IGRTCCallManager *, void> storage_;
};

struct alias_ptr<const __RSAppInfo *> {
    struct alias_storage<const __RSAppInfo *, void> storage_;
};

struct alias_ptr<const __RSBatteryStatsReader *> {
    struct alias_storage<const __RSBatteryStatsReader *, void> storage_;
};

struct alias_ptr<const __RSCall *> {
    struct alias_storage<const __RSCall *, void> storage_;
};

struct alias_ptr<const __RSCallApi *> {
    struct alias_storage<const __RSCallApi *, void> storage_;
};

struct alias_ptr<const __RSCallEndedApi *> {
    struct alias_storage<const __RSCallEndedApi *, void> storage_;
};

struct alias_ptr<const __RSEnvironmentVariablesProxy *> {
    struct alias_storage<const __RSEnvironmentVariablesProxy *, void> storage_;
};

struct alias_ptr<mcf::Weak<const __IGRTCCallManager *>> {
    struct alias_storage<mcf::Weak<const __IGRTCCallManager *>, void> storage_;
};

struct alias_storage<__MCINetworkSession *, void> {
    struct __MCINetworkSession *ptr_;
};

struct alias_storage<__RTOverlayConfigLayer *, void> {
    struct __RTOverlayConfigLayer *ptr_;
};

struct alias_storage<const __IGRTCCallFeatureProvider *, void> {
    struct __IGRTCCallFeatureProvider *ptr_;
};

struct alias_storage<const __IGRTCCallManager *, void> {
    struct __IGRTCCallManager *ptr_;
};

struct alias_storage<const __RSAppInfo *, void> {
    struct __RSAppInfo *ptr_;
};

struct alias_storage<const __RSBatteryStatsReader *, void> {
    struct __RSBatteryStatsReader *ptr_;
};

struct alias_storage<const __RSCall *, void> {
    struct __RSCall *ptr_;
};

struct alias_storage<const __RSCallApi *, void> {
    struct __RSCallApi *ptr_;
};

struct alias_storage<const __RSCallEndedApi *, void> {
    struct __RSCallEndedApi *ptr_;
};

struct alias_storage<const __RSEnvironmentVariablesProxy *, void> {
    struct __RSEnvironmentVariablesProxy *ptr_;
};

struct alias_storage<mcf::Weak<const __IGRTCCallManager *>, void> {
    struct Weak<const __IGRTCCallManager *> wrapper_;
};

struct atomic<CLAuthorizationStatus> {
    struct __cxx_atomic_impl<CLAuthorizationStatus, std::__cxx_atomic_base_impl<CLAuthorizationStatus>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic<CMTime> {
    struct __cxx_atomic_impl<CMTime, std::__cxx_atomic_base_impl<CMTime>> {
        _Atomic struct __a_value;
    } __a_;
};

struct atomic<FBVideoBroadcastSessionReadyState> {
    struct __cxx_atomic_impl<FBVideoBroadcastSessionReadyState, std::__cxx_atomic_base_impl<FBVideoBroadcastSessionReadyState>> {
        _Atomic long long __a_value;
    } __a_;
};

struct atomic<UIApplicationState> {
    struct __cxx_atomic_impl<UIApplicationState, std::__cxx_atomic_base_impl<UIApplicationState>> {
        _Atomic long long __a_value;
    } __a_;
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool __a_value;
    } __a_;
};

struct atomic<double> {
    struct __cxx_atomic_impl<double, std::__cxx_atomic_base_impl<double>> {
        _Atomic double __a_value;
    } __a_;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic<long long> {
    struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> {
        _Atomic long long __a_value;
    } __a_;
};

struct atomic<long> {
    struct __cxx_atomic_impl<long, std::__cxx_atomic_base_impl<long>> {
        _Atomic long long __a_value;
    } __a_;
};

struct atomic<std::__thread_id> {
    struct __cxx_atomic_impl<std::__thread_id, std::__cxx_atomic_base_impl<std::__thread_id>> {
        _Atomic struct __thread_id __a_value;
    } __a_;
};

struct atomic<unsigned int> {
    struct __cxx_atomic_impl<unsigned int, std::__cxx_atomic_base_impl<unsigned int>> {
        _Atomic unsigned int __a_value;
    } __a_;
};

struct atomic<unsigned long> {
    struct __cxx_atomic_impl<unsigned long, std::__cxx_atomic_base_impl<unsigned long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct atomic<void *> {
    struct __cxx_atomic_impl<void *, std::__cxx_atomic_base_impl<void *>> {
        _Atomic void *__a_value;
    } __a_;
};

struct basic_once_flag<folly::SharedMutexImpl<false>, std::atomic> {
    struct atomic<bool> called_;
    struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> mutex_;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct bloks_string {
    int _field1;
};

struct condition_variable {
    struct _opaque_pthread_cond_t {
        long long __sig;
        char __opaque[40];
    } __cv_;
};

struct default_header_holder<boost::intrusive::list_node_traits<void *>> {
    void *next_;
    void *prev_;
};

struct deque<std::pair<NSArray<BKModel *>*, bool>, std::allocator<std::pair<NSArray<BKModel *>*, bool>>> {
    struct __split_buffer<std::pair<NSArray<BKModel *>*, bool>*, std::allocator<std::pair<NSArray<BKModel *>*, bool>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::pair<NSArray<BKModel *>*, bool>**, std::allocator<std::pair<NSArray<BKModel *>*, bool>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::pair<NSArray<BKModel *>*, bool>>> {
        unsigned long long __value_;
    } __size_;
};

struct dummy_type {
    struct empty_struct data[8];
};

struct duration<double, std::ratio<1, 1>> {
    double __rep_;
};

struct duration<long long, std::ratio<1, 1000000000>> {
    long long __rep_;
};

struct duration<long long, std::ratio<1, 1000000>> {
    long long __rep_;
};

struct duration<long long, std::ratio<1, 1000>> {
    long long __rep_;
};

struct empty_struct;

struct final {
    _Bool enableMicInPreview;
    _Bool startOutputOnStartInput;
    _Bool startOutputOnSubgraphInsert;
    _Bool enableSetAudioMixing;
    _Bool enableFBAAllowSpeakerDuringRecording;
    _Bool enableFBAShouldPauseBackgroundWhenApplyingEffect;
    _Bool enablePushGraph;
    _Bool isUsingCameraAudioManager;
    _Bool isAudioPipelineStateMachineEnabled;
    _Bool shouldConfigureStereoCapture;
};

struct fsid {
    int _field1[2];
};

struct function<bool (UIView *, FBTouchImpressionTouchData)> {
    struct __value_func<bool (UIView *, FBTouchImpressionTouchData)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (const mediastreaming::StreamingError &)> {
    struct __value_func<void (const mediastreaming::StreamingError &)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (int)> {
    struct __value_func<void (int)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (mediastreaming::AppleEncodedAudioData)> {
    struct __value_func<void (mediastreaming::AppleEncodedAudioData)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (mediastreaming::CMSampleBufferSmartPtr)> {
    struct __value_func<void (mediastreaming::CMSampleBufferSmartPtr)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (mediastreaming::StreamingError)> {
    struct __value_func<void (mediastreaming::StreamingError)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (std::string)> {
    struct __value_func<void (std::string)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct function<void (unsigned long, unsigned long)> {
    struct __value_func<void (unsigned long, unsigned long)> {
        struct type __buf_;
        void *__f_;
    } __f_;
};

struct future<std::vector<facebook::artech::anchorservice::datawrappers::HitTestResultData>> {
    void *_field1;
};

struct internal_state;

struct linear_congruential_engine<unsigned int, 48271, 0, 2147483647> {
    unsigned int __x_;
};

struct list<folly::EventBase::LoopCallback, boost::intrusive::constant_time_size<false>, void, void, void> {
    struct data_t {
        struct root_plus_size {
            struct default_header_holder<boost::intrusive::list_node_traits<void *>> m_header;
        } root_plus_size_;
    } data_;
};

struct list<folly::EventBase::OnDestructionCallback, boost::intrusive::member_hook<folly::EventBase::OnDestructionCallback, boost::intrusive::list_member_hook<boost::intrusive::link_mode<boost::intrusive::normal_link>>, &folly::EventBase::OnDestructionCallback::listHook_>, void, void, void> {
    struct data_t {
        struct root_plus_size {
            unsigned long long size_;
            struct default_header_holder<boost::intrusive::list_node_traits<void *>> m_header;
        } root_plus_size_;
    } data_;
};

struct map<id, NSString *, std::less<id>, std::allocator<std::pair<const id, NSString *>>> {
    struct __tree<std::__value_type<id, NSString *>, std::__map_value_compare<id, std::__value_type<id, NSString *>, std::less<id>, true>, std::allocator<std::__value_type<id, NSString *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<id, NSString *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<id, std::__value_type<id, NSString *>, std::less<id>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, IGRequestStreamSubscriptionHandler, std::less<std::string>, std::allocator<std::pair<const std::string, IGRequestStreamSubscriptionHandler>>> {
    struct __tree<std::__value_type<std::string, IGRequestStreamSubscriptionHandler>, std::__map_value_compare<std::string, std::__value_type<std::string, IGRequestStreamSubscriptionHandler>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, IGRequestStreamSubscriptionHandler>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, IGRequestStreamSubscriptionHandler>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, IGRequestStreamSubscriptionHandler>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, facebook::cp::sdk::dancification::AudioBeats, std::less<std::string>, std::allocator<std::pair<const std::string, facebook::cp::sdk::dancification::AudioBeats>>> {
    struct __tree<std::__value_type<std::string, facebook::cp::sdk::dancification::AudioBeats>, std::__map_value_compare<std::string, std::__value_type<std::string, facebook::cp::sdk::dancification::AudioBeats>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, facebook::cp::sdk::dancification::AudioBeats>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, facebook::cp::sdk::dancification::AudioBeats>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, facebook::cp::sdk::dancification::AudioBeats>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, facebook::cp::sdk::dancification::VisualBeats, std::less<std::string>, std::allocator<std::pair<const std::string, facebook::cp::sdk::dancification::VisualBeats>>> {
    struct __tree<std::__value_type<std::string, facebook::cp::sdk::dancification::VisualBeats>, std::__map_value_compare<std::string, std::__value_type<std::string, facebook::cp::sdk::dancification::VisualBeats>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, facebook::cp::sdk::dancification::VisualBeats>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, facebook::cp::sdk::dancification::VisualBeats>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, facebook::cp::sdk::dancification::VisualBeats>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __tree<std::__value_type<std::string, std::string>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string>>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>>> {
    struct __tree<std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<iglu::filterkit::IFilter>>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct opaqueCMSampleBuffer;

struct optional<RTCVideoRotation> {
    _Bool engaged_;
    union {
        long long data_;
        struct dummy_type dummy_;
    } ;
};

struct optional<double> {
    _Bool _field1;
    union {
        double _field1;
        struct dummy_type _field2;
    } _field2;
};

struct optional<int> {
    _Bool engaged_;
    CDUnion_130d44d2 ;
};

struct optional<unsigned int> {
    _Bool _field1;
    union {
        unsigned int _field1;
        struct dummy_type _field2;
    } _field2;
};

struct optional<webrtc::ColorSpace> {
    _Bool _field1;
    union {
        struct ColorSpace _field1;
        struct dummy_type _field2;
    } _field2;
};

struct optional<webrtc::DtxStatus> {
    _Bool _field1;
    CDUnion_130d44d2 _field2;
};

struct optional<webrtc::GenericFrameInfo> {
    _Bool _field1;
    union {
        struct GenericFrameInfo _field1;
        struct dummy_type _field2;
    } _field2;
};

struct optional<webrtc::H264::ProfileLevelId> {
    _Bool engaged_;
    union {
        struct ProfileLevelId data_;
        struct dummy_type dummy_;
    } ;
};

struct optional<webrtc::HdrMetadata> {
    _Bool _field1;
    union {
        struct HdrMetadata _field1;
        struct dummy_type _field2;
    } _field2;
};

struct optional<webrtc::PpsParser::PpsState> {
    _Bool engaged_;
    union {
        struct PpsState data_;
        struct dummy_type dummy_;
    } ;
};

struct optional<webrtc::RtpFecParameters> {
    _Bool _field1;
    union {
        struct RtpFecParameters _field1;
        struct dummy_type _field2;
    } _field2;
};

struct optional<webrtc::RtpRtxParameters> {
    _Bool _field1;
    union {
        struct RtpRtxParameters _field1;
        struct dummy_type _field2;
    } _field2;
};

struct optional<webrtc::SpsParser::SpsState> {
    _Bool engaged_;
    union {
        struct SpsState data_;
        struct dummy_type dummy_;
    } ;
};

struct optional<webrtc::TemplateStructure> {
    _Bool _field1;
    union {
        struct TemplateStructure _field1;
        struct dummy_type _field2;
    } _field2;
};

struct owner_ptr<__MCINetworkSession *> {
    struct alias_ptr<__MCINetworkSession *> alias_;
};

struct owner_ptr<__RTOverlayConfigLayer *> {
    struct alias_ptr<__RTOverlayConfigLayer *> alias_;
};

struct owner_ptr<const __IGRTCCallFeatureProvider *> {
    struct alias_ptr<const __IGRTCCallFeatureProvider *> alias_;
};

struct owner_ptr<const __IGRTCCallManager *> {
    struct alias_ptr<const __IGRTCCallManager *> alias_;
};

struct owner_ptr<const __RSAppInfo *> {
    struct alias_ptr<const __RSAppInfo *> alias_;
};

struct owner_ptr<const __RSBatteryStatsReader *> {
    struct alias_ptr<const __RSBatteryStatsReader *> alias_;
};

struct owner_ptr<const __RSCall *> {
    struct alias_ptr<const __RSCall *> alias_;
};

struct owner_ptr<const __RSCallApi *> {
    struct alias_ptr<const __RSCallApi *> alias_;
};

struct owner_ptr<const __RSCallEndedApi *> {
    struct alias_ptr<const __RSCallEndedApi *> alias_;
};

struct owner_ptr<const __RSEnvironmentVariablesProxy *> {
    struct alias_ptr<const __RSEnvironmentVariablesProxy *> alias_;
};

struct owner_ptr<mcf::Weak<const __IGRTCCallManager *>> {
    struct alias_ptr<mcf::Weak<const __IGRTCCallManager *>> alias_;
};

struct pair<id<FBCameraCaptureManaging>, FBARCameraSessionType> {
    id _field1;
    unsigned char _field2;
};

struct param_type {
    unsigned long long __a_;
    unsigned long long __b_;
};

struct plain_array<float, 16, 0, 16> {
    float _field1[16];
};

struct queue<std::pair<NSArray<BKModel *>*, bool>, std::deque<std::pair<NSArray<BKModel *>*, bool>>> {
    struct deque<std::pair<NSArray<BKModel *>*, bool>, std::allocator<std::pair<NSArray<BKModel *>*, bool>>> c;
};

struct recursive_mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct scoped_refptr<facebook::rtc::StallRecoveryADMListener> {
    struct StallRecoveryADMListener *ptr_;
};

struct scoped_refptr<rtc::RefCountedObject<rtc::BufferT<unsigned char, false>>> {
    void *_field1;
};

struct scoped_refptr<rtc::RefCountedObject<rtc::Event>> {
    void *ptr_;
};

struct scoped_refptr<webrtc::AudioDecoderFactory> {
    struct AudioDecoderFactory *ptr_;
};

struct scoped_refptr<webrtc::AudioDeviceModule> {
    struct AudioDeviceModule *ptr_;
};

struct scoped_refptr<webrtc::AudioEncoderFactory> {
    struct AudioEncoderFactory *ptr_;
};

struct scoped_refptr<webrtc::AudioProcessing> {
    struct AudioProcessing *ptr_;
};

struct scoped_refptr<webrtc::AudioSourceInterface> {
    struct AudioSourceInterface *ptr_;
};

struct scoped_refptr<webrtc::AudioTrackInterface> {
    struct AudioTrackInterface *_field1;
};

struct scoped_refptr<webrtc::DataChannelInterface> {
    struct DataChannelInterface *ptr_;
};

struct scoped_refptr<webrtc::DtmfSenderInterface> {
    struct DtmfSenderInterface *ptr_;
};

struct scoped_refptr<webrtc::FrameDecryptorInterface> {
    struct FrameDecryptorInterface *_field1;
};

struct scoped_refptr<webrtc::FrameEncryptorInterface> {
    struct FrameEncryptorInterface *_field1;
};

struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaSourceInterface> {
    struct MediaSourceInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaStreamInterface> {
    struct MediaStreamInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaStreamTrackInterface> {
    struct MediaStreamTrackInterface *ptr_;
};

struct scoped_refptr<webrtc::PeerConnectionFactoryInterface> {
    struct PeerConnectionFactoryInterface *ptr_;
};

struct scoped_refptr<webrtc::PeerConnectionInterface> {
    struct PeerConnectionInterface *ptr_;
};

struct scoped_refptr<webrtc::RtpReceiverInterface> {
    struct RtpReceiverInterface *ptr_;
};

struct scoped_refptr<webrtc::RtpSenderInterface> {
    struct RtpSenderInterface *ptr_;
};

struct scoped_refptr<webrtc::RtpTransceiverInterface> {
    struct RtpTransceiverInterface *ptr_;
};

struct scoped_refptr<webrtc::VideoTrackInterface> {
    struct VideoTrackInterface *_field1;
};

struct scoped_refptr<webrtc::VideoTrackSourceInterface> {
    struct VideoTrackSourceInterface *ptr_;
};

struct shared_ptr<(anonymous namespace)::FBEventMessageInputSource> {
    struct FBEventMessageInputSource *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<(anonymous namespace)::FBVideoBroadcastInputSource> {
    struct FBVideoBroadcastInputSource *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FB::Functional::PromiseEither<NSError *, FBDiskVideoRecorderDiskResults *>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<FB::Promise<FB::Functional::Either<NSError *, FBDiskVideoRecorderDiskResults *>>> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<RCLayoutCache> {
    struct RCLayoutCache *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<NSString *>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<RCLayoutChild>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<unsigned char>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::arfx::recognizer::ContextualMusicGraph> {
    struct ContextualMusicGraph *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::bufferpool::BufferPool> {
    struct BufferPool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::sdk::reels::AssetCache> {
    struct AssetCache *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::sdk::reels::Clip> {
    struct Clip *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::sdk::reels::Composition> {
    struct Composition *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::sdk::reels::Project> {
    struct Project *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::cp::sdk::reels::RenderNodeProvider> {
    struct RenderNodeProvider *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::distribgw::client::DGWClient> {
    struct DGWClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::mobile::xplat::executor::AsyncExecutor> {
    struct AsyncExecutor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::perflogger::QPL> {
    struct QPL *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::perflogger::QPLBase> {
    struct QPLBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::react::CallInvoker> {
    struct CallInvoker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::react::Instance> {
    struct Instance *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::react::JSExecutorFactory> {
    struct JSExecutorFactory *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::react::MessageQueueThread> {
    struct MessageQueueThread *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::react::ModuleRegistry> {
    struct ModuleRegistry *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::react::RCTMessageThread> {
    struct RCTMessageThread *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::react::TurboModule> {
    struct TurboModule *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::realtime::bladerunner::Client> {
    struct Client *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::realtime::bladerunner::ClientProvider> {
    struct ClientProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::realtime::bladerunner::DefaultClient> {
    struct DefaultClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::realtime::bladerunner::caf::Client> {
    struct Client *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::realtime::bladerunner::caf::ResponseHandler> {
    struct ResponseHandler *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::realtime::bladerunner::caf::Settings> {
    struct Settings *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<facebook::realtime::common::appstate::AppForegroundStateListener> {
    struct AppForegroundStateListener *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::reliablemedia::TigonUrlMapFetcher> {
    struct TigonUrlMapFetcher *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::rtgw::client::SubscribeCallback> {
    struct SubscribeCallback *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::timeinappcore::TimeInAppController> {
    struct TimeInAppController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<facebook::xanalytics::XAnalytics> {
    struct XAnalytics *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<folly::EventBaseObserver> {
    struct EventBaseObserver *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<folly::Executor> {
    struct Executor *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<igl::ICommandQueue> {
    struct ICommandQueue *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<igl::IDevice> {
    struct IDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mediastreaming::AppleLiveStreamingClient> {
    struct AppleLiveStreamingClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mediastreaming::AppleStreamingSessionCallbacksHybrid> {
    struct AppleStreamingSessionCallbacksHybrid *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mediastreaming::BaseTimestampManagerService> {
    struct BaseTimestampManagerService *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mediastreaming::BroadcastSessionStatsProvider> {
    struct BroadcastSessionStatsProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mediastreaming::DvrManagerService> {
    struct DvrManagerService *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mediastreaming::LiveStreamingTsLogServiceProvider> {
    struct LiveStreamingTsLogServiceProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mediastreaming::TransportCallbacksHybryd> {
    struct TransportCallbacksHybryd *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<mobileconfig::FBMobileConfigOverridesTable> {
    struct FBMobileConfigOverridesTable *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<mobileconfig::FBMobileConfigQEGroupInfo> {
    struct FBMobileConfigQEGroupInfo *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<rtc::tslog::TimeSeriesStream> {
    struct TimeSeriesStream *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<rtc::tslog::TsLogCompactMemoryStorage> {
    struct TsLogCompactMemoryStorage *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<std::vector<facebook::mobile::xplat::livestreaming::DroppedFrame>> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<void> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_timed_mutex {
    struct __shared_mutex_base {
        struct mutex __mut_;
        struct condition_variable __gate1_;
        struct condition_variable __gate2_;
        unsigned int __state_;
    } __base;
};

struct statfs {
    unsigned int _field1;
    int _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct fsid _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    char _field13[16];
    char _field14[1024];
    char _field15[1024];
    unsigned int _field16;
    unsigned int _field17[7];
};

struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> {
    struct duration<long long, std::ratio<1, 1000000000>> __d_;
};

struct type {
    unsigned char __lx[24];
};

struct uniform_int_distribution<unsigned long long> {
    struct param_type __p_;
};

struct unique_ptr<BKBloksAnimation, std::default_delete<BKBloksAnimation>> {
    struct __compressed_pair<BKBloksAnimation *, std::default_delete<BKBloksAnimation>> {
        struct BKBloksAnimation *__value_;
    } __ptr_;
};

struct unique_ptr<aml::facetracker::AMLFaceTrackerOcean::Impl, std::default_delete<aml::facetracker::AMLFaceTrackerOcean::Impl>> {
    struct __compressed_pair<aml::facetracker::AMLFaceTrackerOcean::Impl *, std::default_delete<aml::facetracker::AMLFaceTrackerOcean::Impl>> {
        struct Impl *__value_;
    } __ptr_;
};

struct unique_ptr<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> {
    struct __compressed_pair<aml::facetracker::ReferenceFaceShapeLoader *, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> {
        struct ReferenceFaceShapeLoader *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::cp::sdk::dancification::Template, std::__1::default_delete<facebook::cp::sdk::dancification::Template>> {
    struct __compressed_pair<facebook::cp::sdk::dancification::Template *, std::__1::default_delete<facebook::cp::sdk::dancification::Template>> {
        struct Template *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::cp::sdk::pipeline::HDRGraph, std::default_delete<facebook::cp::sdk::pipeline::HDRGraph>> {
    struct __compressed_pair<facebook::cp::sdk::pipeline::HDRGraph *, std::default_delete<facebook::cp::sdk::pipeline::HDRGraph>> {
        struct HDRGraph *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::cp::sdk::reels::ManualClock, std::default_delete<facebook::cp::sdk::reels::ManualClock>> {
    struct __compressed_pair<facebook::cp::sdk::reels::ManualClock *, std::default_delete<facebook::cp::sdk::reels::ManualClock>> {
        struct ManualClock *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::cp::sdk::reels::RenderGraph, std::default_delete<facebook::cp::sdk::reels::RenderGraph>> {
    struct __compressed_pair<facebook::cp::sdk::reels::RenderGraph *, std::default_delete<facebook::cp::sdk::reels::RenderGraph>> {
        struct RenderGraph *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::identity_integrity::smart_capture::AsyncDetector, std::default_delete<facebook::identity_integrity::smart_capture::AsyncDetector>> {
    struct __compressed_pair<facebook::identity_integrity::smart_capture::AsyncDetector *, std::default_delete<facebook::identity_integrity::smart_capture::AsyncDetector>> {
        struct AsyncDetector *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::identity_integrity::smart_capture::DetectionResult, std::default_delete<facebook::identity_integrity::smart_capture::DetectionResult>> {
    struct __compressed_pair<facebook::identity_integrity::smart_capture::DetectionResult *, std::default_delete<facebook::identity_integrity::smart_capture::DetectionResult>> {
        struct DetectionResult *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::identity_integrity::smart_capture::cc_scanner::CCScanner, std::default_delete<facebook::identity_integrity::smart_capture::cc_scanner::CCScanner>> {
    struct __compressed_pair<facebook::identity_integrity::smart_capture::cc_scanner::CCScanner *, std::default_delete<facebook::identity_integrity::smart_capture::cc_scanner::CCScanner>> {
        struct CCScanner *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::react::JSExecutorFactory, std::default_delete<facebook::react::JSExecutorFactory>> {
    struct __compressed_pair<facebook::react::JSExecutorFactory *, std::default_delete<facebook::react::JSExecutorFactory>> {
        struct JSExecutorFactory *_field1;
    } _field1;
};

struct unique_ptr<facebook::rtc::OverlayConfigLayer, std::default_delete<facebook::rtc::OverlayConfigLayer>> {
    struct __compressed_pair<facebook::rtc::OverlayConfigLayer *, std::default_delete<facebook::rtc::OverlayConfigLayer>> {
        struct OverlayConfigLayer *_field1;
    } _field1;
};

struct unique_ptr<facebook::xplat::module::CxxModule, std::default_delete<facebook::xplat::module::CxxModule>> {
    struct __compressed_pair<facebook::xplat::module::CxxModule *, std::default_delete<facebook::xplat::module::CxxModule>> {
        struct CxxModule *__value_;
    } __ptr_;
};

struct unique_ptr<facebook::xplat::module::CxxModule::Method, std::default_delete<facebook::xplat::module::CxxModule::Method>> {
    struct __compressed_pair<facebook::xplat::module::CxxModule::Method *, std::default_delete<facebook::xplat::module::CxxModule::Method>> {
        struct Method *__value_;
    } __ptr_;
};

struct unique_ptr<fbpay::ptt::Ptt, std::default_delete<fbpay::ptt::Ptt>> {
    struct __compressed_pair<fbpay::ptt::Ptt *, std::default_delete<fbpay::ptt::Ptt>> {
        struct Ptt *__value_;
    } __ptr_;
};

struct unique_ptr<fbpay::ptt::ServerCertsVerifier, std::default_delete<fbpay::ptt::ServerCertsVerifier>> {
    struct __compressed_pair<fbpay::ptt::ServerCertsVerifier *, std::default_delete<fbpay::ptt::ServerCertsVerifier>> {
        struct ServerCertsVerifier *__value_;
    } __ptr_;
};

struct unique_ptr<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>, std::default_delete<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>>> {
    struct __compressed_pair<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>*, std::default_delete<folly::EventBaseAtomicNotificationQueue<folly::Function<void ()>, folly::EventBase::FuncRunner>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<folly::EventBaseBackendBase, std::default_delete<folly::EventBaseBackendBase>> {
    struct __compressed_pair<folly::EventBaseBackendBase *, std::default_delete<folly::EventBaseBackendBase>> {
        struct EventBaseBackendBase *__value_;
    } __ptr_;
};

struct unique_ptr<folly::HHWheelTimerBase<std::chrono::milliseconds>, folly::DelayedDestruction::Destructor> {
    struct __compressed_pair<folly::HHWheelTimerBase<std::chrono::milliseconds>*, folly::DelayedDestruction::Destructor> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<folly::TimeoutManager::CobTimeouts, std::default_delete<folly::TimeoutManager::CobTimeouts>> {
    struct __compressed_pair<folly::TimeoutManager::CobTimeouts *, std::default_delete<folly::TimeoutManager::CobTimeouts>> {
        struct CobTimeouts *__value_;
    } __ptr_;
};

struct unique_ptr<folly::VirtualEventBase, std::default_delete<folly::VirtualEventBase>> {
    struct __compressed_pair<folly::VirtualEventBase *, std::default_delete<folly::VirtualEventBase>> {
        struct VirtualEventBase *__value_;
    } __ptr_;
};

struct unique_ptr<mediastreaming::Resource<int>, std::default_delete<mediastreaming::Resource<int>>> {
    struct __compressed_pair<mediastreaming::Resource<int>*, std::default_delete<mediastreaming::Resource<int>>> {
        void *_field1;
    } _field1;
};

struct unique_ptr<mediastreaming::VideoEncoderConfig, std::default_delete<mediastreaming::VideoEncoderConfig>> {
    struct __compressed_pair<mediastreaming::VideoEncoderConfig *, std::default_delete<mediastreaming::VideoEncoderConfig>> {
        struct VideoEncoderConfig *__value_;
    } __ptr_;
};

struct unique_ptr<reliability::MmappedFile, std::default_delete<reliability::MmappedFile>> {
    struct __compressed_pair<reliability::MmappedFile *, std::default_delete<reliability::MmappedFile>> {
        struct MmappedFile *__value_;
    } __ptr_;
};

struct unique_ptr<rtc::BitrateAllocationStrategy, std::default_delete<rtc::BitrateAllocationStrategy>> {
    struct __compressed_pair<rtc::BitrateAllocationStrategy *, std::default_delete<rtc::BitrateAllocationStrategy>> {
        struct BitrateAllocationStrategy *_field1;
    } _field1;
};

struct unique_ptr<rtc::FileRotatingLogSink, std::default_delete<rtc::FileRotatingLogSink>> {
    struct __compressed_pair<rtc::FileRotatingLogSink *, std::default_delete<rtc::FileRotatingLogSink>> {
        struct FileRotatingLogSink *__value_;
    } __ptr_;
};

struct unique_ptr<rtc::IntervalRange, std::default_delete<rtc::IntervalRange>> {
    struct __compressed_pair<rtc::IntervalRange *, std::default_delete<rtc::IntervalRange>> {
        struct IntervalRange *_field1;
    } _field1;
};

struct unique_ptr<rtc::LogSink, std::default_delete<rtc::LogSink>> {
    struct __compressed_pair<rtc::LogSink *, std::default_delete<rtc::LogSink>> {
        struct LogSink *__value_;
    } __ptr_;
};

struct unique_ptr<rtc::Thread, std::default_delete<rtc::Thread>> {
    struct __compressed_pair<rtc::Thread *, std::default_delete<rtc::Thread>> {
        struct Thread *__value_;
    } __ptr_;
};

struct unique_ptr<rtc::tslog::TimeSeriesLog, std::default_delete<rtc::tslog::TimeSeriesLog>> {
    struct __compressed_pair<rtc::tslog::TimeSeriesLog *, std::default_delete<rtc::tslog::TimeSeriesLog>> {
        struct TimeSeriesLog *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::string, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::string, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<webrtc::BitrateAdjuster, std::default_delete<webrtc::BitrateAdjuster>> {
    struct __compressed_pair<webrtc::BitrateAdjuster *, std::default_delete<webrtc::BitrateAdjuster>> {
        struct BitrateAdjuster *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::DataBuffer, std::default_delete<webrtc::DataBuffer>> {
    struct __compressed_pair<webrtc::DataBuffer *, std::default_delete<webrtc::DataBuffer>> {
        struct DataBuffer *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::DataChannelDelegateAdapter, std::default_delete<webrtc::DataChannelDelegateAdapter>> {
    struct __compressed_pair<webrtc::DataChannelDelegateAdapter *, std::default_delete<webrtc::DataChannelDelegateAdapter>> {
        struct DataChannelDelegateAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::IceCandidateInterface, std::default_delete<webrtc::IceCandidateInterface>> {
    struct __compressed_pair<webrtc::IceCandidateInterface *, std::default_delete<webrtc::IceCandidateInterface>> {
        struct IceCandidateInterface *_field1;
    } _field1;
};

struct unique_ptr<webrtc::MediaConstraints, std::default_delete<webrtc::MediaConstraints>> {
    struct __compressed_pair<webrtc::MediaConstraints *, std::default_delete<webrtc::MediaConstraints>> {
        struct MediaConstraints *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::MediaTransportFactory, std::default_delete<webrtc::MediaTransportFactory>> {
    struct __compressed_pair<webrtc::MediaTransportFactory *, std::default_delete<webrtc::MediaTransportFactory>> {
        struct MediaTransportFactory *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::PeerConnectionDelegateAdapter, std::default_delete<webrtc::PeerConnectionDelegateAdapter>> {
    struct __compressed_pair<webrtc::PeerConnectionDelegateAdapter *, std::default_delete<webrtc::PeerConnectionDelegateAdapter>> {
        struct PeerConnectionDelegateAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::RTPFragmentationHeader, std::default_delete<webrtc::RTPFragmentationHeader>> {
    struct __compressed_pair<webrtc::RTPFragmentationHeader *, std::default_delete<webrtc::RTPFragmentationHeader>> {
        struct RTPFragmentationHeader *_field1;
    } _field1;
};

struct unique_ptr<webrtc::RtpReceiverDelegateAdapter, std::default_delete<webrtc::RtpReceiverDelegateAdapter>> {
    struct __compressed_pair<webrtc::RtpReceiverDelegateAdapter *, std::default_delete<webrtc::RtpReceiverDelegateAdapter>> {
        struct RtpReceiverDelegateAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoDecoder, std::default_delete<webrtc::VideoDecoder>> {
    struct __compressed_pair<webrtc::VideoDecoder *, std::default_delete<webrtc::VideoDecoder>> {
        struct VideoDecoder *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoDecoderFactory, std::default_delete<webrtc::VideoDecoderFactory>> {
    struct __compressed_pair<webrtc::VideoDecoderFactory *, std::default_delete<webrtc::VideoDecoderFactory>> {
        struct VideoDecoderFactory *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoEncoder, std::default_delete<webrtc::VideoEncoder>> {
    struct __compressed_pair<webrtc::VideoEncoder *, std::default_delete<webrtc::VideoEncoder>> {
        struct VideoEncoder *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoEncoderFactory, std::default_delete<webrtc::VideoEncoderFactory>> {
    struct __compressed_pair<webrtc::VideoEncoderFactory *, std::default_delete<webrtc::VideoEncoderFactory>> {
        struct VideoEncoderFactory *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoRendererAdapter, std::default_delete<webrtc::VideoRendererAdapter>> {
    struct __compressed_pair<webrtc::VideoRendererAdapter *, std::default_delete<webrtc::VideoRendererAdapter>> {
        struct VideoRendererAdapter *__value_;
    } __ptr_;
};

struct unique_ref<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> {
    struct unique_ptr<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> target_;
};

struct unordered_map<Class, int, std::hash<Class>, std::equal_to<Class>, std::allocator<std::pair<const Class, int>>> {
    struct __hash_table<std::__hash_value_type<Class, int>, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>, true>, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>, true>, std::allocator<std::__hash_value_type<Class, int>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<Class, int>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<Class, int>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<Class, std::__hash_value_type<Class, int>, std::hash<Class>, std::equal_to<Class>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<Class, std::__hash_value_type<Class, int>, std::equal_to<Class>, std::hash<Class>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*, std::hash<IGRequestBehavior>, std::equal_to<IGRequestBehavior>, std::allocator<std::pair<const IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>>> {
    struct __hash_table<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, std::__unordered_map_hasher<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, std::hash<IGRequestBehavior>, std::equal_to<IGRequestBehavior>, true>, std::__unordered_map_equal<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, std::equal_to<IGRequestBehavior>, std::hash<IGRequestBehavior>, true>, std::allocator<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, std::hash<IGRequestBehavior>, std::equal_to<IGRequestBehavior>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, NSMutableSet<IGNetworkingRequest *>*>, std::equal_to<IGRequestBehavior>, std::hash<IGRequestBehavior>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<IGRequestBehavior, long, std::hash<IGRequestBehavior>, std::equal_to<IGRequestBehavior>, std::allocator<std::pair<const IGRequestBehavior, long>>> {
    struct __hash_table<std::__hash_value_type<IGRequestBehavior, long>, std::__unordered_map_hasher<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, long>, std::hash<IGRequestBehavior>, std::equal_to<IGRequestBehavior>, true>, std::__unordered_map_equal<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, long>, std::equal_to<IGRequestBehavior>, std::hash<IGRequestBehavior>, true>, std::allocator<std::__hash_value_type<IGRequestBehavior, long>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestBehavior, long>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, long>, std::hash<IGRequestBehavior>, std::equal_to<IGRequestBehavior>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<IGRequestBehavior, std::__hash_value_type<IGRequestBehavior, long>, std::equal_to<IGRequestBehavior>, std::hash<IGRequestBehavior>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<IGRequestState, double, std::hash<IGRequestState>, std::equal_to<IGRequestState>, std::allocator<std::pair<const IGRequestState, double>>> {
    struct __hash_table<std::__hash_value_type<IGRequestState, double>, std::__unordered_map_hasher<IGRequestState, std::__hash_value_type<IGRequestState, double>, std::hash<IGRequestState>, std::equal_to<IGRequestState>, true>, std::__unordered_map_equal<IGRequestState, std::__hash_value_type<IGRequestState, double>, std::equal_to<IGRequestState>, std::hash<IGRequestState>, true>, std::allocator<std::__hash_value_type<IGRequestState, double>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<IGRequestState, double>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<IGRequestState, std::__hash_value_type<IGRequestState, double>, std::hash<IGRequestState>, std::equal_to<IGRequestState>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<IGRequestState, std::__hash_value_type<IGRequestState, double>, std::equal_to<IGRequestState>, std::hash<IGRequestState>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum, std::hash<StructuredLogger::MaidentitysyncfieldEnum>, std::equal_to<StructuredLogger::MaidentitysyncfieldEnum>, std::allocator<std::pair<const StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>>> {
    struct __hash_table<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, std::__unordered_map_hasher<StructuredLogger::MaidentitysyncfieldEnum, std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, std::hash<StructuredLogger::MaidentitysyncfieldEnum>, std::equal_to<StructuredLogger::MaidentitysyncfieldEnum>, true>, std::__unordered_map_equal<StructuredLogger::MaidentitysyncfieldEnum, std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, std::equal_to<StructuredLogger::MaidentitysyncfieldEnum>, std::hash<StructuredLogger::MaidentitysyncfieldEnum>, true>, std::allocator<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<StructuredLogger::MaidentitysyncfieldEnum, std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, std::hash<StructuredLogger::MaidentitysyncfieldEnum>, std::equal_to<StructuredLogger::MaidentitysyncfieldEnum>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<StructuredLogger::MaidentitysyncfieldEnum, std::__hash_value_type<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>, std::equal_to<StructuredLogger::MaidentitysyncfieldEnum>, std::hash<StructuredLogger::MaidentitysyncfieldEnum>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<long long, StructuredLogger::FximidentitytypeEnum, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::FximidentitytypeEnum>>> {
    struct __hash_table<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, std::hash<long long>, std::equal_to<long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::FximidentitytypeEnum>, std::equal_to<long long>, std::hash<long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>>> {
    struct __hash_table<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::hash<long long>, std::equal_to<long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::equal_to<long long>, std::hash<long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>>> {
    struct __hash_table<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, std::hash<long long>, std::equal_to<long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::TselectedvaluestargetingspecgeolocationscustomlocationsshapeTypeNoBuilder>, std::equal_to<long long>, std::hash<long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<long, void (^)(IGBloksNetegoContext *), std::hash<long>, std::equal_to<long>, std::allocator<std::pair<const long, void (^)(IGBloksNetegoContext *)>>> {
    struct __hash_table<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, std::__unordered_map_hasher<long, std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, std::hash<long>, std::equal_to<long>, true>, std::__unordered_map_equal<long, std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, std::equal_to<long>, std::hash<long>, true>, std::allocator<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long, std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, std::hash<long>, std::equal_to<long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<long, std::__hash_value_type<long, void (^)(IGBloksNetegoContext *)>, std::equal_to<long>, std::hash<long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>>> {
    struct __hash_table<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::SiNativeWebviewRedirectImagesSizesTypeNoBuilder>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> {
    struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, double>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, std::string>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long, BKFlexboxStyle::TouchExpansion, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, BKFlexboxStyle::TouchExpansion>>> {
    struct __hash_table<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, BKFlexboxStyle::TouchExpansion>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long, BKLispyExpression *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, BKLispyExpression *>>> {
    struct __hash_table<std::__hash_value_type<unsigned long, BKLispyExpression *>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, BKLispyExpression *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, BKLispyExpression *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, BKLispyExpression *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, BKLispyExpression *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, BKLispyExpression *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, BKLispyExpression *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long, std::unique_ptr<void, void (*)(void *)>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::unique_ptr<void, void (*)(void *)>>>> {
    struct __hash_table<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::unique_ptr<void, void (*)(void *)>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<folly::detail::EventBaseLocalBase *, std::hash<folly::detail::EventBaseLocalBase *>, std::equal_to<folly::detail::EventBaseLocalBase *>, std::allocator<folly::detail::EventBaseLocalBase *>> {
    struct __hash_table<folly::detail::EventBaseLocalBase *, std::hash<folly::detail::EventBaseLocalBase *>, std::equal_to<folly::detail::EventBaseLocalBase *>, std::allocator<folly::detail::EventBaseLocalBase *>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*>, std::allocator<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>>> {
            struct __hash_node_base<std::__hash_node<folly::detail::EventBaseLocalBase *, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<folly::detail::EventBaseLocalBase *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<folly::detail::EventBaseLocalBase *>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> {
    struct __hash_table<std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::string>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::string, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::string, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::string, void *>*>, std::allocator<std::__hash_node<std::string, void *>>> {
            struct __hash_node_base<std::__hash_node<std::string, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::hash<std::string>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::equal_to<std::string>> {
            float _field1;
        } _field4;
    } _field1;
};

struct uuid {
    unsigned char _field1[16];
};

struct vector<CGPoint, std::allocator<CGPoint>> {
    struct CGPoint *_field1;
    struct CGPoint *_field2;
    struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> {
        struct CGPoint *_field1;
    } _field3;
};

struct vector<IGGallerySectionLayout, std::allocator<IGGallerySectionLayout>> {
    struct IGGallerySectionLayout *__begin_;
    struct IGGallerySectionLayout *__end_;
    struct __compressed_pair<IGGallerySectionLayout *, std::allocator<IGGallerySectionLayout>> {
        struct IGGallerySectionLayout *__value_;
    } __end_cap_;
};

struct vector<IGSectionEntry, std::allocator<IGSectionEntry>> {
    struct IGSectionEntry *__begin_;
    struct IGSectionEntry *__end_;
    struct __compressed_pair<IGSectionEntry *, std::allocator<IGSectionEntry>> {
        struct IGSectionEntry *__value_;
    } __end_cap_;
};

struct vector<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder, std::allocator<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder>> {
    struct IgDiscoveryMapLocationInfosTypeNoBuilder *_field1;
    struct IgDiscoveryMapLocationInfosTypeNoBuilder *_field2;
    struct __compressed_pair<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder *, std::allocator<StructuredLogger::IgDiscoveryMapLocationInfosTypeNoBuilder>> {
        struct IgDiscoveryMapLocationInfosTypeNoBuilder *_field1;
    } _field3;
};

struct vector<StructuredLogger::IosLifecycleLifecycleEventsTypeNoBuilder, std::allocator<StructuredLogger::IosLifecycleLifecycleEventsTypeNoBuilder>> {
    struct IosLifecycleLifecycleEventsTypeNoBuilder *__begin_;
    struct IosLifecycleLifecycleEventsTypeNoBuilder *__end_;
    struct __compressed_pair<StructuredLogger::IosLifecycleLifecycleEventsTypeNoBuilder *, std::allocator<StructuredLogger::IosLifecycleLifecycleEventsTypeNoBuilder>> {
        struct IosLifecycleLifecycleEventsTypeNoBuilder *__value_;
    } __end_cap_;
};

struct vector<StructuredLogger::PaygraphqlecplogsuppressionpolicyType, std::allocator<StructuredLogger::PaygraphqlecplogsuppressionpolicyType>> {
    struct PaygraphqlecplogsuppressionpolicyType *_field1;
    struct PaygraphqlecplogsuppressionpolicyType *_field2;
    struct __compressed_pair<StructuredLogger::PaygraphqlecplogsuppressionpolicyType *, std::allocator<StructuredLogger::PaygraphqlecplogsuppressionpolicyType>> {
        struct PaygraphqlecplogsuppressionpolicyType *_field1;
    } _field3;
};

struct vector<StructuredLogger::SiNativeWebviewRedirectRedirectChainTypeNoBuilder, std::allocator<StructuredLogger::SiNativeWebviewRedirectRedirectChainTypeNoBuilder>> {
    struct SiNativeWebviewRedirectRedirectChainTypeNoBuilder *__begin_;
    struct SiNativeWebviewRedirectRedirectChainTypeNoBuilder *__end_;
    struct __compressed_pair<StructuredLogger::SiNativeWebviewRedirectRedirectChainTypeNoBuilder *, std::allocator<StructuredLogger::SiNativeWebviewRedirectRedirectChainTypeNoBuilder>> {
        struct SiNativeWebviewRedirectRedirectChainTypeNoBuilder *__value_;
    } __end_cap_;
};

struct vector<__weak id<RTCAudioSessionDelegate>, std::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<facebook::cp::sdk::dancification::Beat, std::__1::allocator<facebook::cp::sdk::dancification::Beat>> {
    struct Beat *__begin_;
    struct Beat *__end_;
    struct __compressed_pair<facebook::cp::sdk::dancification::Beat *, std::__1::allocator<facebook::cp::sdk::dancification::Beat>> {
        struct Beat *__value_;
    } __end_cap_;
};

struct vector<facebook::cp::sdk::dancification::Beat, std::allocator<facebook::cp::sdk::dancification::Beat>> {
    struct Beat *_field1;
    struct Beat *_field2;
    struct __compressed_pair<facebook::cp::sdk::dancification::Beat *, std::allocator<facebook::cp::sdk::dancification::Beat>> {
        struct Beat *_field1;
    } _field3;
};

struct vector<facebook::perflogger::Annotation, std::allocator<facebook::perflogger::Annotation>> {
    struct Annotation *__begin_;
    struct Annotation *__end_;
    struct __compressed_pair<facebook::perflogger::Annotation *, std::allocator<facebook::perflogger::Annotation>> {
        struct Annotation *__value_;
    } __end_cap_;
};

struct vector<rtc::tslog::TsCounter, std::allocator<rtc::tslog::TsCounter>> {
    struct TsCounter *_field1;
    struct TsCounter *_field2;
    struct __compressed_pair<rtc::tslog::TsCounter *, std::allocator<rtc::tslog::TsCounter>> {
        struct TsCounter *_field1;
    } _field3;
};

struct vector<std::pair<int, int>, std::allocator<std::pair<int, int>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<int, int>*, std::allocator<std::pair<int, int>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<void (^)(FBMPVideoData *), NSObject<OS_dispatch_queue>*>, std::allocator<std::pair<void (^)(FBMPVideoData *), NSObject<OS_dispatch_queue>*>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<void (^)(FBMPVideoData *), NSObject<OS_dispatch_queue>*>*, std::allocator<std::pair<void (^)(FBMPVideoData *), NSObject<OS_dispatch_queue>*>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::shared_ptr<facebook::cp::sdk::reels::RenderNodeProvider>, std::allocator<std::shared_ptr<facebook::cp::sdk::reels::RenderNodeProvider>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::shared_ptr<facebook::cp::sdk::reels::RenderNodeProvider>*, std::allocator<std::shared_ptr<facebook::cp::sdk::reels::RenderNodeProvider>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::string, std::allocator<std::string>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *_field1;
    } _field3;
};

struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::vector<std::string>*, std::allocator<std::vector<std::string>>> {
        void *_field1;
    } _field3;
};

struct vector<unsigned char, std::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

struct vector<void (^)(BKBloksBasicAnimation_DEPRECATED *, bool), std::allocator<void (^)(BKBloksBasicAnimation_DEPRECATED *, bool)>> {
    CDUnknownBlockType *__begin_;
    CDUnknownBlockType *__end_;
    struct __compressed_pair<void (^__strong *)(BKBloksBasicAnimation_DEPRECATED *, bool), std::allocator<void (^)(BKBloksBasicAnimation_DEPRECATED *, bool)>> {
        CDUnknownBlockType *__value_;
    } __end_cap_;
};

struct vector<webrtc::GenericFrameInfo, std::allocator<webrtc::GenericFrameInfo>> {
    struct GenericFrameInfo *_field1;
    struct GenericFrameInfo *_field2;
    struct __compressed_pair<webrtc::GenericFrameInfo *, std::allocator<webrtc::GenericFrameInfo>> {
        struct GenericFrameInfo *_field1;
    } _field3;
};

struct vector<webrtc::RtcpFeedback, std::allocator<webrtc::RtcpFeedback>> {
    struct RtcpFeedback *_field1;
    struct RtcpFeedback *_field2;
    struct __compressed_pair<webrtc::RtcpFeedback *, std::allocator<webrtc::RtcpFeedback>> {
        struct RtcpFeedback *_field1;
    } _field3;
};

struct vector<webrtc::RtpCodecParameters, std::allocator<webrtc::RtpCodecParameters>> {
    struct RtpCodecParameters *_field1;
    struct RtpCodecParameters *_field2;
    struct __compressed_pair<webrtc::RtpCodecParameters *, std::allocator<webrtc::RtpCodecParameters>> {
        struct RtpCodecParameters *_field1;
    } _field3;
};

struct vector<webrtc::RtpEncodingParameters, std::allocator<webrtc::RtpEncodingParameters>> {
    struct RtpEncodingParameters *_field1;
    struct RtpEncodingParameters *_field2;
    struct __compressed_pair<webrtc::RtpEncodingParameters *, std::allocator<webrtc::RtpEncodingParameters>> {
        struct RtpEncodingParameters *_field1;
    } _field3;
};

struct vector<webrtc::RtpExtension, std::allocator<webrtc::RtpExtension>> {
    struct RtpExtension *_field1;
    struct RtpExtension *_field2;
    struct __compressed_pair<webrtc::RtpExtension *, std::allocator<webrtc::RtpExtension>> {
        struct RtpExtension *_field1;
    } _field3;
};

struct weak_ptr<const facebook::cp::sdk::reels::Clip> {
    struct Clip *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<mediastreaming::ISessionLogger> {
    struct ISessionLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDUnion_7e831cd3 _field1;
    _Bool _field2;
} StorageTriviallyDestructible_f6776964;

typedef struct {
    CDUnion_2d14f5d8 _field1;
    _Bool _field2;
} StorageTriviallyDestructible_634d90c7;

typedef struct {
    struct vector<facebook::cp::sdk::dancification::Beat, std::allocator<facebook::cp::sdk::dancification::Beat>> _field1;
    double _field2;
    double _field3;
    double _field4;
} VisualBeats_68b14220;

typedef struct {
    struct vector<facebook::cp::sdk::dancification::Beat, std::allocator<facebook::cp::sdk::dancification::Beat>> _field1;
    double _field2;
} AudioBeats_44309c29;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    CDUnknownBlockType _field1;
} CDStruct_4d8dea2f;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    long long _field7;
    long long _field8;
    unsigned long long _field9;
    _Bool _field10;
} CDStruct_61bbf500;

typedef struct {
    NSString *sections;
    NSNumber *tutorialCount;
    NSString *cacheKey;
} CDStruct_370d239f;

typedef struct {
    FOAOmniGridLayoutProps *layoutProps;
    FOAOmniGridViewModel *viewModel;
    _Bool shouldAnimate;
} CDStruct_ba60184c;

typedef struct {
    NSString *broadcastId;
    NSString *serverInfoData;
} CDStruct_b6aeabb7;

typedef struct {
    _Bool isPrefetch;
    _Bool isPullToRefresh;
    _Bool needPersistentSections;
    _Bool includeChallenges;
    NSString *targetMediaId;
} CDStruct_9fd3ba0f;

typedef struct {
    _Bool implicitlyResetMarqueeAnimationTiming;
    _Bool showAudioAttributionUFIButtonInViewer;
    _Bool isRemixUFIButtonEnabled;
    _Bool showAudioTrendingIcon;
    _Bool showAudioTrendingIconInCombinedAttribution;
    _Bool useCombinedScrollingAttributionLabel;
    _Bool showReactiveAudioAttribution;
    _Bool experimentalAudioOnlyAttributionNoAnimations;
    _Bool showSeeAllRemixesButton;
    _Bool isHashtagChallengeEnabled;
    _Bool isHashtagChallengeTryPrefixEnabled;
    _Bool showRemixContextualHighlight;
    _Bool showBreakingCreatorContextualHighlight;
    _Bool showInThisReelEntryPoint;
    _Bool showUserTag;
    _Bool showReshareCount;
    _Bool showEffectPivot;
    _Bool useCaptionEllipsis;
    _Bool isFollowButtonBorderEnabled;
    unsigned long long moreOptionsButtonPosition;
    _Bool showMusicNoteIcon;
    _Bool animateAudioAttributionUFIButton;
    _Bool animateAudioAttributionUFIButtonMusicNote;
    _Bool showLocationAttribution;
    _Bool showStickerResultsAttribution;
    _Bool showVoiceoverContextualHighlight;
} CDStruct_0396e3fa;

typedef struct {
    _Bool audioIndicatorEnabled;
    _Bool isAudioDisabledByPolicy;
    _Bool isForceMuteStartVideoEnabled;
    _Bool videoPreviewEnabled;
    _Bool videoStitchingEnabled;
    _Bool persistentOverlaysEnabled;
    _Bool imageProgressViewDisabled;
    _Bool allowCaptions;
    _Bool timeIndicatorEnabled;
    _Bool scrubbingEnabled;
    _Bool isVideoCallCowatchItem;
    _Bool supportsLongPress;
    _Bool videoIndicatorDisabled;
    _Bool timeIndicatorLoadingStateEnabled;
    _Bool tapToEnterViewerEnabled;
    _Bool clipsThumbnailChainEnabled;
    _Bool dressDownClipsMediaEnabled;
    _Bool fullScreenVideoHintEnabled;
    long long defaultNumberOfClipsLoops;
    _Bool isIGTVMedia;
    _Bool isMonetizableIGTVMedia;
    _Bool isSimplifiedIGTVOrFeedVideo;
    _Bool isClipsMedia;
    _Bool isPreviewableVideoAd;
    _Bool isSensitiveVerticalAd;
} CDStruct_10ab8798;

typedef struct {
    _Bool disableLeftEdgeSwiping;
    _Bool disableRightEdgeSwiping;
    _Bool disableRightEdgeSwipeIntoDirect;
    _Bool disableAllSwiping;
    _Bool conservativePanGestureRecognition;
    double disableLeftEdgeSwipingThreshold;
} CDStruct_fe30105c;

typedef struct {
    _Bool isEnabledForMainFeed;
    _Bool isEnabledForDiscoveryFeeds;
    _Bool isTapInteractionModelEnabled;
    _Bool isPhotoMirrorEnabled;
    unsigned long long backgroundMode;
    _Bool isCaptionSwipeToDismissEnabled;
    _Bool isShortformTimestampEnabled;
    _Bool isExtendedOverlayHeightEnabled;
    _Bool isVideoScrubberEnabled;
    _Bool isStoryRingSupportEnabled;
    _Bool isUnifiedOverflowMenuEnabled;
} CDStruct_d74fe220;

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
} CDStruct_8024420c;

typedef struct {
    _Bool isInitialized;
    _Bool isUserPayActivated;
    unsigned long long audienceType;
    _Bool isInternalMute;
    _Bool isVideoToggledOff;
    _Bool shareButtonEnabled;
    _Bool liveQAEnabled;
    _Bool realtimeQAEnabledForViewer;
    _Bool realtimeQAEnabledForBroadcaster;
    _Bool shoppingEnabled;
    _Bool isTapToHideEnabled;
    _Bool requestToJoinEnabled;
    _Bool isSystemCommentV2Enabled;
    _Bool isExtensionV2Enabled;
    _Bool isFooterExpansionEnabled;
    _Bool isFooterBadgeEnabled;
    _Bool isHostHeaderRedesignEnabled;
    _Bool separateInviteRequestEnabled;
    _Bool hideDirectShareButton;
    _Bool tapToShowPillEnabled;
    _Bool tapStateAnimationEnabled;
    _Bool isViewerToViewerWavesEnabled;
    _Bool shouldHideBadgesSystemComment;
    _Bool viewerIncrementalityTestCommentDisabled;
    _Bool viewerIncrementalityTestLikeDisabled;
    _Bool hostIncrementalityTestCommentDisabled;
    _Bool hostIncrementalityTestLikeDisabled;
    _Bool shouldUseBranding2021;
} CDStruct_eef638a9;

typedef struct {
    _Bool isPaged;
    _Bool isTall;
    double viewWidth;
    double viewHeight;
} CDStruct_19874968;

typedef struct {
    _Bool _field1;
    unsigned char _field2;
    _Bool _field3;
    unsigned long long _field4;
} CDStruct_6a6a01a4;

typedef struct {
    _Bool startAtWillSend;
    unsigned long long checkEventType;
    _Bool tracingOnlyOneTouch;
    double delayTime;
    _Bool tracingGestureSession;
} CDStruct_eb08259b;

typedef struct {
    _Bool cancelBackoffRetry;
    long long baseDurationMs;
    long long maxBackoffTimeMs;
    long long maxRetries;
} CDStruct_5d77a0e9;

typedef struct {
    unsigned long long displayNoThumbnailOption;
    unsigned long long verticalAlignment;
    double currentTimeLabelSize;
} CDStruct_3f738656;

typedef struct {
    unsigned long long bytesSent;
    unsigned long long bytesReceived;
} CDStruct_a508bfa1;

typedef struct {
    unsigned long long count;
    double *array;
} CDStruct_3b9f1d24;

typedef struct {
    MISSING_TYPE *_field1[3];
} CDStruct_d80e62f2;

typedef struct {
    MISSING_TYPE *_field1[4];
} CDStruct_f1db2b5e;

typedef struct {
    unsigned int *_field1;
    unsigned long long _field2;
} CDStruct_63a81634;

typedef struct {
    double _field1;
    id _field2;
    _Bool _field3;
} CDStruct_ca0fb78e;

typedef struct {
    double cameraPreviewCornerRadius;
    UIImage *previewImage;
} CDStruct_58efcd40;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double scaleX;
    double relativeCenterX;
    double relativeCenterY;
} CDStruct_710e81ab;

typedef struct {
    double _field1;
} CDStruct_2418a849;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

typedef struct {
    float _field1;
    float _field2;
    long long _field3;
} CDStruct_b9ba3679;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    long long _field1;
    double _field2;
    _Bool _field3;
} CDStruct_60aa3504;

typedef struct {
    long long animationStyle;
    double animationDuration;
    double animationDamping;
} CDStruct_f53b2872;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long addToCartBehavior;
    long long firstSubtitleType;
    long long secondSubtitleType;
    long long entryPoint;
    _Bool showProfileOverlay;
} CDStruct_0363a6cf;

typedef struct {
    long long maximumUntruncatedNumberOfLines;
    long long truncateToNumberOfLines;
} CDStruct_ce671a2f;

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    struct CGSize _field4;
} CDStruct_375a152e;

typedef struct {
    _Bool disablesScrollingIfPossible;
    _Bool haloGridResizeEnabled;
    _Bool usesMarloForFloatingGrid;
    _Bool enableDragToDismissGesture;
    _Bool enableCameraFlipAnimation;
    long long minGridSizeForLetterboxSelfView;
    CDStruct_f53b2872 animationOptions;
    FOAOmniGridRoundedCornerOptions *roundedCornerOptions;
} CDStruct_b383d51a;

typedef struct {
    _Bool _field1;
    struct CGSize _field2;
    struct CGSize _field3;
    unsigned long long _field4;
} CDStruct_d7960f6c;

typedef struct {
    unsigned long long count;
    double baseLine;
    double lineHeight;
    struct __CTLine **lines;
    double *widths;
} CDStruct_7a56664d;

typedef struct {
    struct CGColor *_field1;
    struct CGColor *_field2;
    struct CGColor *_field3;
    struct CGColor *_field4;
} CDStruct_a5ac02f4;

typedef struct {
    float _field1;
    float _field2;
    CDStruct_1b6d18a9 _field3;
    CDStruct_1b6d18a9 _field4;
    float _field5;
    float _field6;
} CDStruct_15fe95f0;

typedef struct {
    float _field1;
    CDStruct_1b6d18a9 _field2;
    long long _field3;
    float _field4;
    float _field5;
} CDStruct_62455522;

typedef struct {
    long long _field1;
    struct Required<long> _field2;
    long long _field3;
    struct Required<bool> _field4;
    struct Required<bool> _field5;
    struct Required<int> _field6;
    struct Required<bool> _field7;
    _Bool _field8;
} CDStruct_42cde6ea;

typedef struct {
    struct {
        double _field1;
        double _field2;
    } _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
} CDStruct_90e2a262;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

typedef struct {
    struct CGSize cellSize;
    double viewHeight;
} CDStruct_afe9634b;

typedef struct {
    struct CGSize encodingDimension;
    long long initialBitrateBps;
    long long maxBitrateBps;
    _Bool shouldUseRsysRtcInfra;
} CDStruct_a9bb71d4;

typedef struct {
    struct CLLocationCoordinate2D center;
    CDStruct_951efa70 span;
} CDStruct_b7cb895d;

typedef struct {
    struct CGRect _field1;
    struct CGRect _field2;
    struct CGRect _field3;
    struct CGRect _field4;
    struct CGRect _field5;
    struct CGRect _field6;
    struct CGRect _field7;
    struct CGRect _field8;
} CDStruct_e287b37a;

typedef struct {
    struct CGRect _field1;
    struct CGRect _field2;
    struct CGRect _field3;
    struct CGRect _field4;
    struct CGRect _field5;
    struct CGRect _field6;
    struct CGRect _field7;
} CDStruct_b7a5ad77;

typedef struct {
    struct CGRect _field1;
    struct CGRect _field2;
} CDStruct_b7523c42;

typedef struct {
    struct DiskVideoRecorderConfig diskRecordingConfig;
    _Bool recordOnDisk;
    _Bool useTimeSeriesLogging;
    _Bool skipFlushDuringSwap;
    int initialVideoBitrateKbps;
    int minVideoBitrateKbps;
    int maxVideoBitrateKbps;
    int bitrateScalerGranularity;
    int bitrateScalerMinHeight;
    int bitrateScalerMaxHeight;
    int framerate;
    int h264MaxEncodeFailureRetries;
    _Bool h264UseCABAC;
    _Bool audioInterruptionRestartDisabled;
    _Bool aacOverride;
    _Bool useAudioUnitWrapper;
    _Bool rtcH264ResetEncoderOnError;
    _Bool preferWifi;
    NSString *loggingLevels;
    _Bool useSendStreamDry;
    _Bool useNewFrameDropperImplementation;
    _Bool enableSendSidePacer;
    _Bool useMediaFromJoinResponse;
    _Bool isLiveWithRsysStack;
} CDStruct_49b515e3;

typedef struct {
    struct IGGridLayoutConfiguration gridConfiguration;
    long long traits;
} CDStruct_0f031222;

typedef struct {
    NSURL *rtmpURL;
    NSURL *fbLiveURL;
    NSURL *fbLiveQuicURL;
    struct shared_ptr<const std::vector<unsigned char>> rtmpConnectionToken;
    struct shared_ptr<const std::vector<unsigned char>> fbLiveConnectionToken;
    struct AudioConfig audioConfig;
    struct VideoConfig videoConfig;
    struct {
        int sendHardTimeoutMsec;
        int sendCheckTimeoutMsec;
        int queueCapacityInBytes;
        double queueVideoCapacityInSeconds;
        int percentageOfCapacityToDrop;
        int connectionRetryCount;
        int connectionRetryDelay;
        int speedTestPayloadSize;
        int speedTestPayloadChunkSize;
        int speedTestWaitResponseTimeoutInSeconds;
        unsigned long long measurementsIntervalInMs;
        double speedTestMinimumBandwidthThreshold;
        int speedTestRetryMaxCount;
        double speedTestRetryTimeDelay;
        _Bool speedTestDisable;
        _Bool cancelSpeedTestOnStart;
        _Bool waitForSpeedTest;
        _Bool shouldProbeRTTWithPings;
        _Bool useSSLFactory;
        _Bool use1RTTconnectionSetup;
        _Bool useVideoProtocol;
        _Bool enableQuic;
        int quicStreamConfig;
        _Bool useFastQuicWriter;
        NSString *quicCongestionControlType;
        _Bool quicPacingEnabled;
        double copaLatencyFactor;
        long long sendBufferSize;
        int connectTimeoutMs;
        _Bool waitForConnectAck;
        _Bool excludeNotSentBytesFromThroughput;
        _Bool useExperimentalLowLatencyMode;
        _Bool enableClientCounter;
        int quicSocketDrainTimeoutMs;
        _Bool sendStreamInterruptionEnded;
        int minBytesLimitTransportWrite;
        _Bool enableQuicTcpRacing;
        int tcpConnectDelayMs;
        int statsReportingIntervalMs;
        _Bool includeTransportQueueSizeInQueueSize;
        long long quicMaxSendBufferSizeBytes;
        _Bool enableRushGoAwayFrame;
    } networkConfig;
    struct ThroughputMonitorConfig throughputMonitorConfig;
    struct AdaptiveBitrateConfig adaptiveBitrateConfig;
    struct DiskVideoRecorderConfig diskRecordingConfig;
    _Bool recordOnDisk;
    struct FBVideoBroadcastSessionTimestampConfig timestampConfig;
    struct LiveTraceConfig liveTraceConfig;
    _Bool enableVPLogForSdk;
    _Bool isLatencySensitive;
    struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> initialBitratePrediction;
    basic_string_0ec669f3 qualityModelParameters;
} CDStruct_b3f291cd;

// Ambiguous groups
typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
} CDStruct_2a4d9400;

typedef struct {
    _Bool _field1;
    _Bool _field2;
} CDStruct_3d581f42;

typedef struct {
    _Bool adjustTop;
    _Bool adjustBottom;
} CDStruct_a41bd72d;

typedef struct {
    _Bool includeFixedDestinations;
    _Bool omitTopics;
} CDStruct_3894cc73;

typedef struct {
    _Bool shouldLoadUsingActions;
    _Bool shouldUpdateFromInitialContent;
} CDStruct_54f302a6;

typedef struct {
    _Bool _field1;
} CDStruct_b31ca263;

typedef struct {
    _Bool allowEnablingAutoAdvanceAndSwipeToSwitchVideoAfterOpeningIGTVFeedPreview;
} CDStruct_0ba6daeb;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitudeDelta;
    double longitudeDelta;
} CDStruct_951efa70;

typedef struct Either<NSError *, FBDiskVideoRecorderDiskResults *> {
    NSError *_left;
    FBDiskVideoRecorderDiskResults *_right;
    _Bool _isLeft;
} Either_4472cfe1;

typedef struct FBCFRefGuard<__CVBuffer *> {
    struct __CVBuffer *_field1;
} FBCFRefGuard_2aed3383;

typedef struct Optional<StructuredLogger::IgcowatcheventmediasourceEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
} Optional_0c98c4d5;

typedef struct Optional<StructuredLogger::IgcowatcheventmediatypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
} Optional_f7371752;

typedef struct Optional<StructuredLogger::IgcowatcheventsourceEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_7e831cd3 _field1;
        _Bool _field2;
    } _field1;
} Optional_5e890e40;

typedef struct Optional<StructuredLogger::IgshoppingsuggestedtagsinfoType> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct IgshoppingsuggestedtagsinfoType _field2;
        } _field1;
        _Bool _field2;
    } _field1;
} Optional_3360737a;

typedef struct Optional<StructuredLogger::IguserinteropusertypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
} Optional_8822d440;

typedef struct Optional<StructuredLogger::LsthreadtypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
} Optional_a57f94f2;

typedef struct Optional<StructuredLogger::SearchstandardresulttypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
} Optional_e0e13a27;

typedef struct Optional<StructuredLogger::SearchtransporttypeEnum> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 _field1;
        _Bool _field2;
    } _field1;
} Optional_b2922ba5;

typedef struct Optional<bool> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            _Bool value;
        } ;
        _Bool hasValue;
    } storage_;
} Optional_78e21a3f;

typedef struct Optional<double> {
    struct StorageTriviallyDestructible {
        union {
            char emptyState;
            double value;
        } ;
        _Bool hasValue;
    } storage_;
} Optional_48d232f6;

typedef struct Optional<long long> {
    struct StorageTriviallyDestructible {
        CDUnion_2d14f5d8 ;
        _Bool hasValue;
    } storage_;
} Optional_381dc36e;

typedef struct Optional<std::unordered_map<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct unordered_map<StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum, std::hash<StructuredLogger::MaidentitysyncfieldEnum>, std::equal_to<StructuredLogger::MaidentitysyncfieldEnum>, std::allocator<std::pair<const StructuredLogger::MaidentitysyncfieldEnum, StructuredLogger::FximloggerappnameEnum>>> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
} Optional_81a14ff5;

typedef struct Optional<std::unordered_map<long long, StructuredLogger::FximidentitytypeEnum>> {
    struct StorageNonTriviallyDestructible {
        union {
            char _field1;
            struct unordered_map<long long, StructuredLogger::FximidentitytypeEnum, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::FximidentitytypeEnum>>> _field2;
        } _field1;
        _Bool _field2;
    } _field1;
} Optional_3f778f9c;

typedef struct Optional<unsigned int> {
    struct StorageTriviallyDestructible {
        union {
            char _field1;
            unsigned int _field2;
        } _field1;
        _Bool _field2;
    } _field1;
} Optional_0c33f205;

typedef struct PromiseEither<NSError *, FBDiskVideoRecorderDiskResults *> {
    struct shared_ptr<FB::Promise<FB::Functional::Either<NSError *, FBDiskVideoRecorderDiskResults *>>> _field1;
} PromiseEither_b6de66b0;

typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
} basic_string_0ec669f3;

typedef struct duration<long long, std::ratio<1, 1000>> {
    long long __rep_;
} duration_15f873c1;

typedef struct function<bool (UIView *, FBTouchImpressionTouchData)> {
    struct __value_func<bool (UIView *, FBTouchImpressionTouchData)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_f190f6a9;

typedef struct function<void (const mediastreaming::StreamingError &)> {
    struct __value_func<void (const mediastreaming::StreamingError &)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_fe88d664;

typedef struct function<void (int)> {
    struct __value_func<void (int)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_77eca650;

typedef struct function<void (mediastreaming::AppleEncodedAudioData)> {
    struct __value_func<void (mediastreaming::AppleEncodedAudioData)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_30f7e6d5;

typedef struct function<void (mediastreaming::CMSampleBufferSmartPtr)> {
    struct __value_func<void (mediastreaming::CMSampleBufferSmartPtr)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_2a3b6814;

typedef struct function<void (mediastreaming::StreamingError)> {
    struct __value_func<void (mediastreaming::StreamingError)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_4084f207;

typedef struct function<void (std::string)> {
    struct __value_func<void (std::string)> {
        struct type __buf_;
        void *__f_;
    } __f_;
} function_55c89946;

typedef struct future<std::vector<facebook::artech::anchorservice::datawrappers::HitTestResultData>> {
    void *_field1;
} future_6ca21f13;

typedef struct optional<webrtc::H264::ProfileLevelId> {
    _Bool engaged_;
    union {
        struct ProfileLevelId data_;
        struct dummy_type dummy_;
    } ;
} optional_9f2cf8d4;

typedef struct pair<id<FBCameraCaptureManaging>, FBARCameraSessionType> {
    id _field1;
    unsigned char _field2;
} pair_56580787;

typedef struct scoped_refptr<facebook::rtc::StallRecoveryADMListener> {
    struct StallRecoveryADMListener *ptr_;
} scoped_refptr_bb4aa61e;

typedef struct scoped_refptr<webrtc::AudioDecoderFactory> {
    struct AudioDecoderFactory *ptr_;
} scoped_refptr_4605340c;

typedef struct scoped_refptr<webrtc::AudioDeviceModule> {
    struct AudioDeviceModule *ptr_;
} scoped_refptr_0271d9ef;

typedef struct scoped_refptr<webrtc::AudioEncoderFactory> {
    struct AudioEncoderFactory *ptr_;
} scoped_refptr_3a9e6b6a;

typedef struct scoped_refptr<webrtc::AudioProcessing> {
    struct AudioProcessing *ptr_;
} scoped_refptr_9ba5b87d;

typedef struct scoped_refptr<webrtc::AudioSourceInterface> {
    struct AudioSourceInterface *ptr_;
} scoped_refptr_8b29514b;

typedef struct scoped_refptr<webrtc::AudioTrackInterface> {
    struct AudioTrackInterface *_field1;
} scoped_refptr_833c0867;

typedef struct scoped_refptr<webrtc::DataChannelInterface> {
    struct DataChannelInterface *ptr_;
} scoped_refptr_09a33b10;

typedef struct scoped_refptr<webrtc::DtmfSenderInterface> {
    struct DtmfSenderInterface *ptr_;
} scoped_refptr_25177f94;

typedef struct scoped_refptr<webrtc::FrameDecryptorInterface> {
    struct FrameDecryptorInterface *_field1;
} scoped_refptr_976466dd;

typedef struct scoped_refptr<webrtc::FrameEncryptorInterface> {
    struct FrameEncryptorInterface *_field1;
} scoped_refptr_01237151;

typedef struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
} scoped_refptr_b674d2a6;

typedef struct scoped_refptr<webrtc::MediaSourceInterface> {
    struct MediaSourceInterface *ptr_;
} scoped_refptr_74f9e477;

typedef struct scoped_refptr<webrtc::MediaStreamInterface> {
    struct MediaStreamInterface *ptr_;
} scoped_refptr_6217ee82;

typedef struct scoped_refptr<webrtc::MediaStreamTrackInterface> {
    struct MediaStreamTrackInterface *ptr_;
} scoped_refptr_7d7e84a9;

typedef struct scoped_refptr<webrtc::PeerConnectionFactoryInterface> {
    struct PeerConnectionFactoryInterface *ptr_;
} scoped_refptr_1eaeeec2;

typedef struct scoped_refptr<webrtc::PeerConnectionInterface> {
    struct PeerConnectionInterface *ptr_;
} scoped_refptr_1f0d680a;

typedef struct scoped_refptr<webrtc::RtpReceiverInterface> {
    struct RtpReceiverInterface *ptr_;
} scoped_refptr_92bf499b;

typedef struct scoped_refptr<webrtc::RtpSenderInterface> {
    struct RtpSenderInterface *ptr_;
} scoped_refptr_3635276f;

typedef struct scoped_refptr<webrtc::RtpTransceiverInterface> {
    struct RtpTransceiverInterface *ptr_;
} scoped_refptr_f1ddbb35;

typedef struct scoped_refptr<webrtc::VideoTrackInterface> {
    struct VideoTrackInterface *_field1;
} scoped_refptr_cae59c25;

typedef struct scoped_refptr<webrtc::VideoTrackSourceInterface> {
    struct VideoTrackSourceInterface *ptr_;
} scoped_refptr_a41c3e90;

typedef struct shared_ptr<facebook::cp::sdk::reels::AssetCache> {
    struct AssetCache *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_cb90f5a3;

typedef struct shared_ptr<facebook::cp::sdk::reels::Composition> {
    struct Composition *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dfc509ed;

typedef struct shared_ptr<facebook::cp::sdk::reels::Project> {
    struct Project *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_d00164f8;

typedef struct shared_ptr<facebook::cp::sdk::reels::RenderNodeProvider> {
    struct RenderNodeProvider *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_75d04cf5;

typedef struct shared_ptr<facebook::distribgw::client::DGWClient> {
    struct DGWClient *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ab386c2e;

typedef struct shared_ptr<facebook::react::CallInvoker> {
    struct CallInvoker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_09f1d460;

typedef struct shared_ptr<facebook::react::JSExecutorFactory> {
    struct JSExecutorFactory *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7c4996dd;

typedef struct shared_ptr<facebook::react::MessageQueueThread> {
    struct MessageQueueThread *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_1bc7a6b7;

typedef struct shared_ptr<facebook::react::ModuleRegistry> {
    struct ModuleRegistry *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_8e97821c;

typedef struct shared_ptr<facebook::react::TurboModule> {
    struct TurboModule *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_3725e3cd;

typedef struct shared_ptr<facebook::realtime::bladerunner::Client> {
    struct Client *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_fe4a73e8;

typedef struct shared_ptr<facebook::realtime::bladerunner::ClientProvider> {
    struct ClientProvider *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8af1db5f;

typedef struct shared_ptr<facebook::realtime::bladerunner::caf::ResponseHandler> {
    struct ResponseHandler *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_1096949c;

typedef struct shared_ptr<facebook::realtime::bladerunner::caf::Settings> {
    struct Settings *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_faaa92ad;

typedef struct shared_ptr<facebook::realtime::common::appstate::AppForegroundStateListener> {
    struct AppForegroundStateListener *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1eab6773;

typedef struct shared_ptr<facebook::rtgw::client::SubscribeCallback> {
    struct SubscribeCallback *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_de17f503;

typedef struct shared_ptr<folly::Executor> {
    struct Executor *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_91b9a46e;

typedef struct shared_ptr<mediastreaming::DvrManagerService> {
    struct DvrManagerService *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_fc0307b8;

typedef struct shared_ptr<mobileconfig::FBMobileConfigOverridesTable> {
    struct FBMobileConfigOverridesTable *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_ac567d75;

typedef struct shared_ptr<mobileconfig::FBMobileConfigQEGroupInfo> {
    struct FBMobileConfigQEGroupInfo *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_ab77b8b0;

typedef struct shared_ptr<std::vector<facebook::mobile::xplat::livestreaming::DroppedFrame>> {
    void *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_95a834d4;

typedef struct shared_ptr<void> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_b60d0e1e;

typedef struct unique_ptr<BKBloksAnimation, std::default_delete<BKBloksAnimation>> {
    struct __compressed_pair<BKBloksAnimation *, std::default_delete<BKBloksAnimation>> {
        struct BKBloksAnimation *__value_;
    } __ptr_;
} unique_ptr_fce8e652;

typedef struct unique_ptr<facebook::react::JSExecutorFactory, std::default_delete<facebook::react::JSExecutorFactory>> {
    struct __compressed_pair<facebook::react::JSExecutorFactory *, std::default_delete<facebook::react::JSExecutorFactory>> {
        struct JSExecutorFactory *_field1;
    } _field1;
} unique_ptr_7f7506ab;

typedef struct unique_ptr<facebook::rtc::OverlayConfigLayer, std::default_delete<facebook::rtc::OverlayConfigLayer>> {
    struct __compressed_pair<facebook::rtc::OverlayConfigLayer *, std::default_delete<facebook::rtc::OverlayConfigLayer>> {
        struct OverlayConfigLayer *_field1;
    } _field1;
} unique_ptr_0999a890;

typedef struct unique_ptr<facebook::xplat::module::CxxModule, std::default_delete<facebook::xplat::module::CxxModule>> {
    struct __compressed_pair<facebook::xplat::module::CxxModule *, std::default_delete<facebook::xplat::module::CxxModule>> {
        struct CxxModule *__value_;
    } __ptr_;
} unique_ptr_029a3a2e;

typedef struct unique_ptr<rtc::BitrateAllocationStrategy, std::default_delete<rtc::BitrateAllocationStrategy>> {
    struct __compressed_pair<rtc::BitrateAllocationStrategy *, std::default_delete<rtc::BitrateAllocationStrategy>> {
        struct BitrateAllocationStrategy *_field1;
    } _field1;
} unique_ptr_e9998c85;

typedef struct unique_ptr<rtc::IntervalRange, std::default_delete<rtc::IntervalRange>> {
    struct __compressed_pair<rtc::IntervalRange *, std::default_delete<rtc::IntervalRange>> {
        struct IntervalRange *_field1;
    } _field1;
} unique_ptr_e47a9ece;

typedef struct unique_ptr<webrtc::IceCandidateInterface, std::default_delete<webrtc::IceCandidateInterface>> {
    struct __compressed_pair<webrtc::IceCandidateInterface *, std::default_delete<webrtc::IceCandidateInterface>> {
        struct IceCandidateInterface *_field1;
    } _field1;
} unique_ptr_2559677c;

typedef struct unique_ptr<webrtc::MediaConstraints, std::default_delete<webrtc::MediaConstraints>> {
    struct __compressed_pair<webrtc::MediaConstraints *, std::default_delete<webrtc::MediaConstraints>> {
        struct MediaConstraints *__value_;
    } __ptr_;
} unique_ptr_04eba08e;

typedef struct unique_ptr<webrtc::MediaTransportFactory, std::default_delete<webrtc::MediaTransportFactory>> {
    struct __compressed_pair<webrtc::MediaTransportFactory *, std::default_delete<webrtc::MediaTransportFactory>> {
        struct MediaTransportFactory *__value_;
    } __ptr_;
} unique_ptr_04b94526;

typedef struct unique_ptr<webrtc::RTPFragmentationHeader, std::default_delete<webrtc::RTPFragmentationHeader>> {
    struct __compressed_pair<webrtc::RTPFragmentationHeader *, std::default_delete<webrtc::RTPFragmentationHeader>> {
        struct RTPFragmentationHeader *_field1;
    } _field1;
} unique_ptr_092ad6b4;

typedef struct unique_ptr<webrtc::VideoDecoder, std::default_delete<webrtc::VideoDecoder>> {
    struct __compressed_pair<webrtc::VideoDecoder *, std::default_delete<webrtc::VideoDecoder>> {
        struct VideoDecoder *__value_;
    } __ptr_;
} unique_ptr_8ce5ae0d;

typedef struct unique_ptr<webrtc::VideoDecoderFactory, std::default_delete<webrtc::VideoDecoderFactory>> {
    struct __compressed_pair<webrtc::VideoDecoderFactory *, std::default_delete<webrtc::VideoDecoderFactory>> {
        struct VideoDecoderFactory *__value_;
    } __ptr_;
} unique_ptr_35202073;

typedef struct unique_ptr<webrtc::VideoEncoder, std::default_delete<webrtc::VideoEncoder>> {
    struct __compressed_pair<webrtc::VideoEncoder *, std::default_delete<webrtc::VideoEncoder>> {
        struct VideoEncoder *__value_;
    } __ptr_;
} unique_ptr_55387c1b;

typedef struct unique_ptr<webrtc::VideoEncoderFactory, std::default_delete<webrtc::VideoEncoderFactory>> {
    struct __compressed_pair<webrtc::VideoEncoderFactory *, std::default_delete<webrtc::VideoEncoderFactory>> {
        struct VideoEncoderFactory *__value_;
    } __ptr_;
} unique_ptr_400c1aa0;

typedef struct unordered_map<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>>> {
    struct __hash_table<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::hash<long long>, std::equal_to<long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::PromotedPostsFinishStepSelectedValuesLocationsCustomLocationsTypeNoBuilder>, std::equal_to<long long>, std::hash<long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_71f3fc84;

typedef struct vector<CGPoint, std::allocator<CGPoint>> {
    struct CGPoint *_field1;
    struct CGPoint *_field2;
    struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> {
        struct CGPoint *_field1;
    } _field3;
} vector_9d0e1020;

typedef struct vector<__weak id<RTCAudioSessionDelegate>, std::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__value_;
    } __end_cap_;
} vector_d094a3c3;

typedef struct vector<rtc::tslog::TsCounter, std::allocator<rtc::tslog::TsCounter>> {
    struct TsCounter *_field1;
    struct TsCounter *_field2;
    struct __compressed_pair<rtc::tslog::TsCounter *, std::allocator<rtc::tslog::TsCounter>> {
        struct TsCounter *_field1;
    } _field3;
} vector_c8fcf483;

typedef struct vector<std::string, std::allocator<std::string>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *_field1;
    } _field3;
} vector_74824a0a;

typedef struct weak_ptr<mediastreaming::ISessionLogger> {
    struct ISessionLogger *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_a6535127;

#pragma mark Named Unions

union CodecSpecificInfoUnion {
    struct CodecSpecificInfoVP8 _field1;
    struct CodecSpecificInfoVP9 _field2;
    struct CodecSpecificInfoH264 _field3;
    struct CodecSpecificInfoH265 _field4;
};

union VideoCodecUnion {
    struct VideoCodecVP8 _field1;
    struct VideoCodecVP9 _field2;
    struct VideoCodecH264 _field3;
    struct VideoCodecH265 _field4;
};

union _GLKMatrix4 {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
        float _field10;
        float _field11;
        float _field12;
        float _field13;
        float _field14;
        float _field15;
        float _field16;
    } _field1;
    float _field2[16];
};

union _GLKVector2 {
    CDStruct_b2fbf00d _field1;
    CDStruct_b2fbf00d _field2;
    float _field3[2];
};

union _GLKVector3 {
    CDStruct_869f9c67 _field1;
    CDStruct_869f9c67 _field2;
    CDStruct_869f9c67 _field3;
    float _field4[3];
};

#if 0
// Names with conflicting types:
typedef union {
    struct Allocated _field1;
    struct Inlined _field2;
} Data_4d3a847a;

#endif

#pragma mark Typedef'd Unions

typedef union {
    char emptyState;
    int value;
} CDUnion_7e831cd3;

typedef union {
    char emptyState;
    long long value;
} CDUnion_2d14f5d8;

typedef union {
    int data_;
    struct dummy_type dummy_;
} CDUnion_130d44d2;

typedef union {
    struct {
        struct _GLKVector3 _field1;
        struct _GLKVector3 _field2;
        struct _GLKVector3 _field3;
        struct _GLKVector3 _field4;
    } _field1;
    float _field2[12];
} CDUnion_c755e54d;

typedef union {
    struct {
        union _GLKVector3 _field1;
        union _GLKVector3 _field2;
        union _GLKVector3 _field3;
        union _GLKVector3 _field4;
    } _field1;
    float _field2[12];
} CDUnion_0bf14acb;

